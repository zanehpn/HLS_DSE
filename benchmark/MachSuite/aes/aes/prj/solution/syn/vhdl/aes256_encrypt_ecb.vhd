-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256_encrypt_ecb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_i : IN STD_LOGIC_VECTOR (767 downto 0);
    ctx_o : OUT STD_LOGIC_VECTOR (767 downto 0);
    ctx_o_ap_vld : OUT STD_LOGIC;
    k_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    k_0_ce0 : OUT STD_LOGIC;
    k_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    k_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    k_0_ce1 : OUT STD_LOGIC;
    k_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    k_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    k_1_ce0 : OUT STD_LOGIC;
    k_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    k_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    k_1_ce1 : OUT STD_LOGIC;
    k_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_0_ce0 : OUT STD_LOGIC;
    buf_0_we0 : OUT STD_LOGIC;
    buf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_0_ce1 : OUT STD_LOGIC;
    buf_0_we1 : OUT STD_LOGIC;
    buf_0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_1_ce0 : OUT STD_LOGIC;
    buf_1_we0 : OUT STD_LOGIC;
    buf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_1_ce1 : OUT STD_LOGIC;
    buf_1_we1 : OUT STD_LOGIC;
    buf_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of aes256_encrypt_ecb is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes256_encrypt_ecb_aes256_encrypt_ecb,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.025200,HLS_SYN_LAT=582,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=60332,HLS_SYN_LUT=409315,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ctx_read_reg_201 : STD_LOGIC_VECTOR (767 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_0_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_0_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_1_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_1_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_p_out : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_p_out_ap_vld : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx_ap_vld : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx5_out : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx5_out_ap_vld : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_din1 : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_din2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_din3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_start : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_1_fu_102_ap_start : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_1_fu_102_ap_done : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_1_fu_102_ap_idle : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_1_fu_102_ap_ready : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_1_fu_102_buf_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_1_fu_102_buf_0_ce0 : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_1_fu_102_buf_0_we0 : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_1_fu_102_buf_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_addRoundKey_cpy_1_fu_102_buf_0_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_1_fu_102_buf_0_ce1 : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_1_fu_102_buf_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_1_fu_102_buf_1_ce0 : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_1_fu_102_buf_1_we0 : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_1_fu_102_buf_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_addRoundKey_cpy_1_fu_102_buf_1_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_1_fu_102_buf_1_ce1 : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_1_fu_102_ap_return : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_we0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_we1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_we0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_we1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ctx_o : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ctx_o_ap_vld : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_rcon_1_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_rcon_1_out_ap_vld : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_din1 : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_din2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_din3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_start : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_125_ap_start : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_125_ap_done : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_125_ap_idle : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_125_ap_ready : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_125_buf_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_subBytes_1_fu_125_buf_0_ce0 : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_125_buf_0_we0 : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_125_buf_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_subBytes_1_fu_125_buf_0_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_subBytes_1_fu_125_buf_0_ce1 : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_125_buf_0_we1 : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_125_buf_0_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_subBytes_1_fu_125_buf_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_subBytes_1_fu_125_buf_1_ce0 : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_125_buf_1_we0 : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_125_buf_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_subBytes_1_fu_125_buf_1_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_subBytes_1_fu_125_buf_1_ce1 : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_125_buf_1_we1 : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_125_buf_1_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_expandEncKey_fu_135_ap_start : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_135_ap_done : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_135_ap_idle : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_135_ap_ready : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_135_ctx_read : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes_expandEncKey_fu_135_k_idx : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aes_expandEncKey_fu_135_rc_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_135_ap_return_0 : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes_expandEncKey_fu_135_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_shiftRows_1_fu_146_ap_start : STD_LOGIC;
    signal grp_aes_shiftRows_1_fu_146_ap_done : STD_LOGIC;
    signal grp_aes_shiftRows_1_fu_146_ap_idle : STD_LOGIC;
    signal grp_aes_shiftRows_1_fu_146_ap_ready : STD_LOGIC;
    signal grp_aes_shiftRows_1_fu_146_buf_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_shiftRows_1_fu_146_buf_0_ce0 : STD_LOGIC;
    signal grp_aes_shiftRows_1_fu_146_buf_0_we0 : STD_LOGIC;
    signal grp_aes_shiftRows_1_fu_146_buf_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_shiftRows_1_fu_146_buf_0_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_shiftRows_1_fu_146_buf_0_ce1 : STD_LOGIC;
    signal grp_aes_shiftRows_1_fu_146_buf_0_we1 : STD_LOGIC;
    signal grp_aes_shiftRows_1_fu_146_buf_0_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_shiftRows_1_fu_146_buf_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_shiftRows_1_fu_146_buf_1_ce0 : STD_LOGIC;
    signal grp_aes_shiftRows_1_fu_146_buf_1_we0 : STD_LOGIC;
    signal grp_aes_shiftRows_1_fu_146_buf_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_shiftRows_1_fu_146_buf_1_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_shiftRows_1_fu_146_buf_1_ce1 : STD_LOGIC;
    signal grp_aes_shiftRows_1_fu_146_buf_1_we1 : STD_LOGIC;
    signal grp_aes_shiftRows_1_fu_146_buf_1_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_addRoundKey_1_fu_154_ap_start : STD_LOGIC;
    signal grp_aes_addRoundKey_1_fu_154_ap_done : STD_LOGIC;
    signal grp_aes_addRoundKey_1_fu_154_ap_idle : STD_LOGIC;
    signal grp_aes_addRoundKey_1_fu_154_ap_ready : STD_LOGIC;
    signal grp_aes_addRoundKey_1_fu_154_buf_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_1_fu_154_buf_0_ce0 : STD_LOGIC;
    signal grp_aes_addRoundKey_1_fu_154_buf_0_we0 : STD_LOGIC;
    signal grp_aes_addRoundKey_1_fu_154_buf_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_addRoundKey_1_fu_154_buf_0_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_1_fu_154_buf_0_ce1 : STD_LOGIC;
    signal grp_aes_addRoundKey_1_fu_154_buf_0_we1 : STD_LOGIC;
    signal grp_aes_addRoundKey_1_fu_154_buf_0_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_addRoundKey_1_fu_154_buf_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_1_fu_154_buf_1_ce0 : STD_LOGIC;
    signal grp_aes_addRoundKey_1_fu_154_buf_1_we0 : STD_LOGIC;
    signal grp_aes_addRoundKey_1_fu_154_buf_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_addRoundKey_1_fu_154_buf_1_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_1_fu_154_buf_1_ce1 : STD_LOGIC;
    signal grp_aes_addRoundKey_1_fu_154_buf_1_we1 : STD_LOGIC;
    signal grp_aes_addRoundKey_1_fu_154_buf_1_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_aes_addRoundKey_cpy_1_fu_102_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_aes_subBytes_1_fu_125_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_NS_fsm_state10 : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_aes_expandEncKey_fu_135_ap_start_reg : STD_LOGIC := '0';
    signal grp_aes_shiftRows_1_fu_146_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state20 : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_aes_addRoundKey_1_fu_154_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_NS_fsm_state34 : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_load : IN STD_LOGIC_VECTOR (767 downto 0);
        k_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        k_0_ce0 : OUT STD_LOGIC;
        k_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        k_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        k_0_ce1 : OUT STD_LOGIC;
        k_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        k_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        k_1_ce0 : OUT STD_LOGIC;
        k_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        k_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        k_1_ce1 : OUT STD_LOGIC;
        k_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_out : OUT STD_LOGIC_VECTOR (767 downto 0);
        p_out_ap_vld : OUT STD_LOGIC );
    end component;


    component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_reload : IN STD_LOGIC_VECTOR (767 downto 0);
        ctx : OUT STD_LOGIC_VECTOR (767 downto 0);
        ctx_ap_vld : OUT STD_LOGIC;
        ctx5_out : OUT STD_LOGIC_VECTOR (767 downto 0);
        ctx5_out_ap_vld : OUT STD_LOGIC;
        grp_aes_expandEncKey_fu_135_p_din1 : OUT STD_LOGIC_VECTOR (767 downto 0);
        grp_aes_expandEncKey_fu_135_p_din2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        grp_aes_expandEncKey_fu_135_p_din3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        grp_aes_expandEncKey_fu_135_p_dout0_0 : IN STD_LOGIC_VECTOR (767 downto 0);
        grp_aes_expandEncKey_fu_135_p_dout0_1 : IN STD_LOGIC_VECTOR (7 downto 0);
        grp_aes_expandEncKey_fu_135_p_start : OUT STD_LOGIC;
        grp_aes_expandEncKey_fu_135_p_ready : IN STD_LOGIC;
        grp_aes_expandEncKey_fu_135_p_done : IN STD_LOGIC;
        grp_aes_expandEncKey_fu_135_p_idle : IN STD_LOGIC );
    end component;


    component aes256_encrypt_ecb_aes_addRoundKey_cpy_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_0_ce0 : OUT STD_LOGIC;
        buf_0_we0 : OUT STD_LOGIC;
        buf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_0_ce1 : OUT STD_LOGIC;
        buf_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_1_ce0 : OUT STD_LOGIC;
        buf_1_we0 : OUT STD_LOGIC;
        buf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_1_ce1 : OUT STD_LOGIC;
        buf_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ctx_read : IN STD_LOGIC_VECTOR (767 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (767 downto 0) );
    end component;


    component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_0_ce0 : OUT STD_LOGIC;
        buf_0_we0 : OUT STD_LOGIC;
        buf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_0_ce1 : OUT STD_LOGIC;
        buf_0_we1 : OUT STD_LOGIC;
        buf_0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_1_ce0 : OUT STD_LOGIC;
        buf_1_we0 : OUT STD_LOGIC;
        buf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_1_ce1 : OUT STD_LOGIC;
        buf_1_we1 : OUT STD_LOGIC;
        buf_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ctx_i : IN STD_LOGIC_VECTOR (767 downto 0);
        ctx_o : OUT STD_LOGIC_VECTOR (767 downto 0);
        ctx_o_ap_vld : OUT STD_LOGIC;
        rcon_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        rcon_1_out_ap_vld : OUT STD_LOGIC;
        grp_aes_expandEncKey_fu_135_p_din1 : OUT STD_LOGIC_VECTOR (767 downto 0);
        grp_aes_expandEncKey_fu_135_p_din2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        grp_aes_expandEncKey_fu_135_p_din3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        grp_aes_expandEncKey_fu_135_p_dout0_0 : IN STD_LOGIC_VECTOR (767 downto 0);
        grp_aes_expandEncKey_fu_135_p_dout0_1 : IN STD_LOGIC_VECTOR (7 downto 0);
        grp_aes_expandEncKey_fu_135_p_start : OUT STD_LOGIC;
        grp_aes_expandEncKey_fu_135_p_ready : IN STD_LOGIC;
        grp_aes_expandEncKey_fu_135_p_done : IN STD_LOGIC;
        grp_aes_expandEncKey_fu_135_p_idle : IN STD_LOGIC );
    end component;


    component aes256_encrypt_ecb_aes_subBytes_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_0_ce0 : OUT STD_LOGIC;
        buf_0_we0 : OUT STD_LOGIC;
        buf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_0_ce1 : OUT STD_LOGIC;
        buf_0_we1 : OUT STD_LOGIC;
        buf_0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_1_ce0 : OUT STD_LOGIC;
        buf_1_we0 : OUT STD_LOGIC;
        buf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_1_ce1 : OUT STD_LOGIC;
        buf_1_we1 : OUT STD_LOGIC;
        buf_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component aes256_encrypt_ecb_aes_expandEncKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_read : IN STD_LOGIC_VECTOR (767 downto 0);
        k_idx : IN STD_LOGIC_VECTOR (9 downto 0);
        rc_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (767 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_encrypt_ecb_aes_shiftRows_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_0_ce0 : OUT STD_LOGIC;
        buf_0_we0 : OUT STD_LOGIC;
        buf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_0_ce1 : OUT STD_LOGIC;
        buf_0_we1 : OUT STD_LOGIC;
        buf_0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_1_ce0 : OUT STD_LOGIC;
        buf_1_we0 : OUT STD_LOGIC;
        buf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_1_ce1 : OUT STD_LOGIC;
        buf_1_we1 : OUT STD_LOGIC;
        buf_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component aes256_encrypt_ecb_aes_addRoundKey_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_0_ce0 : OUT STD_LOGIC;
        buf_0_we0 : OUT STD_LOGIC;
        buf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_0_ce1 : OUT STD_LOGIC;
        buf_0_we1 : OUT STD_LOGIC;
        buf_0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_1_ce0 : OUT STD_LOGIC;
        buf_1_we0 : OUT STD_LOGIC;
        buf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buf_1_ce1 : OUT STD_LOGIC;
        buf_1_we1 : OUT STD_LOGIC;
        buf_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        buf_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read : IN STD_LOGIC_VECTOR (767 downto 0);
        key_idx : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81 : component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_start,
        ap_done => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_ready,
        ctx_load => ctx_read_reg_201,
        k_0_address0 => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_0_address0,
        k_0_ce0 => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_0_ce0,
        k_0_q0 => k_0_q0,
        k_0_address1 => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_0_address1,
        k_0_ce1 => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_0_ce1,
        k_0_q1 => k_0_q1,
        k_1_address0 => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_1_address0,
        k_1_ce0 => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_1_ce0,
        k_1_q0 => k_1_q0,
        k_1_address1 => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_1_address1,
        k_1_ce1 => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_1_ce1,
        k_1_q1 => k_1_q1,
        p_out => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_p_out,
        p_out_ap_vld => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_p_out_ap_vld);

    grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92 : component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_start,
        ap_done => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_ready,
        p_reload => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_p_out,
        ctx => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx,
        ctx_ap_vld => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx_ap_vld,
        ctx5_out => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx5_out,
        ctx5_out_ap_vld => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx5_out_ap_vld,
        grp_aes_expandEncKey_fu_135_p_din1 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_din1,
        grp_aes_expandEncKey_fu_135_p_din2 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_din2,
        grp_aes_expandEncKey_fu_135_p_din3 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_din3,
        grp_aes_expandEncKey_fu_135_p_dout0_0 => grp_aes_expandEncKey_fu_135_ap_return_0,
        grp_aes_expandEncKey_fu_135_p_dout0_1 => grp_aes_expandEncKey_fu_135_ap_return_1,
        grp_aes_expandEncKey_fu_135_p_start => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_start,
        grp_aes_expandEncKey_fu_135_p_ready => grp_aes_expandEncKey_fu_135_ap_ready,
        grp_aes_expandEncKey_fu_135_p_done => grp_aes_expandEncKey_fu_135_ap_done,
        grp_aes_expandEncKey_fu_135_p_idle => grp_aes_expandEncKey_fu_135_ap_idle);

    grp_aes_addRoundKey_cpy_1_fu_102 : component aes256_encrypt_ecb_aes_addRoundKey_cpy_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_addRoundKey_cpy_1_fu_102_ap_start,
        ap_done => grp_aes_addRoundKey_cpy_1_fu_102_ap_done,
        ap_idle => grp_aes_addRoundKey_cpy_1_fu_102_ap_idle,
        ap_ready => grp_aes_addRoundKey_cpy_1_fu_102_ap_ready,
        buf_0_address0 => grp_aes_addRoundKey_cpy_1_fu_102_buf_0_address0,
        buf_0_ce0 => grp_aes_addRoundKey_cpy_1_fu_102_buf_0_ce0,
        buf_0_we0 => grp_aes_addRoundKey_cpy_1_fu_102_buf_0_we0,
        buf_0_d0 => grp_aes_addRoundKey_cpy_1_fu_102_buf_0_d0,
        buf_0_address1 => grp_aes_addRoundKey_cpy_1_fu_102_buf_0_address1,
        buf_0_ce1 => grp_aes_addRoundKey_cpy_1_fu_102_buf_0_ce1,
        buf_0_q1 => buf_0_q1,
        buf_1_address0 => grp_aes_addRoundKey_cpy_1_fu_102_buf_1_address0,
        buf_1_ce0 => grp_aes_addRoundKey_cpy_1_fu_102_buf_1_ce0,
        buf_1_we0 => grp_aes_addRoundKey_cpy_1_fu_102_buf_1_we0,
        buf_1_d0 => grp_aes_addRoundKey_cpy_1_fu_102_buf_1_d0,
        buf_1_address1 => grp_aes_addRoundKey_cpy_1_fu_102_buf_1_address1,
        buf_1_ce1 => grp_aes_addRoundKey_cpy_1_fu_102_buf_1_ce1,
        buf_1_q1 => buf_1_q1,
        ctx_read => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx5_out,
        ap_return => grp_aes_addRoundKey_cpy_1_fu_102_ap_return);

    grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112 : component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_start,
        ap_done => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_ready,
        buf_0_address0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_address0,
        buf_0_ce0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_ce0,
        buf_0_we0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_we0,
        buf_0_d0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_d0,
        buf_0_q0 => buf_0_q0,
        buf_0_address1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_address1,
        buf_0_ce1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_ce1,
        buf_0_we1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_we1,
        buf_0_d1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_d1,
        buf_0_q1 => buf_0_q1,
        buf_1_address0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_address0,
        buf_1_ce0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_ce0,
        buf_1_we0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_we0,
        buf_1_d0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_d0,
        buf_1_q0 => buf_1_q0,
        buf_1_address1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_address1,
        buf_1_ce1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_ce1,
        buf_1_we1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_we1,
        buf_1_d1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_d1,
        buf_1_q1 => buf_1_q1,
        ctx_i => ctx_i,
        ctx_o => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ctx_o,
        ctx_o_ap_vld => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ctx_o_ap_vld,
        rcon_1_out => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_rcon_1_out,
        rcon_1_out_ap_vld => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_rcon_1_out_ap_vld,
        grp_aes_expandEncKey_fu_135_p_din1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_din1,
        grp_aes_expandEncKey_fu_135_p_din2 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_din2,
        grp_aes_expandEncKey_fu_135_p_din3 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_din3,
        grp_aes_expandEncKey_fu_135_p_dout0_0 => grp_aes_expandEncKey_fu_135_ap_return_0,
        grp_aes_expandEncKey_fu_135_p_dout0_1 => grp_aes_expandEncKey_fu_135_ap_return_1,
        grp_aes_expandEncKey_fu_135_p_start => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_start,
        grp_aes_expandEncKey_fu_135_p_ready => grp_aes_expandEncKey_fu_135_ap_ready,
        grp_aes_expandEncKey_fu_135_p_done => grp_aes_expandEncKey_fu_135_ap_done,
        grp_aes_expandEncKey_fu_135_p_idle => grp_aes_expandEncKey_fu_135_ap_idle);

    grp_aes_subBytes_1_fu_125 : component aes256_encrypt_ecb_aes_subBytes_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_subBytes_1_fu_125_ap_start,
        ap_done => grp_aes_subBytes_1_fu_125_ap_done,
        ap_idle => grp_aes_subBytes_1_fu_125_ap_idle,
        ap_ready => grp_aes_subBytes_1_fu_125_ap_ready,
        buf_0_address0 => grp_aes_subBytes_1_fu_125_buf_0_address0,
        buf_0_ce0 => grp_aes_subBytes_1_fu_125_buf_0_ce0,
        buf_0_we0 => grp_aes_subBytes_1_fu_125_buf_0_we0,
        buf_0_d0 => grp_aes_subBytes_1_fu_125_buf_0_d0,
        buf_0_q0 => buf_0_q0,
        buf_0_address1 => grp_aes_subBytes_1_fu_125_buf_0_address1,
        buf_0_ce1 => grp_aes_subBytes_1_fu_125_buf_0_ce1,
        buf_0_we1 => grp_aes_subBytes_1_fu_125_buf_0_we1,
        buf_0_d1 => grp_aes_subBytes_1_fu_125_buf_0_d1,
        buf_0_q1 => buf_0_q1,
        buf_1_address0 => grp_aes_subBytes_1_fu_125_buf_1_address0,
        buf_1_ce0 => grp_aes_subBytes_1_fu_125_buf_1_ce0,
        buf_1_we0 => grp_aes_subBytes_1_fu_125_buf_1_we0,
        buf_1_d0 => grp_aes_subBytes_1_fu_125_buf_1_d0,
        buf_1_q0 => buf_1_q0,
        buf_1_address1 => grp_aes_subBytes_1_fu_125_buf_1_address1,
        buf_1_ce1 => grp_aes_subBytes_1_fu_125_buf_1_ce1,
        buf_1_we1 => grp_aes_subBytes_1_fu_125_buf_1_we1,
        buf_1_d1 => grp_aes_subBytes_1_fu_125_buf_1_d1,
        buf_1_q1 => buf_1_q1);

    grp_aes_expandEncKey_fu_135 : component aes256_encrypt_ecb_aes_expandEncKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_expandEncKey_fu_135_ap_start,
        ap_done => grp_aes_expandEncKey_fu_135_ap_done,
        ap_idle => grp_aes_expandEncKey_fu_135_ap_idle,
        ap_ready => grp_aes_expandEncKey_fu_135_ap_ready,
        ctx_read => grp_aes_expandEncKey_fu_135_ctx_read,
        k_idx => grp_aes_expandEncKey_fu_135_k_idx,
        rc_read => grp_aes_expandEncKey_fu_135_rc_read,
        ap_return_0 => grp_aes_expandEncKey_fu_135_ap_return_0,
        ap_return_1 => grp_aes_expandEncKey_fu_135_ap_return_1);

    grp_aes_shiftRows_1_fu_146 : component aes256_encrypt_ecb_aes_shiftRows_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_shiftRows_1_fu_146_ap_start,
        ap_done => grp_aes_shiftRows_1_fu_146_ap_done,
        ap_idle => grp_aes_shiftRows_1_fu_146_ap_idle,
        ap_ready => grp_aes_shiftRows_1_fu_146_ap_ready,
        buf_0_address0 => grp_aes_shiftRows_1_fu_146_buf_0_address0,
        buf_0_ce0 => grp_aes_shiftRows_1_fu_146_buf_0_ce0,
        buf_0_we0 => grp_aes_shiftRows_1_fu_146_buf_0_we0,
        buf_0_d0 => grp_aes_shiftRows_1_fu_146_buf_0_d0,
        buf_0_q0 => buf_0_q0,
        buf_0_address1 => grp_aes_shiftRows_1_fu_146_buf_0_address1,
        buf_0_ce1 => grp_aes_shiftRows_1_fu_146_buf_0_ce1,
        buf_0_we1 => grp_aes_shiftRows_1_fu_146_buf_0_we1,
        buf_0_d1 => grp_aes_shiftRows_1_fu_146_buf_0_d1,
        buf_0_q1 => buf_0_q1,
        buf_1_address0 => grp_aes_shiftRows_1_fu_146_buf_1_address0,
        buf_1_ce0 => grp_aes_shiftRows_1_fu_146_buf_1_ce0,
        buf_1_we0 => grp_aes_shiftRows_1_fu_146_buf_1_we0,
        buf_1_d0 => grp_aes_shiftRows_1_fu_146_buf_1_d0,
        buf_1_q0 => buf_1_q0,
        buf_1_address1 => grp_aes_shiftRows_1_fu_146_buf_1_address1,
        buf_1_ce1 => grp_aes_shiftRows_1_fu_146_buf_1_ce1,
        buf_1_we1 => grp_aes_shiftRows_1_fu_146_buf_1_we1,
        buf_1_d1 => grp_aes_shiftRows_1_fu_146_buf_1_d1,
        buf_1_q1 => buf_1_q1);

    grp_aes_addRoundKey_1_fu_154 : component aes256_encrypt_ecb_aes_addRoundKey_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_addRoundKey_1_fu_154_ap_start,
        ap_done => grp_aes_addRoundKey_1_fu_154_ap_done,
        ap_idle => grp_aes_addRoundKey_1_fu_154_ap_idle,
        ap_ready => grp_aes_addRoundKey_1_fu_154_ap_ready,
        buf_0_address0 => grp_aes_addRoundKey_1_fu_154_buf_0_address0,
        buf_0_ce0 => grp_aes_addRoundKey_1_fu_154_buf_0_ce0,
        buf_0_we0 => grp_aes_addRoundKey_1_fu_154_buf_0_we0,
        buf_0_d0 => grp_aes_addRoundKey_1_fu_154_buf_0_d0,
        buf_0_q0 => buf_0_q0,
        buf_0_address1 => grp_aes_addRoundKey_1_fu_154_buf_0_address1,
        buf_0_ce1 => grp_aes_addRoundKey_1_fu_154_buf_0_ce1,
        buf_0_we1 => grp_aes_addRoundKey_1_fu_154_buf_0_we1,
        buf_0_d1 => grp_aes_addRoundKey_1_fu_154_buf_0_d1,
        buf_0_q1 => buf_0_q1,
        buf_1_address0 => grp_aes_addRoundKey_1_fu_154_buf_1_address0,
        buf_1_ce0 => grp_aes_addRoundKey_1_fu_154_buf_1_ce0,
        buf_1_we0 => grp_aes_addRoundKey_1_fu_154_buf_1_we0,
        buf_1_d0 => grp_aes_addRoundKey_1_fu_154_buf_1_d0,
        buf_1_q0 => buf_1_q0,
        buf_1_address1 => grp_aes_addRoundKey_1_fu_154_buf_1_address1,
        buf_1_ce1 => grp_aes_addRoundKey_1_fu_154_buf_1_ce1,
        buf_1_we1 => grp_aes_addRoundKey_1_fu_154_buf_1_we1,
        buf_1_d1 => grp_aes_addRoundKey_1_fu_154_buf_1_d1,
        buf_1_q1 => buf_1_q1,
        p_read => grp_aes_expandEncKey_fu_135_ap_return_0,
        key_idx => ap_const_lv8_0,
        ap_ce => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_addRoundKey_1_fu_154_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_addRoundKey_1_fu_154_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state34) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                    grp_aes_addRoundKey_1_fu_154_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_addRoundKey_1_fu_154_ap_ready = ap_const_logic_1)) then 
                    grp_aes_addRoundKey_1_fu_154_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_addRoundKey_cpy_1_fu_102_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_addRoundKey_cpy_1_fu_102_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_aes_addRoundKey_cpy_1_fu_102_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_addRoundKey_cpy_1_fu_102_ap_ready = ap_const_logic_1)) then 
                    grp_aes_addRoundKey_cpy_1_fu_102_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_expandEncKey_fu_135_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_expandEncKey_fu_135_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state10) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_aes_expandEncKey_fu_135_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_expandEncKey_fu_135_ap_ready = ap_const_logic_1)) then 
                    grp_aes_expandEncKey_fu_135_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_shiftRows_1_fu_146_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_shiftRows_1_fu_146_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state20) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    grp_aes_shiftRows_1_fu_146_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_shiftRows_1_fu_146_ap_ready = ap_const_logic_1)) then 
                    grp_aes_shiftRows_1_fu_146_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_subBytes_1_fu_125_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_subBytes_1_fu_125_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state10) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_aes_subBytes_1_fu_125_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_subBytes_1_fu_125_ap_ready = ap_const_logic_1)) then 
                    grp_aes_subBytes_1_fu_125_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                ctx_read_reg_201 <= ctx_i;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_done, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_done, grp_aes_addRoundKey_cpy_1_fu_102_ap_done, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_aes_addRoundKey_cpy_1_fu_102_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state10 <= ap_NS_fsm(9);
    ap_NS_fsm_state20 <= ap_NS_fsm(19);
    ap_NS_fsm_state34 <= ap_NS_fsm(33);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_done)
    begin
        if ((grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_done)
    begin
        if ((grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_aes_addRoundKey_cpy_1_fu_102_ap_done)
    begin
        if ((grp_aes_addRoundKey_cpy_1_fu_102_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_done)
    begin
        if ((grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_address0_assign_proc : process(ap_CS_fsm_state34, grp_aes_addRoundKey_cpy_1_fu_102_buf_0_address0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_address0, grp_aes_subBytes_1_fu_125_buf_0_address0, grp_aes_shiftRows_1_fu_146_buf_0_address0, grp_aes_addRoundKey_1_fu_154_buf_0_address0, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_0_address0 <= grp_aes_addRoundKey_1_fu_154_buf_0_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_0_address0 <= grp_aes_shiftRows_1_fu_146_buf_0_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_0_address0 <= grp_aes_subBytes_1_fu_125_buf_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_0_address0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_0_address0 <= grp_aes_addRoundKey_cpy_1_fu_102_buf_0_address0;
        else 
            buf_0_address0 <= "XX";
        end if; 
    end process;


    buf_0_address1_assign_proc : process(ap_CS_fsm_state34, grp_aes_addRoundKey_cpy_1_fu_102_buf_0_address1, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_address1, grp_aes_subBytes_1_fu_125_buf_0_address1, grp_aes_shiftRows_1_fu_146_buf_0_address1, grp_aes_addRoundKey_1_fu_154_buf_0_address1, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_0_address1 <= grp_aes_addRoundKey_1_fu_154_buf_0_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_0_address1 <= grp_aes_shiftRows_1_fu_146_buf_0_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_0_address1 <= grp_aes_subBytes_1_fu_125_buf_0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_0_address1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_0_address1 <= grp_aes_addRoundKey_cpy_1_fu_102_buf_0_address1;
        else 
            buf_0_address1 <= "XX";
        end if; 
    end process;


    buf_0_ce0_assign_proc : process(ap_CS_fsm_state34, grp_aes_addRoundKey_cpy_1_fu_102_buf_0_ce0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_ce0, grp_aes_subBytes_1_fu_125_buf_0_ce0, grp_aes_shiftRows_1_fu_146_buf_0_ce0, grp_aes_addRoundKey_1_fu_154_buf_0_ce0, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_0_ce0 <= grp_aes_addRoundKey_1_fu_154_buf_0_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_0_ce0 <= grp_aes_shiftRows_1_fu_146_buf_0_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_0_ce0 <= grp_aes_subBytes_1_fu_125_buf_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_0_ce0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_0_ce0 <= grp_aes_addRoundKey_cpy_1_fu_102_buf_0_ce0;
        else 
            buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_ce1_assign_proc : process(ap_CS_fsm_state34, grp_aes_addRoundKey_cpy_1_fu_102_buf_0_ce1, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_ce1, grp_aes_subBytes_1_fu_125_buf_0_ce1, grp_aes_shiftRows_1_fu_146_buf_0_ce1, grp_aes_addRoundKey_1_fu_154_buf_0_ce1, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_0_ce1 <= grp_aes_addRoundKey_1_fu_154_buf_0_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_0_ce1 <= grp_aes_shiftRows_1_fu_146_buf_0_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_0_ce1 <= grp_aes_subBytes_1_fu_125_buf_0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_0_ce1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_0_ce1 <= grp_aes_addRoundKey_cpy_1_fu_102_buf_0_ce1;
        else 
            buf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_d0_assign_proc : process(ap_CS_fsm_state34, grp_aes_addRoundKey_cpy_1_fu_102_buf_0_d0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_d0, grp_aes_subBytes_1_fu_125_buf_0_d0, grp_aes_shiftRows_1_fu_146_buf_0_d0, grp_aes_addRoundKey_1_fu_154_buf_0_d0, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_0_d0 <= grp_aes_addRoundKey_1_fu_154_buf_0_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_0_d0 <= grp_aes_shiftRows_1_fu_146_buf_0_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_0_d0 <= grp_aes_subBytes_1_fu_125_buf_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_0_d0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_0_d0 <= grp_aes_addRoundKey_cpy_1_fu_102_buf_0_d0;
        else 
            buf_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_0_d1_assign_proc : process(ap_CS_fsm_state34, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_d1, grp_aes_subBytes_1_fu_125_buf_0_d1, grp_aes_shiftRows_1_fu_146_buf_0_d1, grp_aes_addRoundKey_1_fu_154_buf_0_d1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_0_d1 <= grp_aes_addRoundKey_1_fu_154_buf_0_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_0_d1 <= grp_aes_shiftRows_1_fu_146_buf_0_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_0_d1 <= grp_aes_subBytes_1_fu_125_buf_0_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_0_d1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_d1;
        else 
            buf_0_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_0_we0_assign_proc : process(ap_CS_fsm_state34, grp_aes_addRoundKey_cpy_1_fu_102_buf_0_we0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_we0, grp_aes_subBytes_1_fu_125_buf_0_we0, grp_aes_shiftRows_1_fu_146_buf_0_we0, grp_aes_addRoundKey_1_fu_154_buf_0_we0, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_0_we0 <= grp_aes_addRoundKey_1_fu_154_buf_0_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_0_we0 <= grp_aes_shiftRows_1_fu_146_buf_0_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_0_we0 <= grp_aes_subBytes_1_fu_125_buf_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_0_we0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_0_we0 <= grp_aes_addRoundKey_cpy_1_fu_102_buf_0_we0;
        else 
            buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_we1_assign_proc : process(ap_CS_fsm_state34, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_we1, grp_aes_subBytes_1_fu_125_buf_0_we1, grp_aes_shiftRows_1_fu_146_buf_0_we1, grp_aes_addRoundKey_1_fu_154_buf_0_we1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_0_we1 <= grp_aes_addRoundKey_1_fu_154_buf_0_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_0_we1 <= grp_aes_shiftRows_1_fu_146_buf_0_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_0_we1 <= grp_aes_subBytes_1_fu_125_buf_0_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_0_we1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_0_we1;
        else 
            buf_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_address0_assign_proc : process(ap_CS_fsm_state34, grp_aes_addRoundKey_cpy_1_fu_102_buf_1_address0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_address0, grp_aes_subBytes_1_fu_125_buf_1_address0, grp_aes_shiftRows_1_fu_146_buf_1_address0, grp_aes_addRoundKey_1_fu_154_buf_1_address0, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_1_address0 <= grp_aes_addRoundKey_1_fu_154_buf_1_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_1_address0 <= grp_aes_shiftRows_1_fu_146_buf_1_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_1_address0 <= grp_aes_subBytes_1_fu_125_buf_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_1_address0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_1_address0 <= grp_aes_addRoundKey_cpy_1_fu_102_buf_1_address0;
        else 
            buf_1_address0 <= "XX";
        end if; 
    end process;


    buf_1_address1_assign_proc : process(ap_CS_fsm_state34, grp_aes_addRoundKey_cpy_1_fu_102_buf_1_address1, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_address1, grp_aes_subBytes_1_fu_125_buf_1_address1, grp_aes_shiftRows_1_fu_146_buf_1_address1, grp_aes_addRoundKey_1_fu_154_buf_1_address1, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_1_address1 <= grp_aes_addRoundKey_1_fu_154_buf_1_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_1_address1 <= grp_aes_shiftRows_1_fu_146_buf_1_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_1_address1 <= grp_aes_subBytes_1_fu_125_buf_1_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_1_address1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_1_address1 <= grp_aes_addRoundKey_cpy_1_fu_102_buf_1_address1;
        else 
            buf_1_address1 <= "XX";
        end if; 
    end process;


    buf_1_ce0_assign_proc : process(ap_CS_fsm_state34, grp_aes_addRoundKey_cpy_1_fu_102_buf_1_ce0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_ce0, grp_aes_subBytes_1_fu_125_buf_1_ce0, grp_aes_shiftRows_1_fu_146_buf_1_ce0, grp_aes_addRoundKey_1_fu_154_buf_1_ce0, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_1_ce0 <= grp_aes_addRoundKey_1_fu_154_buf_1_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_1_ce0 <= grp_aes_shiftRows_1_fu_146_buf_1_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_1_ce0 <= grp_aes_subBytes_1_fu_125_buf_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_1_ce0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_1_ce0 <= grp_aes_addRoundKey_cpy_1_fu_102_buf_1_ce0;
        else 
            buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_ce1_assign_proc : process(ap_CS_fsm_state34, grp_aes_addRoundKey_cpy_1_fu_102_buf_1_ce1, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_ce1, grp_aes_subBytes_1_fu_125_buf_1_ce1, grp_aes_shiftRows_1_fu_146_buf_1_ce1, grp_aes_addRoundKey_1_fu_154_buf_1_ce1, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_1_ce1 <= grp_aes_addRoundKey_1_fu_154_buf_1_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_1_ce1 <= grp_aes_shiftRows_1_fu_146_buf_1_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_1_ce1 <= grp_aes_subBytes_1_fu_125_buf_1_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_1_ce1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_1_ce1 <= grp_aes_addRoundKey_cpy_1_fu_102_buf_1_ce1;
        else 
            buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_d0_assign_proc : process(ap_CS_fsm_state34, grp_aes_addRoundKey_cpy_1_fu_102_buf_1_d0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_d0, grp_aes_subBytes_1_fu_125_buf_1_d0, grp_aes_shiftRows_1_fu_146_buf_1_d0, grp_aes_addRoundKey_1_fu_154_buf_1_d0, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_1_d0 <= grp_aes_addRoundKey_1_fu_154_buf_1_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_1_d0 <= grp_aes_shiftRows_1_fu_146_buf_1_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_1_d0 <= grp_aes_subBytes_1_fu_125_buf_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_1_d0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_1_d0 <= grp_aes_addRoundKey_cpy_1_fu_102_buf_1_d0;
        else 
            buf_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_1_d1_assign_proc : process(ap_CS_fsm_state34, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_d1, grp_aes_subBytes_1_fu_125_buf_1_d1, grp_aes_shiftRows_1_fu_146_buf_1_d1, grp_aes_addRoundKey_1_fu_154_buf_1_d1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_1_d1 <= grp_aes_addRoundKey_1_fu_154_buf_1_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_1_d1 <= grp_aes_shiftRows_1_fu_146_buf_1_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_1_d1 <= grp_aes_subBytes_1_fu_125_buf_1_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_1_d1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_d1;
        else 
            buf_1_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_1_we0_assign_proc : process(ap_CS_fsm_state34, grp_aes_addRoundKey_cpy_1_fu_102_buf_1_we0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_we0, grp_aes_subBytes_1_fu_125_buf_1_we0, grp_aes_shiftRows_1_fu_146_buf_1_we0, grp_aes_addRoundKey_1_fu_154_buf_1_we0, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_1_we0 <= grp_aes_addRoundKey_1_fu_154_buf_1_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_1_we0 <= grp_aes_shiftRows_1_fu_146_buf_1_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_1_we0 <= grp_aes_subBytes_1_fu_125_buf_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_1_we0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_1_we0 <= grp_aes_addRoundKey_cpy_1_fu_102_buf_1_we0;
        else 
            buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_we1_assign_proc : process(ap_CS_fsm_state34, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_we1, grp_aes_subBytes_1_fu_125_buf_1_we1, grp_aes_shiftRows_1_fu_146_buf_1_we1, grp_aes_addRoundKey_1_fu_154_buf_1_we1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buf_1_we1 <= grp_aes_addRoundKey_1_fu_154_buf_1_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_1_we1 <= grp_aes_shiftRows_1_fu_146_buf_1_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_1_we1 <= grp_aes_subBytes_1_fu_125_buf_1_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_1_we1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_buf_1_we1;
        else 
            buf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_o_assign_proc : process(ap_CS_fsm_state34, grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_p_out, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx_ap_vld, grp_aes_addRoundKey_cpy_1_fu_102_ap_done, grp_aes_addRoundKey_cpy_1_fu_102_ap_return, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ctx_o, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ctx_o_ap_vld, grp_aes_expandEncKey_fu_135_ap_return_0, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            ctx_o <= grp_aes_expandEncKey_fu_135_ap_return_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_aes_addRoundKey_cpy_1_fu_102_ap_done = ap_const_logic_1))) then 
            ctx_o <= grp_aes_addRoundKey_cpy_1_fu_102_ap_return;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctx_o <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_p_out;
        elsif (((grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ctx_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ctx_o <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ctx_o;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx_ap_vld = ap_const_logic_1))) then 
            ctx_o <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx;
        else 
            ctx_o <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ctx_o_ap_vld_assign_proc : process(ap_CS_fsm_state34, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx_ap_vld, grp_aes_addRoundKey_cpy_1_fu_102_ap_done, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ctx_o_ap_vld, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_aes_addRoundKey_cpy_1_fu_102_ap_done = ap_const_logic_1)))) then 
            ctx_o_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_o_ap_vld <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ctx_o_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctx_o_ap_vld <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ctx_ap_vld;
        else 
            ctx_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_start <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_ap_start_reg;
    grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_start <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_ap_start_reg;
    grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_start <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_ap_start_reg;
    grp_aes_addRoundKey_1_fu_154_ap_start <= grp_aes_addRoundKey_1_fu_154_ap_start_reg;
    grp_aes_addRoundKey_cpy_1_fu_102_ap_start <= grp_aes_addRoundKey_cpy_1_fu_102_ap_start_reg;

    grp_aes_expandEncKey_fu_135_ap_start_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_start, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_start, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_aes_expandEncKey_fu_135_ap_start_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_aes_expandEncKey_fu_135_ap_start <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_start;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_aes_expandEncKey_fu_135_ap_start <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_start;
        else 
            grp_aes_expandEncKey_fu_135_ap_start <= grp_aes_expandEncKey_fu_135_ap_start_reg;
        end if; 
    end process;


    grp_aes_expandEncKey_fu_135_ctx_read_assign_proc : process(ctx_i, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_din1, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_din1, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_aes_expandEncKey_fu_135_ctx_read <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_aes_expandEncKey_fu_135_ctx_read <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_aes_expandEncKey_fu_135_ctx_read <= ctx_i;
        else 
            grp_aes_expandEncKey_fu_135_ctx_read
        end if; 
    end process;


    grp_aes_expandEncKey_fu_135_k_idx_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_din2, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_din2, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_aes_expandEncKey_fu_135_k_idx <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_din2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_aes_expandEncKey_fu_135_k_idx <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_din2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_aes_expandEncKey_fu_135_k_idx <= ap_const_lv10_0;
        else 
            grp_aes_expandEncKey_fu_135_k_idx <= "XXXXXXXXXX";
        end if; 
    end process;


    grp_aes_expandEncKey_fu_135_rc_read_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_din3, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_rcon_1_out, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_din3, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_aes_expandEncKey_fu_135_rc_read <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_grp_aes_expandEncKey_fu_135_p_din3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_aes_expandEncKey_fu_135_rc_read <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_92_grp_aes_expandEncKey_fu_135_p_din3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_aes_expandEncKey_fu_135_rc_read <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_112_rcon_1_out;
        else 
            grp_aes_expandEncKey_fu_135_rc_read <= "XXXXXXXX";
        end if; 
    end process;

    grp_aes_shiftRows_1_fu_146_ap_start <= grp_aes_shiftRows_1_fu_146_ap_start_reg;
    grp_aes_subBytes_1_fu_125_ap_start <= grp_aes_subBytes_1_fu_125_ap_start_reg;
    k_0_address0 <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_0_address0;
    k_0_address1 <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_0_address1;
    k_0_ce0 <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_0_ce0;
    k_0_ce1 <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_0_ce1;
    k_1_address0 <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_1_address0;
    k_1_address1 <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_1_address1;
    k_1_ce0 <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_1_ce0;
    k_1_ce1 <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_81_k_1_ce1;
end behav;
