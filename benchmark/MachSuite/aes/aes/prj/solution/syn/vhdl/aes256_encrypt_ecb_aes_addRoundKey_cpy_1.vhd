-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256_encrypt_ecb_aes_addRoundKey_cpy_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_0_ce0 : OUT STD_LOGIC;
    buf_0_we0 : OUT STD_LOGIC;
    buf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_0_ce1 : OUT STD_LOGIC;
    buf_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_1_ce0 : OUT STD_LOGIC;
    buf_1_we0 : OUT STD_LOGIC;
    buf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_1_ce1 : OUT STD_LOGIC;
    buf_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    ctx_read : IN STD_LOGIC_VECTOR (767 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (767 downto 0) );
end;


architecture behav of aes256_encrypt_ecb_aes_addRoundKey_cpy_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv129_lc_40 : STD_LOGIC_VECTOR (128 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv257_lc_41 : STD_LOGIC_VECTOR (256 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln122_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln122_fu_188_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln122_reg_558 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_563 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_reg_568 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_0_addr_reg_573 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_1_addr_reg_579 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln122_1_fu_404_p3 : STD_LOGIC_VECTOR (767 downto 0);
    signal or_ln122_1_reg_585 : STD_LOGIC_VECTOR (767 downto 0);
    signal icmp_ln122_reg_590 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln122_4_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_92 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln122_fu_412_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal phi_ln122_fu_96 : STD_LOGIC_VECTOR (767 downto 0);
    signal ap_sig_allocacmp_phi_ln122_load : STD_LOGIC_VECTOR (767 downto 0);
    signal zext_ln122_cast_fu_168_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln122_fu_178_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln122_fu_182_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal shl_ln_fu_160_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln122_1_fu_192_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln122_fu_196_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln122_3_fu_206_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln122_2_fu_202_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal xor_ln122_fu_216_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal sext_ln122_fu_222_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln122_2_fu_230_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln122_1_fu_226_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln122_2_fu_240_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln122_1_fu_210_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln122_fu_234_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_s_fu_252_p4 : STD_LOGIC_VECTOR (639 downto 0);
    signal or_ln122_fu_246_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal empty_fu_156_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln122_7_cast_fu_302_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln122_2_fu_312_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln_fu_272_p3 : STD_LOGIC_VECTOR (767 downto 0);
    signal zext_ln122_12_fu_316_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln122_2_fu_320_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal zext_ln122_13_fu_330_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal shl_ln122_2_fu_334_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal trunc_ln122_6_fu_326_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln122_9_fu_344_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal zext_ln122_8_fu_340_p1 : STD_LOGIC_VECTOR (256 downto 0);
    signal xor_ln122_2_fu_354_p2 : STD_LOGIC_VECTOR (256 downto 0);
    signal trunc_ln122_5_fu_262_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal sext_ln122_1_fu_360_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_90_fu_368_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal trunc_ln122_7_fu_364_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal and_ln122_4_fu_382_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal shl_ln122_3_fu_348_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal and_ln122_3_fu_376_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_91_fu_394_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln122_3_fu_388_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal and_ln122_1_fu_429_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln122_5_fu_436_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln122_1_fu_440_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln122_6_fu_450_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln122_3_fu_454_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_fu_464_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_464_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_464_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln122_7_fu_478_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln122_4_fu_482_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln122_3_fu_488_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln122_1_fu_473_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln122_11_fu_500_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln122_6_fu_494_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln122_6_fu_504_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln122_10_fu_523_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln122_5_fu_517_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln122_5_fu_527_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes256_encrypt_ecb_mux_21_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_encrypt_ecb_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_21_8_1_1_U15 : component aes256_encrypt_ecb_mux_21_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 1,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_38_fu_464_p1,
        din1 => tmp_38_fu_464_p2,
        din2 => tmp_reg_563,
        dout => tmp_38_fu_464_p4);

    flow_control_loop_pipe_sequential_init_U : component aes256_encrypt_ecb_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_92 <= ap_const_lv4_F;
                elsif (((icmp_ln122_fu_418_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_92 <= add_ln122_fu_412_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_ln122_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    phi_ln122_fu_96 <= ctx_read;
                elsif (((icmp_ln122_reg_590 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    phi_ln122_fu_96 <= or_ln122_1_reg_585;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                buf_0_addr_reg_573 <= zext_ln122_4_fu_296_p1(2 - 1 downto 0);
                buf_1_addr_reg_579 <= zext_ln122_4_fu_296_p1(2 - 1 downto 0);
                icmp_ln122_reg_590 <= icmp_ln122_fu_418_p2;
                or_ln122_1_reg_585 <= or_ln122_1_fu_404_p3;
                tmp_93_reg_568 <= i_fu_92(2 downto 2);
                tmp_reg_563 <= i_fu_92(3 downto 3);
                trunc_ln122_reg_558 <= trunc_ln122_fu_188_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln122_fu_412_p2 <= std_logic_vector(unsigned(i_fu_92) + unsigned(ap_const_lv4_F));
    and_ln122_1_fu_429_p3 <= (tmp_93_reg_568 & ap_const_lv3_0);
    and_ln122_2_fu_240_p2 <= (trunc_ln122_2_fu_230_p1 and trunc_ln122_1_fu_226_p1);
    and_ln122_3_fu_376_p2 <= (sext_ln122_1_fu_360_p1 and or_ln_fu_272_p3);
    and_ln122_4_fu_382_p2 <= (trunc_ln122_7_fu_364_p1 and tmp_90_fu_368_p3);
    and_ln122_5_fu_517_p2 <= (xor_ln122_3_fu_488_p2 and buf_1_q1);
    and_ln122_6_fu_494_p2 <= (xor_ln122_3_fu_488_p2 and buf_0_q1);
    and_ln122_fu_234_p2 <= (sext_ln122_fu_222_p1 and ap_sig_allocacmp_phi_ln122_load);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln122_fu_418_p2)
    begin
        if (((icmp_ln122_fu_418_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= or_ln122_1_reg_585;

    ap_sig_allocacmp_phi_ln122_load_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln122_1_reg_585, icmp_ln122_reg_590, ap_block_pp0_stage0, phi_ln122_fu_96)
    begin
        if (((icmp_ln122_reg_590 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_phi_ln122_load <= or_ln122_1_reg_585;
        else 
            ap_sig_allocacmp_phi_ln122_load <= phi_ln122_fu_96;
        end if; 
    end process;

    buf_0_address0 <= buf_0_addr_reg_573;
    buf_0_address1 <= zext_ln122_4_fu_296_p1(2 - 1 downto 0);

    buf_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_0_ce0 <= ap_const_logic_1;
        else 
            buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_0_ce1 <= ap_const_logic_1;
        else 
            buf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_0_d0 <= (shl_ln122_6_fu_504_p2 or and_ln122_6_fu_494_p2);

    buf_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, tmp_reg_563)
    begin
        if (((tmp_reg_563 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_0_we0 <= ap_const_logic_1;
        else 
            buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_address0 <= buf_1_addr_reg_579;
    buf_1_address1 <= zext_ln122_4_fu_296_p1(2 - 1 downto 0);

    buf_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_1_ce0 <= ap_const_logic_1;
        else 
            buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_1_ce1 <= ap_const_logic_1;
        else 
            buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_d0 <= (shl_ln122_5_fu_527_p2 or and_ln122_5_fu_517_p2);

    buf_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, tmp_reg_563)
    begin
        if (((tmp_reg_563 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_1_we0 <= ap_const_logic_1;
        else 
            buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_156_p1 <= i_fu_92(2 - 1 downto 0);
    icmp_ln122_fu_418_p2 <= "1" when (i_fu_92 = ap_const_lv4_0) else "0";
    lshr_ln122_1_fu_440_p2 <= std_logic_vector(shift_right(unsigned(buf_0_q1),to_integer(unsigned('0' & zext_ln122_5_fu_436_p1(16-1 downto 0)))));
    lshr_ln122_2_fu_320_p2 <= std_logic_vector(shift_right(unsigned(or_ln_fu_272_p3),to_integer(unsigned('0' & zext_ln122_12_fu_316_p1(31-1 downto 0)))));
    lshr_ln122_3_fu_454_p2 <= std_logic_vector(shift_right(unsigned(buf_1_q1),to_integer(unsigned('0' & zext_ln122_6_fu_450_p1(16-1 downto 0)))));
    lshr_ln122_fu_182_p2 <= std_logic_vector(shift_right(unsigned(ap_sig_allocacmp_phi_ln122_load),to_integer(unsigned('0' & zext_ln122_fu_178_p1(31-1 downto 0)))));
    or_ln122_1_fu_404_p3 <= (tmp_91_fu_394_p4 & or_ln122_3_fu_388_p2);
    or_ln122_3_fu_388_p2 <= (shl_ln122_3_fu_348_p2 or and_ln122_4_fu_382_p2);
    or_ln122_fu_246_p2 <= (shl_ln122_1_fu_210_p2 or and_ln122_2_fu_240_p2);
    or_ln_fu_272_p3 <= (tmp_s_fu_252_p4 & or_ln122_fu_246_p2);
        sext_ln122_1_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln122_2_fu_354_p2),768));

        sext_ln122_2_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln122_7_cast_fu_302_p4),9));

        sext_ln122_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln122_fu_216_p2),768));

    shl_ln122_1_fu_210_p2 <= std_logic_vector(shift_left(unsigned(zext_ln122_3_fu_206_p1),to_integer(unsigned('0' & zext_ln122_1_fu_192_p1(31-1 downto 0)))));
    shl_ln122_2_fu_334_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv256_lc_1),to_integer(unsigned('0' & zext_ln122_13_fu_330_p1(31-1 downto 0)))));
    shl_ln122_3_fu_348_p2 <= std_logic_vector(shift_left(unsigned(zext_ln122_9_fu_344_p1),to_integer(unsigned('0' & zext_ln122_13_fu_330_p1(31-1 downto 0)))));
    shl_ln122_4_fu_482_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_FF),to_integer(unsigned('0' & zext_ln122_7_fu_478_p1(16-1 downto 0)))));
    shl_ln122_5_fu_527_p2 <= std_logic_vector(shift_left(unsigned(zext_ln122_10_fu_523_p1),to_integer(unsigned('0' & zext_ln122_7_fu_478_p1(16-1 downto 0)))));
    shl_ln122_6_fu_504_p2 <= std_logic_vector(shift_left(unsigned(zext_ln122_11_fu_500_p1),to_integer(unsigned('0' & zext_ln122_7_fu_478_p1(16-1 downto 0)))));
    shl_ln122_fu_196_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln122_1_fu_192_p1(31-1 downto 0)))));
    shl_ln_fu_160_p3 <= (i_fu_92 & ap_const_lv3_0);
    tmp_38_fu_464_p1 <= lshr_ln122_1_fu_440_p2(8 - 1 downto 0);
    tmp_38_fu_464_p2 <= lshr_ln122_3_fu_454_p2(8 - 1 downto 0);
    tmp_90_fu_368_p3 <= (trunc_ln122_5_fu_262_p4 & or_ln122_fu_246_p2);
    tmp_91_fu_394_p4 <= and_ln122_3_fu_376_p2(767 downto 256);
    tmp_s_fu_252_p4 <= and_ln122_fu_234_p2(767 downto 128);
    trunc_ln122_1_fu_226_p1 <= xor_ln122_fu_216_p2(128 - 1 downto 0);
    trunc_ln122_2_fu_230_p1 <= ap_sig_allocacmp_phi_ln122_load(128 - 1 downto 0);
    trunc_ln122_5_fu_262_p4 <= and_ln122_fu_234_p2(255 downto 128);
    trunc_ln122_6_fu_326_p1 <= lshr_ln122_2_fu_320_p2(8 - 1 downto 0);
    trunc_ln122_7_fu_364_p1 <= xor_ln122_2_fu_354_p2(256 - 1 downto 0);
    trunc_ln122_fu_188_p1 <= lshr_ln122_fu_182_p2(8 - 1 downto 0);
    xor_ln122_1_fu_473_p2 <= (trunc_ln122_reg_558 xor tmp_38_fu_464_p4);
    xor_ln122_2_fu_354_p2 <= (zext_ln122_8_fu_340_p1 xor ap_const_lv257_lc_41);
    xor_ln122_3_fu_488_p2 <= (shl_ln122_4_fu_482_p2 xor ap_const_lv16_FFFF);
    xor_ln122_fu_216_p2 <= (zext_ln122_2_fu_202_p1 xor ap_const_lv129_lc_40);
    zext_ln122_10_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln122_1_fu_473_p2),16));
    zext_ln122_11_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln122_1_fu_473_p2),16));
    zext_ln122_12_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln122_2_fu_312_p1),768));
    zext_ln122_13_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln122_7_cast_fu_302_p4),256));
    zext_ln122_1_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_160_p3),128));
    zext_ln122_2_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln122_fu_196_p2),129));
    zext_ln122_3_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln122_fu_188_p1),128));
    zext_ln122_4_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_156_p1),64));
    zext_ln122_5_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln122_1_fu_429_p3),16));
    zext_ln122_6_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln122_1_fu_429_p3),16));
    zext_ln122_7_cast_fu_302_p4 <= ((ap_const_lv1_1 & i_fu_92) & ap_const_lv3_0);
    zext_ln122_7_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln122_1_fu_429_p3),16));
    zext_ln122_8_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln122_2_fu_334_p2),257));
    zext_ln122_9_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln122_6_fu_326_p1),256));
    zext_ln122_cast_fu_168_p4 <= ((ap_const_lv2_2 & i_fu_92) & ap_const_lv3_0);
    zext_ln122_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln122_cast_fu_168_p4),768));
end behav;
