// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes256_encrypt_ecb_aes_subBytes_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_0_address0,
        buf_0_ce0,
        buf_0_we0,
        buf_0_d0,
        buf_0_q0,
        buf_0_address1,
        buf_0_ce1,
        buf_0_we1,
        buf_0_d1,
        buf_0_q1,
        buf_1_address0,
        buf_1_ce0,
        buf_1_we0,
        buf_1_d0,
        buf_1_q0,
        buf_1_address1,
        buf_1_ce1,
        buf_1_we1,
        buf_1_d1,
        buf_1_q1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] buf_0_address0;
output   buf_0_ce0;
output   buf_0_we0;
output  [15:0] buf_0_d0;
input  [15:0] buf_0_q0;
output  [1:0] buf_0_address1;
output   buf_0_ce1;
output   buf_0_we1;
output  [15:0] buf_0_d1;
input  [15:0] buf_0_q1;
output  [1:0] buf_1_address0;
output   buf_1_ce0;
output   buf_1_we0;
output  [15:0] buf_1_d0;
input  [15:0] buf_1_q0;
output  [1:0] buf_1_address1;
output   buf_1_ce1;
output   buf_1_we1;
output  [15:0] buf_1_d1;
input  [15:0] buf_1_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] buf_0_address0;
reg buf_0_ce0;
reg buf_0_we0;
reg[15:0] buf_0_d0;
reg[1:0] buf_0_address1;
reg buf_0_ce1;
reg buf_0_we1;
reg[15:0] buf_0_d1;
reg[1:0] buf_1_address0;
reg buf_1_ce0;
reg buf_1_we0;
reg[15:0] buf_1_d0;
reg[1:0] buf_1_address1;
reg buf_1_ce1;
reg buf_1_we1;
reg[15:0] buf_1_d1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
reg   [7:0] sbox_address1;
reg    sbox_ce1;
wire   [7:0] sbox_q1;
reg   [7:0] reg_299;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state7;
reg   [7:0] reg_303;
reg   [7:0] reg_307;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
reg   [7:0] reg_311;
wire   [1:0] buf_1_addr_reg_487;
wire   [1:0] buf_1_addr_1_reg_492;
wire   [1:0] buf_0_addr_reg_497;
wire   [1:0] buf_0_addr_1_reg_502;
wire    ap_CS_fsm_state2;
wire   [1:0] buf_1_addr_2_reg_517;
wire   [1:0] buf_1_addr_3_reg_522;
wire   [7:0] trunc_ln106_fu_325_p1;
reg   [7:0] trunc_ln106_reg_527;
wire   [7:0] trunc_ln106_1_fu_329_p1;
reg   [7:0] trunc_ln106_1_reg_532;
reg   [7:0] tmp_6_reg_537;
reg   [7:0] tmp_7_reg_542;
wire   [1:0] buf_0_addr_2_reg_547;
wire   [1:0] buf_0_addr_3_reg_552;
wire   [7:0] trunc_ln106_4_fu_333_p1;
reg   [7:0] trunc_ln106_4_reg_557;
wire   [7:0] trunc_ln106_5_fu_337_p1;
reg   [7:0] trunc_ln106_5_reg_562;
wire   [7:0] trunc_ln106_2_fu_351_p1;
reg   [7:0] trunc_ln106_2_reg_577;
wire   [7:0] trunc_ln106_3_fu_355_p1;
reg   [7:0] trunc_ln106_3_reg_582;
reg   [7:0] tmp_8_reg_587;
reg   [7:0] tmp_10_reg_592;
wire   [7:0] trunc_ln106_6_fu_359_p1;
reg   [7:0] trunc_ln106_6_reg_597;
wire   [7:0] trunc_ln106_7_fu_363_p1;
reg   [7:0] trunc_ln106_7_reg_602;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln106_fu_315_p1;
wire   [63:0] zext_ln106_1_fu_320_p1;
wire   [63:0] zext_ln106_2_fu_341_p1;
wire   [63:0] zext_ln106_3_fu_346_p1;
wire   [63:0] zext_ln106_4_fu_367_p1;
wire   [63:0] zext_ln106_5_fu_371_p1;
wire   [63:0] zext_ln106_6_fu_393_p1;
wire   [63:0] zext_ln106_7_fu_397_p1;
wire   [63:0] zext_ln106_8_fu_419_p1;
wire   [63:0] zext_ln106_9_fu_423_p1;
wire   [63:0] zext_ln106_10_fu_427_p1;
wire   [63:0] zext_ln106_11_fu_431_p1;
wire   [63:0] zext_ln106_12_fu_435_p1;
wire   [63:0] zext_ln106_13_fu_439_p1;
wire   [63:0] zext_ln106_14_fu_461_p1;
wire   [63:0] zext_ln106_15_fu_465_p1;
wire   [15:0] tmp_9_fu_375_p3;
wire   [15:0] tmp_1_fu_384_p3;
wire   [15:0] tmp_5_fu_401_p3;
wire   [15:0] tmp_4_fu_410_p3;
wire   [15:0] tmp_11_fu_443_p3;
wire   [15:0] tmp_12_fu_452_p3;
wire    ap_CS_fsm_state10;
wire   [15:0] tmp_13_fu_469_p3;
wire   [15:0] tmp_14_fu_478_p3;
wire   [7:0] grp_fu_259_p4;
wire   [7:0] grp_fu_269_p4;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

aes256_encrypt_ecb_aes_subBytes_1_sbox_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0),
    .address1(sbox_address1),
    .ce1(sbox_ce1),
    .q1(sbox_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_299 <= sbox_q1;
        reg_303 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_307 <= sbox_q1;
        reg_311 <= sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_10_reg_592 <= {{buf_0_q0[15:8]}};
        tmp_8_reg_587 <= {{buf_0_q1[15:8]}};
        trunc_ln106_2_reg_577 <= trunc_ln106_2_fu_351_p1;
        trunc_ln106_3_reg_582 <= trunc_ln106_3_fu_355_p1;
        trunc_ln106_6_reg_597 <= trunc_ln106_6_fu_359_p1;
        trunc_ln106_7_reg_602 <= trunc_ln106_7_fu_363_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_6_reg_537 <= {{buf_0_q1[15:8]}};
        tmp_7_reg_542 <= {{buf_0_q0[15:8]}};
        trunc_ln106_1_reg_532 <= trunc_ln106_1_fu_329_p1;
        trunc_ln106_4_reg_557 <= trunc_ln106_4_fu_333_p1;
        trunc_ln106_5_reg_562 <= trunc_ln106_5_fu_337_p1;
        trunc_ln106_reg_527 <= trunc_ln106_fu_325_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_0_address0 = buf_0_addr_3_reg_552;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buf_0_address0 = buf_0_addr_1_reg_502;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_0_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_0_address0 = 64'd2;
    end else begin
        buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_0_address1 = buf_0_addr_2_reg_547;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buf_0_address1 = buf_0_addr_reg_497;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_0_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_0_address1 = 64'd3;
    end else begin
        buf_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        buf_0_ce0 = 1'b1;
    end else begin
        buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        buf_0_ce1 = 1'b1;
    end else begin
        buf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_0_d0 = tmp_14_fu_478_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buf_0_d0 = tmp_12_fu_452_p3;
    end else begin
        buf_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_0_d1 = tmp_13_fu_469_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buf_0_d1 = tmp_11_fu_443_p3;
    end else begin
        buf_0_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        buf_0_we0 = 1'b1;
    end else begin
        buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        buf_0_we1 = 1'b1;
    end else begin
        buf_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_1_address0 = buf_1_addr_3_reg_522;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buf_1_address0 = buf_1_addr_1_reg_492;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_1_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_1_address0 = 64'd2;
    end else begin
        buf_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_1_address1 = buf_1_addr_2_reg_517;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buf_1_address1 = buf_1_addr_reg_487;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_1_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_1_address1 = 64'd3;
    end else begin
        buf_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        buf_1_ce0 = 1'b1;
    end else begin
        buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        buf_1_ce1 = 1'b1;
    end else begin
        buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_1_d0 = tmp_4_fu_410_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buf_1_d0 = tmp_1_fu_384_p3;
    end else begin
        buf_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_1_d1 = tmp_5_fu_401_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buf_1_d1 = tmp_9_fu_375_p3;
    end else begin
        buf_1_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        buf_1_we0 = 1'b1;
    end else begin
        buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        buf_1_we1 = 1'b1;
    end else begin
        buf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sbox_address0 = zext_ln106_15_fu_465_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_address0 = zext_ln106_13_fu_439_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sbox_address0 = zext_ln106_11_fu_431_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_address0 = zext_ln106_9_fu_423_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_address0 = zext_ln106_7_fu_397_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_address0 = zext_ln106_5_fu_371_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_address0 = zext_ln106_3_fu_346_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sbox_address0 = zext_ln106_1_fu_320_p1;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sbox_address1 = zext_ln106_14_fu_461_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_address1 = zext_ln106_12_fu_435_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sbox_address1 = zext_ln106_10_fu_427_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_address1 = zext_ln106_8_fu_419_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_address1 = zext_ln106_6_fu_393_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_address1 = zext_ln106_4_fu_367_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_address1 = zext_ln106_2_fu_341_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sbox_address1 = zext_ln106_fu_315_p1;
    end else begin
        sbox_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        sbox_ce1 = 1'b1;
    end else begin
        sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign buf_0_addr_1_reg_502 = 64'd2;

assign buf_0_addr_2_reg_547 = 64'd1;

assign buf_0_addr_3_reg_552 = 64'd0;

assign buf_0_addr_reg_497 = 64'd3;

assign buf_1_addr_1_reg_492 = 64'd2;

assign buf_1_addr_2_reg_517 = 64'd1;

assign buf_1_addr_3_reg_522 = 64'd0;

assign buf_1_addr_reg_487 = 64'd3;

assign grp_fu_259_p4 = {{buf_1_q1[15:8]}};

assign grp_fu_269_p4 = {{buf_1_q0[15:8]}};

assign tmp_11_fu_443_p3 = {{reg_299}, {sbox_q1}};

assign tmp_12_fu_452_p3 = {{reg_303}, {sbox_q0}};

assign tmp_13_fu_469_p3 = {{reg_307}, {sbox_q1}};

assign tmp_14_fu_478_p3 = {{reg_311}, {sbox_q0}};

assign tmp_1_fu_384_p3 = {{reg_303}, {sbox_q0}};

assign tmp_4_fu_410_p3 = {{reg_311}, {sbox_q0}};

assign tmp_5_fu_401_p3 = {{reg_307}, {sbox_q1}};

assign tmp_9_fu_375_p3 = {{reg_299}, {sbox_q1}};

assign trunc_ln106_1_fu_329_p1 = buf_1_q0[7:0];

assign trunc_ln106_2_fu_351_p1 = buf_1_q1[7:0];

assign trunc_ln106_3_fu_355_p1 = buf_1_q0[7:0];

assign trunc_ln106_4_fu_333_p1 = buf_0_q1[7:0];

assign trunc_ln106_5_fu_337_p1 = buf_0_q0[7:0];

assign trunc_ln106_6_fu_359_p1 = buf_0_q1[7:0];

assign trunc_ln106_7_fu_363_p1 = buf_0_q0[7:0];

assign trunc_ln106_fu_325_p1 = buf_1_q1[7:0];

assign zext_ln106_10_fu_427_p1 = tmp_8_reg_587;

assign zext_ln106_11_fu_431_p1 = tmp_10_reg_592;

assign zext_ln106_12_fu_435_p1 = trunc_ln106_4_reg_557;

assign zext_ln106_13_fu_439_p1 = trunc_ln106_5_reg_562;

assign zext_ln106_14_fu_461_p1 = trunc_ln106_6_reg_597;

assign zext_ln106_15_fu_465_p1 = trunc_ln106_7_reg_602;

assign zext_ln106_1_fu_320_p1 = grp_fu_269_p4;

assign zext_ln106_2_fu_341_p1 = grp_fu_259_p4;

assign zext_ln106_3_fu_346_p1 = grp_fu_269_p4;

assign zext_ln106_4_fu_367_p1 = trunc_ln106_reg_527;

assign zext_ln106_5_fu_371_p1 = trunc_ln106_1_reg_532;

assign zext_ln106_6_fu_393_p1 = trunc_ln106_2_reg_577;

assign zext_ln106_7_fu_397_p1 = trunc_ln106_3_reg_582;

assign zext_ln106_8_fu_419_p1 = tmp_6_reg_537;

assign zext_ln106_9_fu_423_p1 = tmp_7_reg_542;

assign zext_ln106_fu_315_p1 = grp_fu_259_p4;

endmodule //aes256_encrypt_ecb_aes_subBytes_1
