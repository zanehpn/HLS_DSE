// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes256_encrypt_ecb_aes_addRoundKey_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_0_address0,
        buf_0_ce0,
        buf_0_we0,
        buf_0_d0,
        buf_0_q0,
        buf_0_address1,
        buf_0_ce1,
        buf_0_we1,
        buf_0_d1,
        buf_0_q1,
        buf_1_address0,
        buf_1_ce0,
        buf_1_we0,
        buf_1_d0,
        buf_1_q0,
        buf_1_address1,
        buf_1_ce1,
        buf_1_we1,
        buf_1_d1,
        buf_1_q1,
        p_read,
        key_idx,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] buf_0_address0;
output   buf_0_ce0;
output   buf_0_we0;
output  [15:0] buf_0_d0;
input  [15:0] buf_0_q0;
output  [1:0] buf_0_address1;
output   buf_0_ce1;
output   buf_0_we1;
output  [15:0] buf_0_d1;
input  [15:0] buf_0_q1;
output  [1:0] buf_1_address0;
output   buf_1_ce0;
output   buf_1_we0;
output  [15:0] buf_1_d0;
input  [15:0] buf_1_q0;
output  [1:0] buf_1_address1;
output   buf_1_ce1;
output   buf_1_we1;
output  [15:0] buf_1_d1;
input  [15:0] buf_1_q1;
input  [767:0] p_read;
input  [7:0] key_idx;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] buf_0_address0;
reg buf_0_ce0;
reg buf_0_we0;
reg[15:0] buf_0_d0;
reg[1:0] buf_0_address1;
reg buf_0_ce1;
reg buf_0_we1;
reg[15:0] buf_0_d1;
reg[1:0] buf_1_address0;
reg buf_1_ce0;
reg buf_1_we0;
reg[15:0] buf_1_d0;
reg[1:0] buf_1_address1;
reg buf_1_ce1;
reg buf_1_we1;
reg[15:0] buf_1_d1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] reg_170;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [1:0] buf_1_addr_reg_737;
wire   [1:0] buf_1_addr_9_reg_742;
wire   [1:0] buf_0_addr_reg_747;
wire   [1:0] buf_0_addr_9_reg_752;
reg   [7:0] key_idx_read_reg_757;
reg   [767:0] p_read_1_reg_770;
wire   [7:0] xor_ln114_fu_205_p2;
reg   [7:0] xor_ln114_reg_783;
wire   [7:0] xor_ln114_1_fu_241_p2;
reg   [7:0] xor_ln114_1_reg_788;
wire   [1:0] buf_1_addr_10_reg_793;
wire   [1:0] buf_1_addr_11_reg_798;
wire   [7:0] xor_ln114_4_fu_271_p2;
reg   [7:0] xor_ln114_4_reg_803;
wire   [7:0] xor_ln114_5_fu_301_p2;
reg   [7:0] xor_ln114_5_reg_808;
wire   [7:0] xor_ln114_8_fu_337_p2;
reg   [7:0] xor_ln114_8_reg_813;
wire   [7:0] xor_ln114_9_fu_373_p2;
reg   [7:0] xor_ln114_9_reg_818;
wire   [1:0] buf_0_addr_10_reg_823;
wire   [1:0] buf_0_addr_11_reg_828;
wire   [7:0] xor_ln114_12_fu_403_p2;
reg   [7:0] xor_ln114_12_reg_833;
wire   [7:0] xor_ln114_2_fu_437_p2;
reg   [7:0] xor_ln114_2_reg_838;
wire   [7:0] xor_ln114_3_fu_471_p2;
reg   [7:0] xor_ln114_3_reg_843;
wire   [7:0] xor_ln114_6_fu_513_p2;
reg   [7:0] xor_ln114_6_reg_848;
wire   [7:0] xor_ln114_7_fu_541_p2;
reg   [7:0] xor_ln114_7_reg_853;
wire   [7:0] xor_ln114_10_fu_575_p2;
reg   [7:0] xor_ln114_10_reg_858;
reg   [15:0] buf_0_load_11_reg_863;
wire   [7:0] xor_ln114_11_fu_609_p2;
reg   [7:0] xor_ln114_11_reg_868;
reg   [767:0] ap_port_reg_p_read;
reg   [7:0] ap_port_reg_key_idx;
wire   [15:0] tmp_44_fu_477_p3;
wire   [15:0] tmp_46_fu_484_p3;
wire    ap_CS_fsm_state4;
wire   [15:0] tmp_48_fu_658_p3;
wire   [15:0] tmp_50_fu_665_p3;
wire   [15:0] tmp_56_fu_615_p3;
wire   [15:0] tmp_58_fu_650_p3;
wire   [15:0] tmp_60_fu_700_p3;
wire   [15:0] tmp_62_fu_729_p3;
wire   [7:0] add_ln114_fu_175_p2;
wire   [767:0] zext_ln114_fu_181_p1;
wire   [767:0] lshr_ln114_fu_185_p2;
wire   [7:0] tmp3_fu_195_p4;
wire   [7:0] trunc_ln114_fu_191_p1;
wire   [7:0] add_ln114_1_fu_211_p2;
wire   [767:0] zext_ln114_1_fu_217_p1;
wire   [767:0] lshr_ln114_1_fu_221_p2;
wire   [7:0] tmp_4_fu_231_p4;
wire   [7:0] trunc_ln114_1_fu_227_p1;
wire   [7:0] add_ln114_4_fu_247_p2;
wire   [767:0] zext_ln114_4_fu_253_p1;
wire   [767:0] lshr_ln114_4_fu_257_p2;
wire   [7:0] trunc_ln114_5_fu_267_p1;
wire   [7:0] trunc_ln114_4_fu_263_p1;
wire   [7:0] add_ln114_5_fu_277_p2;
wire   [767:0] zext_ln114_5_fu_283_p1;
wire   [767:0] lshr_ln114_5_fu_287_p2;
wire   [7:0] trunc_ln114_7_fu_297_p1;
wire   [7:0] trunc_ln114_6_fu_293_p1;
wire   [7:0] add_ln114_8_fu_307_p2;
wire   [767:0] zext_ln114_8_fu_313_p1;
wire   [767:0] lshr_ln114_8_fu_317_p2;
wire   [7:0] tmp_93_fu_327_p4;
wire   [7:0] trunc_ln114_12_fu_323_p1;
wire   [7:0] add_ln114_9_fu_343_p2;
wire   [767:0] zext_ln114_9_fu_349_p1;
wire   [767:0] lshr_ln114_9_fu_353_p2;
wire   [7:0] tmp_94_fu_363_p4;
wire   [7:0] trunc_ln114_13_fu_359_p1;
wire   [7:0] add_ln114_12_fu_379_p2;
wire   [767:0] zext_ln114_12_fu_385_p1;
wire   [767:0] lshr_ln114_12_fu_389_p2;
wire   [7:0] trunc_ln114_17_fu_399_p1;
wire   [7:0] trunc_ln114_16_fu_395_p1;
wire   [7:0] add_ln114_2_fu_409_p2;
wire   [767:0] zext_ln114_2_fu_414_p1;
wire   [767:0] lshr_ln114_2_fu_418_p2;
wire   [7:0] tmp_s_fu_427_p4;
wire   [7:0] trunc_ln114_2_fu_423_p1;
wire   [7:0] add_ln114_3_fu_443_p2;
wire   [767:0] zext_ln114_3_fu_448_p1;
wire   [767:0] lshr_ln114_3_fu_452_p2;
wire   [7:0] tmp_92_fu_461_p4;
wire   [7:0] trunc_ln114_3_fu_457_p1;
wire   [7:0] add_ln114_6_fu_491_p2;
wire   [767:0] zext_ln114_6_fu_496_p1;
wire   [767:0] lshr_ln114_6_fu_500_p2;
wire   [7:0] trunc_ln114_9_fu_509_p1;
wire   [7:0] trunc_ln114_8_fu_505_p1;
wire   [7:0] add_ln114_7_fu_519_p2;
wire   [767:0] zext_ln114_7_fu_524_p1;
wire   [767:0] lshr_ln114_7_fu_528_p2;
wire   [7:0] trunc_ln114_11_fu_537_p1;
wire   [7:0] trunc_ln114_10_fu_533_p1;
wire   [7:0] add_ln114_10_fu_547_p2;
wire   [767:0] zext_ln114_10_fu_552_p1;
wire   [767:0] lshr_ln114_10_fu_556_p2;
wire   [7:0] tmp_95_fu_565_p4;
wire   [7:0] trunc_ln114_14_fu_561_p1;
wire   [7:0] add_ln114_11_fu_581_p2;
wire   [767:0] zext_ln114_11_fu_586_p1;
wire   [767:0] lshr_ln114_11_fu_590_p2;
wire   [7:0] tmp_96_fu_599_p4;
wire   [7:0] trunc_ln114_15_fu_595_p1;
wire   [7:0] add_ln114_13_fu_622_p2;
wire   [767:0] zext_ln114_13_fu_627_p1;
wire   [767:0] lshr_ln114_13_fu_631_p2;
wire   [7:0] trunc_ln114_19_fu_640_p1;
wire   [7:0] trunc_ln114_18_fu_636_p1;
wire   [7:0] xor_ln114_13_fu_644_p2;
wire   [7:0] add_ln114_14_fu_672_p2;
wire   [767:0] zext_ln114_14_fu_677_p1;
wire   [767:0] lshr_ln114_14_fu_681_p2;
wire   [7:0] trunc_ln114_21_fu_690_p1;
wire   [7:0] trunc_ln114_20_fu_686_p1;
wire   [7:0] xor_ln114_14_fu_694_p2;
wire   [767:0] zext_ln114_15_fu_708_p1;
wire   [767:0] lshr_ln114_15_fu_711_p2;
wire   [7:0] trunc_ln114_23_fu_720_p1;
wire   [7:0] trunc_ln114_22_fu_716_p1;
wire   [7:0] xor_ln114_15_fu_723_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            reg_170 <= buf_0_q1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            reg_170 <= buf_0_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_port_reg_key_idx <= key_idx;
        ap_port_reg_p_read <= p_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_0_load_11_reg_863 <= buf_0_q0;
        xor_ln114_10_reg_858 <= xor_ln114_10_fu_575_p2;
        xor_ln114_11_reg_868 <= xor_ln114_11_fu_609_p2;
        xor_ln114_2_reg_838 <= xor_ln114_2_fu_437_p2;
        xor_ln114_3_reg_843 <= xor_ln114_3_fu_471_p2;
        xor_ln114_6_reg_848 <= xor_ln114_6_fu_513_p2;
        xor_ln114_7_reg_853 <= xor_ln114_7_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        key_idx_read_reg_757 <= ap_port_reg_key_idx;
        p_read_1_reg_770 <= ap_port_reg_p_read;
        xor_ln114_12_reg_833 <= xor_ln114_12_fu_403_p2;
        xor_ln114_1_reg_788 <= xor_ln114_1_fu_241_p2;
        xor_ln114_4_reg_803 <= xor_ln114_4_fu_271_p2;
        xor_ln114_5_reg_808 <= xor_ln114_5_fu_301_p2;
        xor_ln114_8_reg_813 <= xor_ln114_8_fu_337_p2;
        xor_ln114_9_reg_818 <= xor_ln114_9_fu_373_p2;
        xor_ln114_reg_783 <= xor_ln114_fu_205_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (1'b0 == ap_ce))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_0_address0 = buf_0_addr_11_reg_828;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_0_address0 = buf_0_addr_9_reg_752;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_0_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_0_address0 = 64'd2;
    end else begin
        buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_0_address1 = buf_0_addr_10_reg_823;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_0_address1 = buf_0_addr_reg_747;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_0_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_0_address1 = 64'd3;
    end else begin
        buf_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        buf_0_ce0 = 1'b1;
    end else begin
        buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        buf_0_ce1 = 1'b1;
    end else begin
        buf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_0_d0 = tmp_62_fu_729_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_0_d0 = tmp_58_fu_650_p3;
    end else begin
        buf_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_0_d1 = tmp_60_fu_700_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_0_d1 = tmp_56_fu_615_p3;
    end else begin
        buf_0_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)))) begin
        buf_0_we0 = 1'b1;
    end else begin
        buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)))) begin
        buf_0_we1 = 1'b1;
    end else begin
        buf_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_1_address0 = buf_1_addr_11_reg_798;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_1_address0 = buf_1_addr_9_reg_742;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_1_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_1_address0 = 64'd2;
    end else begin
        buf_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_1_address1 = buf_1_addr_10_reg_793;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_1_address1 = buf_1_addr_reg_737;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_1_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_1_address1 = 64'd3;
    end else begin
        buf_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        buf_1_ce0 = 1'b1;
    end else begin
        buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        buf_1_ce1 = 1'b1;
    end else begin
        buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_1_d0 = tmp_50_fu_665_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_1_d0 = tmp_46_fu_484_p3;
    end else begin
        buf_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_1_d1 = tmp_48_fu_658_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_1_d1 = tmp_44_fu_477_p3;
    end else begin
        buf_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)))) begin
        buf_1_we0 = 1'b1;
    end else begin
        buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)))) begin
        buf_1_we1 = 1'b1;
    end else begin
        buf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln114_10_fu_547_p2 = (key_idx_read_reg_757 + 8'd40);

assign add_ln114_11_fu_581_p2 = (key_idx_read_reg_757 + 8'd32);

assign add_ln114_12_fu_379_p2 = (ap_port_reg_key_idx + 8'd24);

assign add_ln114_13_fu_622_p2 = (key_idx_read_reg_757 + 8'd16);

assign add_ln114_14_fu_672_p2 = (key_idx_read_reg_757 + 8'd8);

assign add_ln114_1_fu_211_p2 = (ap_port_reg_key_idx + 8'd112);

assign add_ln114_2_fu_409_p2 = (key_idx_read_reg_757 + 8'd104);

assign add_ln114_3_fu_443_p2 = (key_idx_read_reg_757 + 8'd96);

assign add_ln114_4_fu_247_p2 = (ap_port_reg_key_idx + 8'd88);

assign add_ln114_5_fu_277_p2 = (ap_port_reg_key_idx + 8'd80);

assign add_ln114_6_fu_491_p2 = (key_idx_read_reg_757 + 8'd72);

assign add_ln114_7_fu_519_p2 = (key_idx_read_reg_757 + 8'd64);

assign add_ln114_8_fu_307_p2 = (ap_port_reg_key_idx + 8'd56);

assign add_ln114_9_fu_343_p2 = (ap_port_reg_key_idx + 8'd48);

assign add_ln114_fu_175_p2 = (ap_port_reg_key_idx + 8'd120);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign buf_0_addr_10_reg_823 = 64'd1;

assign buf_0_addr_11_reg_828 = 64'd0;

assign buf_0_addr_9_reg_752 = 64'd2;

assign buf_0_addr_reg_747 = 64'd3;

assign buf_1_addr_10_reg_793 = 64'd1;

assign buf_1_addr_11_reg_798 = 64'd0;

assign buf_1_addr_9_reg_742 = 64'd2;

assign buf_1_addr_reg_737 = 64'd3;

assign lshr_ln114_10_fu_556_p2 = p_read_1_reg_770 >> zext_ln114_10_fu_552_p1;

assign lshr_ln114_11_fu_590_p2 = p_read_1_reg_770 >> zext_ln114_11_fu_586_p1;

assign lshr_ln114_12_fu_389_p2 = ap_port_reg_p_read >> zext_ln114_12_fu_385_p1;

assign lshr_ln114_13_fu_631_p2 = p_read_1_reg_770 >> zext_ln114_13_fu_627_p1;

assign lshr_ln114_14_fu_681_p2 = p_read_1_reg_770 >> zext_ln114_14_fu_677_p1;

assign lshr_ln114_15_fu_711_p2 = p_read_1_reg_770 >> zext_ln114_15_fu_708_p1;

assign lshr_ln114_1_fu_221_p2 = ap_port_reg_p_read >> zext_ln114_1_fu_217_p1;

assign lshr_ln114_2_fu_418_p2 = p_read_1_reg_770 >> zext_ln114_2_fu_414_p1;

assign lshr_ln114_3_fu_452_p2 = p_read_1_reg_770 >> zext_ln114_3_fu_448_p1;

assign lshr_ln114_4_fu_257_p2 = ap_port_reg_p_read >> zext_ln114_4_fu_253_p1;

assign lshr_ln114_5_fu_287_p2 = ap_port_reg_p_read >> zext_ln114_5_fu_283_p1;

assign lshr_ln114_6_fu_500_p2 = p_read_1_reg_770 >> zext_ln114_6_fu_496_p1;

assign lshr_ln114_7_fu_528_p2 = p_read_1_reg_770 >> zext_ln114_7_fu_524_p1;

assign lshr_ln114_8_fu_317_p2 = ap_port_reg_p_read >> zext_ln114_8_fu_313_p1;

assign lshr_ln114_9_fu_353_p2 = ap_port_reg_p_read >> zext_ln114_9_fu_349_p1;

assign lshr_ln114_fu_185_p2 = ap_port_reg_p_read >> zext_ln114_fu_181_p1;

assign tmp3_fu_195_p4 = {{buf_1_q1[15:8]}};

assign tmp_44_fu_477_p3 = {{xor_ln114_reg_783}, {xor_ln114_4_reg_803}};

assign tmp_46_fu_484_p3 = {{xor_ln114_1_reg_788}, {xor_ln114_5_reg_808}};

assign tmp_48_fu_658_p3 = {{xor_ln114_2_reg_838}, {xor_ln114_6_reg_848}};

assign tmp_4_fu_231_p4 = {{buf_1_q0[15:8]}};

assign tmp_50_fu_665_p3 = {{xor_ln114_3_reg_843}, {xor_ln114_7_reg_853}};

assign tmp_56_fu_615_p3 = {{xor_ln114_8_reg_813}, {xor_ln114_12_reg_833}};

assign tmp_58_fu_650_p3 = {{xor_ln114_9_reg_818}, {xor_ln114_13_fu_644_p2}};

assign tmp_60_fu_700_p3 = {{xor_ln114_10_reg_858}, {xor_ln114_14_fu_694_p2}};

assign tmp_62_fu_729_p3 = {{xor_ln114_11_reg_868}, {xor_ln114_15_fu_723_p2}};

assign tmp_92_fu_461_p4 = {{buf_1_q0[15:8]}};

assign tmp_93_fu_327_p4 = {{buf_0_q1[15:8]}};

assign tmp_94_fu_363_p4 = {{buf_0_q0[15:8]}};

assign tmp_95_fu_565_p4 = {{buf_0_q1[15:8]}};

assign tmp_96_fu_599_p4 = {{buf_0_q0[15:8]}};

assign tmp_s_fu_427_p4 = {{buf_1_q1[15:8]}};

assign trunc_ln114_10_fu_533_p1 = lshr_ln114_7_fu_528_p2[7:0];

assign trunc_ln114_11_fu_537_p1 = buf_1_q0[7:0];

assign trunc_ln114_12_fu_323_p1 = lshr_ln114_8_fu_317_p2[7:0];

assign trunc_ln114_13_fu_359_p1 = lshr_ln114_9_fu_353_p2[7:0];

assign trunc_ln114_14_fu_561_p1 = lshr_ln114_10_fu_556_p2[7:0];

assign trunc_ln114_15_fu_595_p1 = lshr_ln114_11_fu_590_p2[7:0];

assign trunc_ln114_16_fu_395_p1 = lshr_ln114_12_fu_389_p2[7:0];

assign trunc_ln114_17_fu_399_p1 = buf_0_q1[7:0];

assign trunc_ln114_18_fu_636_p1 = lshr_ln114_13_fu_631_p2[7:0];

assign trunc_ln114_19_fu_640_p1 = reg_170[7:0];

assign trunc_ln114_1_fu_227_p1 = lshr_ln114_1_fu_221_p2[7:0];

assign trunc_ln114_20_fu_686_p1 = lshr_ln114_14_fu_681_p2[7:0];

assign trunc_ln114_21_fu_690_p1 = reg_170[7:0];

assign trunc_ln114_22_fu_716_p1 = lshr_ln114_15_fu_711_p2[7:0];

assign trunc_ln114_23_fu_720_p1 = buf_0_load_11_reg_863[7:0];

assign trunc_ln114_2_fu_423_p1 = lshr_ln114_2_fu_418_p2[7:0];

assign trunc_ln114_3_fu_457_p1 = lshr_ln114_3_fu_452_p2[7:0];

assign trunc_ln114_4_fu_263_p1 = lshr_ln114_4_fu_257_p2[7:0];

assign trunc_ln114_5_fu_267_p1 = buf_1_q1[7:0];

assign trunc_ln114_6_fu_293_p1 = lshr_ln114_5_fu_287_p2[7:0];

assign trunc_ln114_7_fu_297_p1 = buf_1_q0[7:0];

assign trunc_ln114_8_fu_505_p1 = lshr_ln114_6_fu_500_p2[7:0];

assign trunc_ln114_9_fu_509_p1 = buf_1_q1[7:0];

assign trunc_ln114_fu_191_p1 = lshr_ln114_fu_185_p2[7:0];

assign xor_ln114_10_fu_575_p2 = (trunc_ln114_14_fu_561_p1 ^ tmp_95_fu_565_p4);

assign xor_ln114_11_fu_609_p2 = (trunc_ln114_15_fu_595_p1 ^ tmp_96_fu_599_p4);

assign xor_ln114_12_fu_403_p2 = (trunc_ln114_17_fu_399_p1 ^ trunc_ln114_16_fu_395_p1);

assign xor_ln114_13_fu_644_p2 = (trunc_ln114_19_fu_640_p1 ^ trunc_ln114_18_fu_636_p1);

assign xor_ln114_14_fu_694_p2 = (trunc_ln114_21_fu_690_p1 ^ trunc_ln114_20_fu_686_p1);

assign xor_ln114_15_fu_723_p2 = (trunc_ln114_23_fu_720_p1 ^ trunc_ln114_22_fu_716_p1);

assign xor_ln114_1_fu_241_p2 = (trunc_ln114_1_fu_227_p1 ^ tmp_4_fu_231_p4);

assign xor_ln114_2_fu_437_p2 = (trunc_ln114_2_fu_423_p1 ^ tmp_s_fu_427_p4);

assign xor_ln114_3_fu_471_p2 = (trunc_ln114_3_fu_457_p1 ^ tmp_92_fu_461_p4);

assign xor_ln114_4_fu_271_p2 = (trunc_ln114_5_fu_267_p1 ^ trunc_ln114_4_fu_263_p1);

assign xor_ln114_5_fu_301_p2 = (trunc_ln114_7_fu_297_p1 ^ trunc_ln114_6_fu_293_p1);

assign xor_ln114_6_fu_513_p2 = (trunc_ln114_9_fu_509_p1 ^ trunc_ln114_8_fu_505_p1);

assign xor_ln114_7_fu_541_p2 = (trunc_ln114_11_fu_537_p1 ^ trunc_ln114_10_fu_533_p1);

assign xor_ln114_8_fu_337_p2 = (trunc_ln114_12_fu_323_p1 ^ tmp_93_fu_327_p4);

assign xor_ln114_9_fu_373_p2 = (trunc_ln114_13_fu_359_p1 ^ tmp_94_fu_363_p4);

assign xor_ln114_fu_205_p2 = (trunc_ln114_fu_191_p1 ^ tmp3_fu_195_p4);

assign zext_ln114_10_fu_552_p1 = add_ln114_10_fu_547_p2;

assign zext_ln114_11_fu_586_p1 = add_ln114_11_fu_581_p2;

assign zext_ln114_12_fu_385_p1 = add_ln114_12_fu_379_p2;

assign zext_ln114_13_fu_627_p1 = add_ln114_13_fu_622_p2;

assign zext_ln114_14_fu_677_p1 = add_ln114_14_fu_672_p2;

assign zext_ln114_15_fu_708_p1 = key_idx_read_reg_757;

assign zext_ln114_1_fu_217_p1 = add_ln114_1_fu_211_p2;

assign zext_ln114_2_fu_414_p1 = add_ln114_2_fu_409_p2;

assign zext_ln114_3_fu_448_p1 = add_ln114_3_fu_443_p2;

assign zext_ln114_4_fu_253_p1 = add_ln114_4_fu_247_p2;

assign zext_ln114_5_fu_283_p1 = add_ln114_5_fu_277_p2;

assign zext_ln114_6_fu_496_p1 = add_ln114_6_fu_491_p2;

assign zext_ln114_7_fu_524_p1 = add_ln114_7_fu_519_p2;

assign zext_ln114_8_fu_313_p1 = add_ln114_8_fu_307_p2;

assign zext_ln114_9_fu_349_p1 = add_ln114_9_fu_343_p2;

assign zext_ln114_fu_181_p1 = add_ln114_fu_175_p2;

endmodule //aes256_encrypt_ecb_aes_addRoundKey_1
