-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256_encrypt_ecb_aes_subBytes_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_0_ce0 : OUT STD_LOGIC;
    buf_0_we0 : OUT STD_LOGIC;
    buf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_0_ce1 : OUT STD_LOGIC;
    buf_0_we1 : OUT STD_LOGIC;
    buf_0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_1_ce0 : OUT STD_LOGIC;
    buf_1_we0 : OUT STD_LOGIC;
    buf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_1_ce1 : OUT STD_LOGIC;
    buf_1_we1 : OUT STD_LOGIC;
    buf_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of aes256_encrypt_ecb_aes_subBytes_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce1 : STD_LOGIC;
    signal sbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_299 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_303 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_307 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_311 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_addr_reg_487 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_1_addr_1_reg_492 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_0_addr_reg_497 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_0_addr_1_reg_502 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal buf_1_addr_2_reg_517 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_1_addr_3_reg_522 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln106_fu_325_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_reg_527 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_1_fu_329_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_1_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_537 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_542 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_addr_2_reg_547 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_0_addr_3_reg_552 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln106_4_fu_333_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_4_reg_557 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_5_fu_337_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_5_reg_562 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_2_fu_351_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_2_reg_577 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_3_fu_355_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_3_reg_582 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_587 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_592 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_6_fu_359_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_6_reg_597 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_7_fu_363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_7_reg_602 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln106_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_1_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_2_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_3_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_4_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_5_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_6_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_7_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_8_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_9_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_10_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_11_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_12_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_13_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_14_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_15_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_375_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_384_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_401_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_410_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_443_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_452_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_13_fu_469_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_478_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_259_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_269_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes256_encrypt_ecb_aes_subBytes_1_sbox_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component aes256_encrypt_ecb_aes_subBytes_1_sbox_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0,
        address1 => sbox_address1,
        ce1 => sbox_ce1,
        q1 => sbox_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_299 <= sbox_q1;
                reg_303 <= sbox_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_307 <= sbox_q1;
                reg_311 <= sbox_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_10_reg_592 <= buf_0_q0(15 downto 8);
                tmp_8_reg_587 <= buf_0_q1(15 downto 8);
                trunc_ln106_2_reg_577 <= trunc_ln106_2_fu_351_p1;
                trunc_ln106_3_reg_582 <= trunc_ln106_3_fu_355_p1;
                trunc_ln106_6_reg_597 <= trunc_ln106_6_fu_359_p1;
                trunc_ln106_7_reg_602 <= trunc_ln106_7_fu_363_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_6_reg_537 <= buf_0_q1(15 downto 8);
                tmp_7_reg_542 <= buf_0_q0(15 downto 8);
                trunc_ln106_1_reg_532 <= trunc_ln106_1_fu_329_p1;
                trunc_ln106_4_reg_557 <= trunc_ln106_4_fu_333_p1;
                trunc_ln106_5_reg_562 <= trunc_ln106_5_fu_337_p1;
                trunc_ln106_reg_527 <= trunc_ln106_fu_325_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_0_addr_1_reg_502 <= ap_const_lv64_2(2 - 1 downto 0);
    buf_0_addr_2_reg_547 <= ap_const_lv64_1(2 - 1 downto 0);
    buf_0_addr_3_reg_552 <= ap_const_lv64_0(2 - 1 downto 0);
    buf_0_addr_reg_497 <= ap_const_lv64_3(2 - 1 downto 0);

    buf_0_address0_assign_proc : process(ap_CS_fsm_state1, buf_0_addr_1_reg_502, ap_CS_fsm_state2, buf_0_addr_3_reg_552, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_0_address0 <= buf_0_addr_3_reg_552;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_0_address0 <= buf_0_addr_1_reg_502;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_0_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buf_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        else 
            buf_0_address0 <= "XX";
        end if; 
    end process;


    buf_0_address1_assign_proc : process(ap_CS_fsm_state1, buf_0_addr_reg_497, ap_CS_fsm_state2, buf_0_addr_2_reg_547, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_0_address1 <= buf_0_addr_2_reg_547;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_0_address1 <= buf_0_addr_reg_497;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_0_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buf_0_address1 <= ap_const_lv64_3(2 - 1 downto 0);
        else 
            buf_0_address1 <= "XX";
        end if; 
    end process;


    buf_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            buf_0_ce0 <= ap_const_logic_1;
        else 
            buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            buf_0_ce1 <= ap_const_logic_1;
        else 
            buf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_d0_assign_proc : process(ap_CS_fsm_state9, tmp_12_fu_452_p3, ap_CS_fsm_state10, tmp_14_fu_478_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_0_d0 <= tmp_14_fu_478_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_0_d0 <= tmp_12_fu_452_p3;
        else 
            buf_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_0_d1_assign_proc : process(ap_CS_fsm_state9, tmp_11_fu_443_p3, ap_CS_fsm_state10, tmp_13_fu_469_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_0_d1 <= tmp_13_fu_469_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_0_d1 <= tmp_11_fu_443_p3;
        else 
            buf_0_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_0_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            buf_0_we0 <= ap_const_logic_1;
        else 
            buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            buf_0_we1 <= ap_const_logic_1;
        else 
            buf_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_addr_1_reg_492 <= ap_const_lv64_2(2 - 1 downto 0);
    buf_1_addr_2_reg_517 <= ap_const_lv64_1(2 - 1 downto 0);
    buf_1_addr_3_reg_522 <= ap_const_lv64_0(2 - 1 downto 0);
    buf_1_addr_reg_487 <= ap_const_lv64_3(2 - 1 downto 0);

    buf_1_address0_assign_proc : process(ap_CS_fsm_state1, buf_1_addr_1_reg_492, ap_CS_fsm_state2, buf_1_addr_3_reg_522, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_1_address0 <= buf_1_addr_3_reg_522;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_1_address0 <= buf_1_addr_1_reg_492;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_1_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buf_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        else 
            buf_1_address0 <= "XX";
        end if; 
    end process;


    buf_1_address1_assign_proc : process(ap_CS_fsm_state1, buf_1_addr_reg_487, ap_CS_fsm_state2, buf_1_addr_2_reg_517, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_1_address1 <= buf_1_addr_2_reg_517;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_1_address1 <= buf_1_addr_reg_487;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_1_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buf_1_address1 <= ap_const_lv64_3(2 - 1 downto 0);
        else 
            buf_1_address1 <= "XX";
        end if; 
    end process;


    buf_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            buf_1_ce0 <= ap_const_logic_1;
        else 
            buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            buf_1_ce1 <= ap_const_logic_1;
        else 
            buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_1_fu_384_p3, tmp_4_fu_410_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_1_d0 <= tmp_4_fu_410_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_1_d0 <= tmp_1_fu_384_p3;
        else 
            buf_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_1_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_9_fu_375_p3, tmp_5_fu_401_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_1_d1 <= tmp_5_fu_401_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_1_d1 <= tmp_9_fu_375_p3;
        else 
            buf_1_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_1_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            buf_1_we0 <= ap_const_logic_1;
        else 
            buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            buf_1_we1 <= ap_const_logic_1;
        else 
            buf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_259_p4 <= buf_1_q1(15 downto 8);
    grp_fu_269_p4 <= buf_1_q0(15 downto 8);

    sbox_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, zext_ln106_1_fu_320_p1, zext_ln106_3_fu_346_p1, zext_ln106_5_fu_371_p1, zext_ln106_7_fu_397_p1, zext_ln106_9_fu_423_p1, zext_ln106_11_fu_431_p1, zext_ln106_13_fu_439_p1, zext_ln106_15_fu_465_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sbox_address0 <= zext_ln106_15_fu_465_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address0 <= zext_ln106_13_fu_439_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sbox_address0 <= zext_ln106_11_fu_431_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sbox_address0 <= zext_ln106_9_fu_423_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sbox_address0 <= zext_ln106_7_fu_397_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_address0 <= zext_ln106_5_fu_371_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sbox_address0 <= zext_ln106_3_fu_346_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sbox_address0 <= zext_ln106_1_fu_320_p1(8 - 1 downto 0);
        else 
            sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, zext_ln106_fu_315_p1, zext_ln106_2_fu_341_p1, zext_ln106_4_fu_367_p1, zext_ln106_6_fu_393_p1, zext_ln106_8_fu_419_p1, zext_ln106_10_fu_427_p1, zext_ln106_12_fu_435_p1, zext_ln106_14_fu_461_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sbox_address1 <= zext_ln106_14_fu_461_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address1 <= zext_ln106_12_fu_435_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sbox_address1 <= zext_ln106_10_fu_427_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sbox_address1 <= zext_ln106_8_fu_419_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sbox_address1 <= zext_ln106_6_fu_393_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_address1 <= zext_ln106_4_fu_367_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sbox_address1 <= zext_ln106_2_fu_341_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sbox_address1 <= zext_ln106_fu_315_p1(8 - 1 downto 0);
        else 
            sbox_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sbox_ce1 <= ap_const_logic_1;
        else 
            sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_443_p3 <= (reg_299 & sbox_q1);
    tmp_12_fu_452_p3 <= (reg_303 & sbox_q0);
    tmp_13_fu_469_p3 <= (reg_307 & sbox_q1);
    tmp_14_fu_478_p3 <= (reg_311 & sbox_q0);
    tmp_1_fu_384_p3 <= (reg_303 & sbox_q0);
    tmp_4_fu_410_p3 <= (reg_311 & sbox_q0);
    tmp_5_fu_401_p3 <= (reg_307 & sbox_q1);
    tmp_9_fu_375_p3 <= (reg_299 & sbox_q1);
    trunc_ln106_1_fu_329_p1 <= buf_1_q0(8 - 1 downto 0);
    trunc_ln106_2_fu_351_p1 <= buf_1_q1(8 - 1 downto 0);
    trunc_ln106_3_fu_355_p1 <= buf_1_q0(8 - 1 downto 0);
    trunc_ln106_4_fu_333_p1 <= buf_0_q1(8 - 1 downto 0);
    trunc_ln106_5_fu_337_p1 <= buf_0_q0(8 - 1 downto 0);
    trunc_ln106_6_fu_359_p1 <= buf_0_q1(8 - 1 downto 0);
    trunc_ln106_7_fu_363_p1 <= buf_0_q0(8 - 1 downto 0);
    trunc_ln106_fu_325_p1 <= buf_1_q1(8 - 1 downto 0);
    zext_ln106_10_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_587),64));
    zext_ln106_11_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_592),64));
    zext_ln106_12_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_4_reg_557),64));
    zext_ln106_13_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_5_reg_562),64));
    zext_ln106_14_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_6_reg_597),64));
    zext_ln106_15_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_7_reg_602),64));
    zext_ln106_1_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_269_p4),64));
    zext_ln106_2_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_259_p4),64));
    zext_ln106_3_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_269_p4),64));
    zext_ln106_4_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_reg_527),64));
    zext_ln106_5_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_1_reg_532),64));
    zext_ln106_6_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_2_reg_577),64));
    zext_ln106_7_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_3_reg_582),64));
    zext_ln106_8_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_537),64));
    zext_ln106_9_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_542),64));
    zext_ln106_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_259_p4),64));
end behav;
