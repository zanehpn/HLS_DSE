-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_load : IN STD_LOGIC_VECTOR (767 downto 0);
    k_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    k_0_ce0 : OUT STD_LOGIC;
    k_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    k_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    k_0_ce1 : OUT STD_LOGIC;
    k_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    k_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    k_1_ce0 : OUT STD_LOGIC;
    k_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    k_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    k_1_ce1 : OUT STD_LOGIC;
    k_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (767 downto 0);
    p_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv768_lc_1 : STD_LOGIC_VECTOR (767 downto
    constant ap_const_lv768_lc_2 : STD_LOGIC_VECTOR (767 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv512_lc_3 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv513_lc_4 : STD_LOGIC_VECTOR (512 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_206 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000110";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv519_lc_5 : STD_LOGIC_VECTOR (518 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv519_lc_1 : STD_LOGIC_VECTOR (518 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv520_lc_6 : STD_LOGIC_VECTOR (519 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_207 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_192_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_3_reg_702 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_709 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_283_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_reg_733 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln183_2_fu_293_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln183_2_reg_739 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_66_fu_324_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_reg_746 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln183_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln183_9_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_108 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln182_fu_222_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_112 : STD_LOGIC_VECTOR (767 downto 0);
    signal or_ln183_5_fu_670_p3 : STD_LOGIC_VECTOR (767 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln182_fu_200_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln183_2_fu_210_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_98_fu_240_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_247_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln183_2_fu_255_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln183_fu_259_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln183_3_fu_269_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln183_1_fu_273_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_63_fu_283_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_fu_283_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_fu_283_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln183_11_fu_296_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln183_2_fu_300_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln183_13_fu_310_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln183_3_fu_314_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_66_fu_324_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_324_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_324_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln183_cast_fu_344_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln183_5_fu_353_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal zext_ln183_1_fu_363_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal shl_ln183_fu_357_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln183_3_fu_375_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_fu_379_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln183_4_fu_391_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_4_fu_385_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_1_fu_369_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal and_ln183_fu_395_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal zext_ln183_7_cast_fu_417_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_7_fu_426_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_2_fu_430_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln183_6_fu_366_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln183_8_fu_436_p1 : STD_LOGIC_VECTOR (512 downto 0);
    signal xor_ln183_1_fu_446_p2 : STD_LOGIC_VECTOR (512 downto 0);
    signal trunc_ln183_5_fu_407_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_1_fu_401_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_fu_411_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal sext_ln183_fu_452_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal or_ln183_6_fu_460_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln183_6_fu_456_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_3_fu_472_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_3_fu_440_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_2_fu_466_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_93_fu_484_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal or_ln183_7_fu_478_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln_fu_337_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln183_3_fu_512_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln183_3_cast_fu_518_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln183_14_fu_526_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal zext_ln183_4_fu_536_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal shl_ln183_4_fu_530_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln183_9_fu_548_p1 : STD_LOGIC_VECTOR (518 downto 0);
    signal tmp_94_fu_494_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln183_1_fu_504_p3 : STD_LOGIC_VECTOR (767 downto 0);
    signal xor_ln183_2_fu_552_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_95_fu_564_p3 : STD_LOGIC_VECTOR (518 downto 0);
    signal xor_ln183_5_fu_558_p2 : STD_LOGIC_VECTOR (518 downto 0);
    signal shl_ln183_5_fu_542_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal and_ln183_4_fu_572_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal zext_ln183_11_cast_fu_594_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_15_fu_602_p1 : STD_LOGIC_VECTOR (518 downto 0);
    signal shl_ln183_6_fu_606_p2 : STD_LOGIC_VECTOR (518 downto 0);
    signal zext_ln183_10_fu_539_p1 : STD_LOGIC_VECTOR (518 downto 0);
    signal zext_ln183_12_fu_612_p1 : STD_LOGIC_VECTOR (519 downto 0);
    signal xor_ln183_3_fu_622_p2 : STD_LOGIC_VECTOR (519 downto 0);
    signal trunc_ln183_10_fu_584_p1 : STD_LOGIC_VECTOR (518 downto 0);
    signal and_ln183_6_fu_578_p2 : STD_LOGIC_VECTOR (518 downto 0);
    signal or_ln183_4_fu_588_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal sext_ln183_1_fu_628_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal or_ln183_8_fu_636_p2 : STD_LOGIC_VECTOR (518 downto 0);
    signal trunc_ln183_11_fu_632_p1 : STD_LOGIC_VECTOR (518 downto 0);
    signal and_ln183_7_fu_648_p2 : STD_LOGIC_VECTOR (518 downto 0);
    signal shl_ln183_7_fu_616_p2 : STD_LOGIC_VECTOR (518 downto 0);
    signal and_ln183_5_fu_642_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_96_fu_660_p4 : STD_LOGIC_VECTOR (248 downto 0);
    signal or_ln183_9_fu_654_p2 : STD_LOGIC_VECTOR (518 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes256_encrypt_ecb_mux_21_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_encrypt_ecb_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_21_8_1_1_U1 : component aes256_encrypt_ecb_mux_21_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 1,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_63_fu_283_p1,
        din1 => tmp_63_fu_283_p2,
        din2 => tmp_63_fu_283_p3,
        dout => tmp_63_fu_283_p4);

    mux_21_8_1_1_U2 : component aes256_encrypt_ecb_mux_21_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 1,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_66_fu_324_p1,
        din1 => tmp_66_fu_324_p2,
        din2 => tmp_66_fu_324_p3,
        dout => tmp_66_fu_324_p4);

    flow_control_loop_pipe_sequential_init_U : component aes256_encrypt_ecb_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    empty_fu_112 <= ctx_load;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    empty_fu_112 <= or_ln183_5_fu_670_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_fu_192_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_108 <= add_ln182_fu_222_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_108 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                i_3_reg_702 <= ap_sig_allocacmp_i_3;
                tmp_63_reg_733 <= tmp_63_fu_283_p4;
                tmp_66_reg_746 <= tmp_66_fu_324_p4;
                tmp_reg_709 <= ap_sig_allocacmp_i_3(5 downto 5);
                trunc_ln183_2_reg_739 <= trunc_ln183_2_fu_293_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln182_fu_222_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv6_2));
    and_ln183_1_fu_401_p2 <= (xor_ln183_4_fu_385_p2 and trunc_ln183_4_fu_391_p1);
    and_ln183_2_fu_466_p2 <= (sext_ln183_fu_452_p1 and or_ln183_fu_411_p2);
    and_ln183_3_fu_472_p2 <= (trunc_ln183_6_fu_456_p1 and or_ln183_6_fu_460_p2);
    and_ln183_4_fu_572_p2 <= (xor_ln183_2_fu_552_p2 and or_ln183_1_fu_504_p3);
    and_ln183_5_fu_642_p2 <= (sext_ln183_1_fu_628_p1 and or_ln183_4_fu_588_p2);
    and_ln183_6_fu_578_p2 <= (xor_ln183_5_fu_558_p2 and tmp_95_fu_564_p3);
    and_ln183_7_fu_648_p2 <= (trunc_ln183_11_fu_632_p1 and or_ln183_8_fu_636_p2);
    and_ln183_fu_395_p2 <= (xor_ln183_fu_379_p2 and empty_fu_112);
    and_ln_fu_247_p3 <= (tmp_98_fu_240_p3 & ap_const_lv3_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_fu_192_p3)
    begin
        if (((tmp_fu_192_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_108, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_108;
        end if; 
    end process;

    k_0_address0 <= zext_ln183_9_fu_216_p1(3 - 1 downto 0);
    k_0_address1 <= zext_ln183_fu_204_p1(3 - 1 downto 0);

    k_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            k_0_ce0 <= ap_const_logic_1;
        else 
            k_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            k_0_ce1 <= ap_const_logic_1;
        else 
            k_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    k_1_address0 <= zext_ln183_9_fu_216_p1(3 - 1 downto 0);
    k_1_address1 <= zext_ln183_fu_204_p1(3 - 1 downto 0);

    k_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            k_1_ce0 <= ap_const_logic_1;
        else 
            k_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            k_1_ce1 <= ap_const_logic_1;
        else 
            k_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln183_1_fu_273_p2 <= std_logic_vector(shift_right(unsigned(k_1_q1),to_integer(unsigned('0' & zext_ln183_3_fu_269_p1(16-1 downto 0)))));
    lshr_ln183_2_fu_300_p2 <= std_logic_vector(shift_right(unsigned(k_0_q0),to_integer(unsigned('0' & zext_ln183_11_fu_296_p1(16-1 downto 0)))));
    lshr_ln183_3_fu_314_p2 <= std_logic_vector(shift_right(unsigned(k_1_q0),to_integer(unsigned('0' & zext_ln183_13_fu_310_p1(16-1 downto 0)))));
    lshr_ln183_fu_259_p2 <= std_logic_vector(shift_right(unsigned(k_0_q1),to_integer(unsigned('0' & zext_ln183_2_fu_255_p1(16-1 downto 0)))));
    or_ln183_1_fu_504_p3 <= (tmp_93_fu_484_p4 & or_ln183_7_fu_478_p2);
    or_ln183_2_fu_210_p2 <= (trunc_ln182_fu_200_p1 or ap_const_lv3_1);
    or_ln183_3_fu_512_p2 <= (shl_ln_fu_337_p3 or ap_const_lv8_8);
    or_ln183_4_fu_588_p2 <= (shl_ln183_5_fu_542_p2 or and_ln183_4_fu_572_p2);
    or_ln183_5_fu_670_p3 <= (tmp_96_fu_660_p4 & or_ln183_9_fu_654_p2);
    or_ln183_6_fu_460_p2 <= (trunc_ln183_5_fu_407_p1 or and_ln183_1_fu_401_p2);
    or_ln183_7_fu_478_p2 <= (shl_ln183_3_fu_440_p2 or and_ln183_3_fu_472_p2);
    or_ln183_8_fu_636_p2 <= (trunc_ln183_10_fu_584_p1 or and_ln183_6_fu_578_p2);
    or_ln183_9_fu_654_p2 <= (shl_ln183_7_fu_616_p2 or and_ln183_7_fu_648_p2);
    or_ln183_fu_411_p2 <= (shl_ln183_1_fu_369_p2 or and_ln183_fu_395_p2);
    p_out <= empty_fu_112;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_reg_709)
    begin
        if (((tmp_reg_709 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln183_1_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln183_3_fu_622_p2),768));

        sext_ln183_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln183_1_fu_446_p2),768));

    shl_ln183_1_fu_369_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_1_fu_363_p1),to_integer(unsigned('0' & zext_ln183_5_fu_353_p1(31-1 downto 0)))));
    shl_ln183_2_fu_430_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln183_7_fu_426_p1(31-1 downto 0)))));
    shl_ln183_3_fu_440_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_6_fu_366_p1),to_integer(unsigned('0' & zext_ln183_7_fu_426_p1(31-1 downto 0)))));
    shl_ln183_4_fu_530_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv768_lc_1),to_integer(unsigned('0' & zext_ln183_14_fu_526_p1(31-1 downto 0)))));
    shl_ln183_5_fu_542_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_4_fu_536_p1),to_integer(unsigned('0' & zext_ln183_14_fu_526_p1(31-1 downto 0)))));
    shl_ln183_6_fu_606_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv519_lc_1),to_integer(unsigned('0' & zext_ln183_15_fu_602_p1(31-1 downto 0)))));
    shl_ln183_7_fu_616_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_10_fu_539_p1),to_integer(unsigned('0' & zext_ln183_15_fu_602_p1(31-1 downto 0)))));
    shl_ln183_fu_357_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv768_lc_1),to_integer(unsigned('0' & zext_ln183_5_fu_353_p1(31-1 downto 0)))));
    shl_ln_fu_337_p3 <= (trunc_ln183_2_reg_739 & ap_const_lv3_0);
    tmp_63_fu_283_p1 <= lshr_ln183_fu_259_p2(8 - 1 downto 0);
    tmp_63_fu_283_p2 <= lshr_ln183_1_fu_273_p2(8 - 1 downto 0);
    tmp_63_fu_283_p3 <= i_3_reg_702(4 downto 4);
    tmp_66_fu_324_p1 <= lshr_ln183_2_fu_300_p2(8 - 1 downto 0);
    tmp_66_fu_324_p2 <= lshr_ln183_3_fu_314_p2(8 - 1 downto 0);
    tmp_66_fu_324_p3 <= i_3_reg_702(4 downto 4);
    tmp_93_fu_484_p4 <= and_ln183_2_fu_466_p2(767 downto 512);
    tmp_94_fu_494_p4 <= and_ln183_2_fu_466_p2(518 downto 512);
    tmp_95_fu_564_p3 <= (tmp_94_fu_494_p4 & or_ln183_7_fu_478_p2);
    tmp_96_fu_660_p4 <= and_ln183_5_fu_642_p2(767 downto 519);
    tmp_98_fu_240_p3 <= i_3_reg_702(3 downto 3);
    tmp_fu_192_p3 <= ap_sig_allocacmp_i_3(5 downto 5);
    trunc_ln182_fu_200_p1 <= ap_sig_allocacmp_i_3(3 - 1 downto 0);
    trunc_ln183_10_fu_584_p1 <= shl_ln183_5_fu_542_p2(519 - 1 downto 0);
    trunc_ln183_11_fu_632_p1 <= xor_ln183_3_fu_622_p2(519 - 1 downto 0);
    trunc_ln183_2_fu_293_p1 <= i_3_reg_702(5 - 1 downto 0);
    trunc_ln183_3_fu_375_p1 <= shl_ln183_fu_357_p2(512 - 1 downto 0);
    trunc_ln183_4_fu_391_p1 <= empty_fu_112(512 - 1 downto 0);
    trunc_ln183_5_fu_407_p1 <= shl_ln183_1_fu_369_p2(512 - 1 downto 0);
    trunc_ln183_6_fu_456_p1 <= xor_ln183_1_fu_446_p2(512 - 1 downto 0);
    trunc_ln183_9_fu_548_p1 <= shl_ln183_4_fu_530_p2(519 - 1 downto 0);
    xor_ln183_1_fu_446_p2 <= (zext_ln183_8_fu_436_p1 xor ap_const_lv513_lc_4);
    xor_ln183_2_fu_552_p2 <= (shl_ln183_4_fu_530_p2 xor ap_const_lv768_lc_2);
    xor_ln183_3_fu_622_p2 <= (zext_ln183_12_fu_612_p1 xor ap_const_lv520_lc_6);
    xor_ln183_4_fu_385_p2 <= (trunc_ln183_3_fu_375_p1 xor ap_const_lv512_lc_3);
    xor_ln183_5_fu_558_p2 <= (trunc_ln183_9_fu_548_p1 xor ap_const_lv519_lc_5);
    xor_ln183_fu_379_p2 <= (shl_ln183_fu_357_p2 xor ap_const_lv768_lc_2);
    zext_ln183_10_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_reg_746),519));
    zext_ln183_11_cast_fu_594_p3 <= (ap_const_lv1_1 & or_ln183_3_fu_512_p2);
    zext_ln183_11_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_247_p3),16));
    zext_ln183_12_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln183_6_fu_606_p2),520));
    zext_ln183_13_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_247_p3),16));
    zext_ln183_14_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln183_3_cast_fu_518_p3),768));
    zext_ln183_15_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln183_11_cast_fu_594_p3),519));
    zext_ln183_1_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_reg_733),768));
    zext_ln183_2_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_247_p3),16));
    zext_ln183_3_cast_fu_518_p3 <= (ap_const_lv2_2 & or_ln183_3_fu_512_p2);
    zext_ln183_3_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_247_p3),16));
    zext_ln183_4_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_reg_746),768));
    zext_ln183_5_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln183_cast_fu_344_p4),768));
    zext_ln183_6_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_reg_733),512));
    zext_ln183_7_cast_fu_417_p4 <= ((ap_const_lv1_1 & trunc_ln183_2_reg_739) & ap_const_lv3_0);
    zext_ln183_7_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln183_7_cast_fu_417_p4),512));
    zext_ln183_8_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln183_2_fu_430_p2),513));
    zext_ln183_9_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln183_2_fu_210_p2),64));
    zext_ln183_cast_fu_344_p4 <= ((ap_const_lv2_2 & trunc_ln183_2_reg_739) & ap_const_lv3_0);
    zext_ln183_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln182_fu_200_p1),64));
end behav;
