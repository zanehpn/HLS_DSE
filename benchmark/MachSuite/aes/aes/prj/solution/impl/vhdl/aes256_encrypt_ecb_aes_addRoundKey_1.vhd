-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256_encrypt_ecb_aes_addRoundKey_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_0_ce0 : OUT STD_LOGIC;
    buf_0_we0 : OUT STD_LOGIC;
    buf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_0_ce1 : OUT STD_LOGIC;
    buf_0_we1 : OUT STD_LOGIC;
    buf_0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_1_ce0 : OUT STD_LOGIC;
    buf_1_we0 : OUT STD_LOGIC;
    buf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_1_ce1 : OUT STD_LOGIC;
    buf_1_we1 : OUT STD_LOGIC;
    buf_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read : IN STD_LOGIC_VECTOR (767 downto 0);
    key_idx : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of aes256_encrypt_ecb_aes_addRoundKey_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_70 : STD_LOGIC_VECTOR (7 downto 0) := "01110000";
    constant ap_const_lv8_58 : STD_LOGIC_VECTOR (7 downto 0) := "01011000";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv8_38 : STD_LOGIC_VECTOR (7 downto 0) := "00111000";
    constant ap_const_lv8_30 : STD_LOGIC_VECTOR (7 downto 0) := "00110000";
    constant ap_const_lv8_18 : STD_LOGIC_VECTOR (7 downto 0) := "00011000";
    constant ap_const_lv8_68 : STD_LOGIC_VECTOR (7 downto 0) := "01101000";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv8_48 : STD_LOGIC_VECTOR (7 downto 0) := "01001000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv8_28 : STD_LOGIC_VECTOR (7 downto 0) := "00101000";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_170 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal buf_1_addr_reg_737 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_1_addr_9_reg_742 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_0_addr_reg_747 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_0_addr_9_reg_752 : STD_LOGIC_VECTOR (1 downto 0);
    signal key_idx_read_reg_757 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_1_reg_770 : STD_LOGIC_VECTOR (767 downto 0);
    signal xor_ln114_fu_205_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_reg_783 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_1_fu_241_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_1_reg_788 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_addr_10_reg_793 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_1_addr_11_reg_798 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln114_4_fu_271_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_4_reg_803 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_5_fu_301_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_5_reg_808 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_8_fu_337_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_8_reg_813 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_9_fu_373_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_9_reg_818 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_addr_10_reg_823 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_0_addr_11_reg_828 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln114_12_fu_403_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_12_reg_833 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_2_fu_437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_2_reg_838 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_3_fu_471_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_3_reg_843 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_6_fu_513_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_6_reg_848 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_7_fu_541_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_7_reg_853 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_10_fu_575_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_10_reg_858 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_load_11_reg_863 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln114_11_fu_609_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_11_reg_868 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read : STD_LOGIC_VECTOR (767 downto 0);
    signal ap_port_reg_key_idx : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_477_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_46_fu_484_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_48_fu_658_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_50_fu_665_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_56_fu_615_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_58_fu_650_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_60_fu_700_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_62_fu_729_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln114_fu_175_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_fu_181_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_fu_185_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp3_fu_195_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_fu_191_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_1_fu_211_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_1_fu_217_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_1_fu_221_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_4_fu_231_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_1_fu_227_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_4_fu_247_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_4_fu_253_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_4_fu_257_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln114_5_fu_267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_4_fu_263_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_5_fu_277_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_5_fu_283_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_5_fu_287_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln114_7_fu_297_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_6_fu_293_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_8_fu_307_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_8_fu_313_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_8_fu_317_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_93_fu_327_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_12_fu_323_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_9_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_9_fu_349_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_9_fu_353_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_94_fu_363_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_13_fu_359_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_12_fu_379_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_12_fu_385_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_12_fu_389_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln114_17_fu_399_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_16_fu_395_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_2_fu_409_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_2_fu_414_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_2_fu_418_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_s_fu_427_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_2_fu_423_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_3_fu_443_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_3_fu_448_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_3_fu_452_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_92_fu_461_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_3_fu_457_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_6_fu_491_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_6_fu_496_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_6_fu_500_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln114_9_fu_509_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_8_fu_505_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_7_fu_519_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_7_fu_524_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_7_fu_528_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln114_11_fu_537_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_10_fu_533_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_10_fu_547_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_10_fu_552_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_10_fu_556_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_95_fu_565_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_14_fu_561_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_11_fu_581_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_11_fu_586_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_11_fu_590_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_96_fu_599_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_15_fu_595_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_13_fu_622_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_13_fu_627_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_13_fu_631_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln114_19_fu_640_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_18_fu_636_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_13_fu_644_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln114_14_fu_672_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_14_fu_677_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_14_fu_681_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln114_21_fu_690_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_20_fu_686_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_14_fu_694_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_15_fu_708_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln114_15_fu_711_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln114_23_fu_720_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_22_fu_716_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln114_15_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    reg_170 <= buf_0_q1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    reg_170 <= buf_0_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ap_port_reg_key_idx <= key_idx;
                ap_port_reg_p_read <= p_read;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                buf_0_load_11_reg_863 <= buf_0_q0;
                xor_ln114_10_reg_858 <= xor_ln114_10_fu_575_p2;
                xor_ln114_11_reg_868 <= xor_ln114_11_fu_609_p2;
                xor_ln114_2_reg_838 <= xor_ln114_2_fu_437_p2;
                xor_ln114_3_reg_843 <= xor_ln114_3_fu_471_p2;
                xor_ln114_6_reg_848 <= xor_ln114_6_fu_513_p2;
                xor_ln114_7_reg_853 <= xor_ln114_7_fu_541_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                key_idx_read_reg_757 <= ap_port_reg_key_idx;
                p_read_1_reg_770 <= ap_port_reg_p_read;
                xor_ln114_12_reg_833 <= xor_ln114_12_fu_403_p2;
                xor_ln114_1_reg_788 <= xor_ln114_1_fu_241_p2;
                xor_ln114_4_reg_803 <= xor_ln114_4_fu_271_p2;
                xor_ln114_5_reg_808 <= xor_ln114_5_fu_301_p2;
                xor_ln114_8_reg_813 <= xor_ln114_8_fu_337_p2;
                xor_ln114_9_reg_818 <= xor_ln114_9_fu_373_p2;
                xor_ln114_reg_783 <= xor_ln114_fu_205_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln114_10_fu_547_p2 <= std_logic_vector(unsigned(key_idx_read_reg_757) + unsigned(ap_const_lv8_28));
    add_ln114_11_fu_581_p2 <= std_logic_vector(unsigned(key_idx_read_reg_757) + unsigned(ap_const_lv8_20));
    add_ln114_12_fu_379_p2 <= std_logic_vector(unsigned(ap_port_reg_key_idx) + unsigned(ap_const_lv8_18));
    add_ln114_13_fu_622_p2 <= std_logic_vector(unsigned(key_idx_read_reg_757) + unsigned(ap_const_lv8_10));
    add_ln114_14_fu_672_p2 <= std_logic_vector(unsigned(key_idx_read_reg_757) + unsigned(ap_const_lv8_8));
    add_ln114_1_fu_211_p2 <= std_logic_vector(unsigned(ap_port_reg_key_idx) + unsigned(ap_const_lv8_70));
    add_ln114_2_fu_409_p2 <= std_logic_vector(unsigned(key_idx_read_reg_757) + unsigned(ap_const_lv8_68));
    add_ln114_3_fu_443_p2 <= std_logic_vector(unsigned(key_idx_read_reg_757) + unsigned(ap_const_lv8_60));
    add_ln114_4_fu_247_p2 <= std_logic_vector(unsigned(ap_port_reg_key_idx) + unsigned(ap_const_lv8_58));
    add_ln114_5_fu_277_p2 <= std_logic_vector(unsigned(ap_port_reg_key_idx) + unsigned(ap_const_lv8_50));
    add_ln114_6_fu_491_p2 <= std_logic_vector(unsigned(key_idx_read_reg_757) + unsigned(ap_const_lv8_48));
    add_ln114_7_fu_519_p2 <= std_logic_vector(unsigned(key_idx_read_reg_757) + unsigned(ap_const_lv8_40));
    add_ln114_8_fu_307_p2 <= std_logic_vector(unsigned(ap_port_reg_key_idx) + unsigned(ap_const_lv8_38));
    add_ln114_9_fu_343_p2 <= std_logic_vector(unsigned(ap_port_reg_key_idx) + unsigned(ap_const_lv8_30));
    add_ln114_fu_175_p2 <= std_logic_vector(unsigned(ap_port_reg_key_idx) + unsigned(ap_const_lv8_78));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_ce)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_ce))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_0_addr_10_reg_823 <= ap_const_lv64_1(2 - 1 downto 0);
    buf_0_addr_11_reg_828 <= ap_const_lv64_0(2 - 1 downto 0);
    buf_0_addr_9_reg_752 <= ap_const_lv64_2(2 - 1 downto 0);
    buf_0_addr_reg_747 <= ap_const_lv64_3(2 - 1 downto 0);

    buf_0_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, buf_0_addr_9_reg_752, buf_0_addr_11_reg_828, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_0_address0 <= buf_0_addr_11_reg_828;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_0_address0 <= buf_0_addr_9_reg_752;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_0_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buf_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        else 
            buf_0_address0 <= "XX";
        end if; 
    end process;


    buf_0_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, buf_0_addr_reg_747, buf_0_addr_10_reg_823, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_0_address1 <= buf_0_addr_10_reg_823;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_0_address1 <= buf_0_addr_reg_747;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_0_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buf_0_address1 <= ap_const_lv64_3(2 - 1 downto 0);
        else 
            buf_0_address1 <= "XX";
        end if; 
    end process;


    buf_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            buf_0_ce0 <= ap_const_logic_1;
        else 
            buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            buf_0_ce1 <= ap_const_logic_1;
        else 
            buf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_58_fu_650_p3, tmp_62_fu_729_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_0_d0 <= tmp_62_fu_729_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_0_d0 <= tmp_58_fu_650_p3;
        else 
            buf_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_0_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_56_fu_615_p3, tmp_60_fu_700_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_0_d1 <= tmp_60_fu_700_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_0_d1 <= tmp_56_fu_615_p3;
        else 
            buf_0_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_0_we0_assign_proc : process(ap_ce, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            buf_0_we0 <= ap_const_logic_1;
        else 
            buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_we1_assign_proc : process(ap_ce, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            buf_0_we1 <= ap_const_logic_1;
        else 
            buf_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_addr_10_reg_793 <= ap_const_lv64_1(2 - 1 downto 0);
    buf_1_addr_11_reg_798 <= ap_const_lv64_0(2 - 1 downto 0);
    buf_1_addr_9_reg_742 <= ap_const_lv64_2(2 - 1 downto 0);
    buf_1_addr_reg_737 <= ap_const_lv64_3(2 - 1 downto 0);

    buf_1_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, buf_1_addr_9_reg_742, buf_1_addr_11_reg_798, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_1_address0 <= buf_1_addr_11_reg_798;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_1_address0 <= buf_1_addr_9_reg_742;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_1_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buf_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        else 
            buf_1_address0 <= "XX";
        end if; 
    end process;


    buf_1_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, buf_1_addr_reg_737, buf_1_addr_10_reg_793, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_1_address1 <= buf_1_addr_10_reg_793;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_1_address1 <= buf_1_addr_reg_737;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_1_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buf_1_address1 <= ap_const_lv64_3(2 - 1 downto 0);
        else 
            buf_1_address1 <= "XX";
        end if; 
    end process;


    buf_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            buf_1_ce0 <= ap_const_logic_1;
        else 
            buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            buf_1_ce1 <= ap_const_logic_1;
        else 
            buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_d0_assign_proc : process(ap_CS_fsm_state3, tmp_46_fu_484_p3, ap_CS_fsm_state4, tmp_50_fu_665_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_1_d0 <= tmp_50_fu_665_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_1_d0 <= tmp_46_fu_484_p3;
        else 
            buf_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_1_d1_assign_proc : process(ap_CS_fsm_state3, tmp_44_fu_477_p3, ap_CS_fsm_state4, tmp_48_fu_658_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_1_d1 <= tmp_48_fu_658_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_1_d1 <= tmp_44_fu_477_p3;
        else 
            buf_1_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_1_we0_assign_proc : process(ap_ce, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            buf_1_we0 <= ap_const_logic_1;
        else 
            buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_we1_assign_proc : process(ap_ce, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            buf_1_we1 <= ap_const_logic_1;
        else 
            buf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln114_10_fu_556_p2 <= std_logic_vector(shift_right(unsigned(p_read_1_reg_770),to_integer(unsigned('0' & zext_ln114_10_fu_552_p1(31-1 downto 0)))));
    lshr_ln114_11_fu_590_p2 <= std_logic_vector(shift_right(unsigned(p_read_1_reg_770),to_integer(unsigned('0' & zext_ln114_11_fu_586_p1(31-1 downto 0)))));
    lshr_ln114_12_fu_389_p2 <= std_logic_vector(shift_right(unsigned(ap_port_reg_p_read),to_integer(unsigned('0' & zext_ln114_12_fu_385_p1(31-1 downto 0)))));
    lshr_ln114_13_fu_631_p2 <= std_logic_vector(shift_right(unsigned(p_read_1_reg_770),to_integer(unsigned('0' & zext_ln114_13_fu_627_p1(31-1 downto 0)))));
    lshr_ln114_14_fu_681_p2 <= std_logic_vector(shift_right(unsigned(p_read_1_reg_770),to_integer(unsigned('0' & zext_ln114_14_fu_677_p1(31-1 downto 0)))));
    lshr_ln114_15_fu_711_p2 <= std_logic_vector(shift_right(unsigned(p_read_1_reg_770),to_integer(unsigned('0' & zext_ln114_15_fu_708_p1(31-1 downto 0)))));
    lshr_ln114_1_fu_221_p2 <= std_logic_vector(shift_right(unsigned(ap_port_reg_p_read),to_integer(unsigned('0' & zext_ln114_1_fu_217_p1(31-1 downto 0)))));
    lshr_ln114_2_fu_418_p2 <= std_logic_vector(shift_right(unsigned(p_read_1_reg_770),to_integer(unsigned('0' & zext_ln114_2_fu_414_p1(31-1 downto 0)))));
    lshr_ln114_3_fu_452_p2 <= std_logic_vector(shift_right(unsigned(p_read_1_reg_770),to_integer(unsigned('0' & zext_ln114_3_fu_448_p1(31-1 downto 0)))));
    lshr_ln114_4_fu_257_p2 <= std_logic_vector(shift_right(unsigned(ap_port_reg_p_read),to_integer(unsigned('0' & zext_ln114_4_fu_253_p1(31-1 downto 0)))));
    lshr_ln114_5_fu_287_p2 <= std_logic_vector(shift_right(unsigned(ap_port_reg_p_read),to_integer(unsigned('0' & zext_ln114_5_fu_283_p1(31-1 downto 0)))));
    lshr_ln114_6_fu_500_p2 <= std_logic_vector(shift_right(unsigned(p_read_1_reg_770),to_integer(unsigned('0' & zext_ln114_6_fu_496_p1(31-1 downto 0)))));
    lshr_ln114_7_fu_528_p2 <= std_logic_vector(shift_right(unsigned(p_read_1_reg_770),to_integer(unsigned('0' & zext_ln114_7_fu_524_p1(31-1 downto 0)))));
    lshr_ln114_8_fu_317_p2 <= std_logic_vector(shift_right(unsigned(ap_port_reg_p_read),to_integer(unsigned('0' & zext_ln114_8_fu_313_p1(31-1 downto 0)))));
    lshr_ln114_9_fu_353_p2 <= std_logic_vector(shift_right(unsigned(ap_port_reg_p_read),to_integer(unsigned('0' & zext_ln114_9_fu_349_p1(31-1 downto 0)))));
    lshr_ln114_fu_185_p2 <= std_logic_vector(shift_right(unsigned(ap_port_reg_p_read),to_integer(unsigned('0' & zext_ln114_fu_181_p1(31-1 downto 0)))));
    tmp3_fu_195_p4 <= buf_1_q1(15 downto 8);
    tmp_44_fu_477_p3 <= (xor_ln114_reg_783 & xor_ln114_4_reg_803);
    tmp_46_fu_484_p3 <= (xor_ln114_1_reg_788 & xor_ln114_5_reg_808);
    tmp_48_fu_658_p3 <= (xor_ln114_2_reg_838 & xor_ln114_6_reg_848);
    tmp_4_fu_231_p4 <= buf_1_q0(15 downto 8);
    tmp_50_fu_665_p3 <= (xor_ln114_3_reg_843 & xor_ln114_7_reg_853);
    tmp_56_fu_615_p3 <= (xor_ln114_8_reg_813 & xor_ln114_12_reg_833);
    tmp_58_fu_650_p3 <= (xor_ln114_9_reg_818 & xor_ln114_13_fu_644_p2);
    tmp_60_fu_700_p3 <= (xor_ln114_10_reg_858 & xor_ln114_14_fu_694_p2);
    tmp_62_fu_729_p3 <= (xor_ln114_11_reg_868 & xor_ln114_15_fu_723_p2);
    tmp_92_fu_461_p4 <= buf_1_q0(15 downto 8);
    tmp_93_fu_327_p4 <= buf_0_q1(15 downto 8);
    tmp_94_fu_363_p4 <= buf_0_q0(15 downto 8);
    tmp_95_fu_565_p4 <= buf_0_q1(15 downto 8);
    tmp_96_fu_599_p4 <= buf_0_q0(15 downto 8);
    tmp_s_fu_427_p4 <= buf_1_q1(15 downto 8);
    trunc_ln114_10_fu_533_p1 <= lshr_ln114_7_fu_528_p2(8 - 1 downto 0);
    trunc_ln114_11_fu_537_p1 <= buf_1_q0(8 - 1 downto 0);
    trunc_ln114_12_fu_323_p1 <= lshr_ln114_8_fu_317_p2(8 - 1 downto 0);
    trunc_ln114_13_fu_359_p1 <= lshr_ln114_9_fu_353_p2(8 - 1 downto 0);
    trunc_ln114_14_fu_561_p1 <= lshr_ln114_10_fu_556_p2(8 - 1 downto 0);
    trunc_ln114_15_fu_595_p1 <= lshr_ln114_11_fu_590_p2(8 - 1 downto 0);
    trunc_ln114_16_fu_395_p1 <= lshr_ln114_12_fu_389_p2(8 - 1 downto 0);
    trunc_ln114_17_fu_399_p1 <= buf_0_q1(8 - 1 downto 0);
    trunc_ln114_18_fu_636_p1 <= lshr_ln114_13_fu_631_p2(8 - 1 downto 0);
    trunc_ln114_19_fu_640_p1 <= reg_170(8 - 1 downto 0);
    trunc_ln114_1_fu_227_p1 <= lshr_ln114_1_fu_221_p2(8 - 1 downto 0);
    trunc_ln114_20_fu_686_p1 <= lshr_ln114_14_fu_681_p2(8 - 1 downto 0);
    trunc_ln114_21_fu_690_p1 <= reg_170(8 - 1 downto 0);
    trunc_ln114_22_fu_716_p1 <= lshr_ln114_15_fu_711_p2(8 - 1 downto 0);
    trunc_ln114_23_fu_720_p1 <= buf_0_load_11_reg_863(8 - 1 downto 0);
    trunc_ln114_2_fu_423_p1 <= lshr_ln114_2_fu_418_p2(8 - 1 downto 0);
    trunc_ln114_3_fu_457_p1 <= lshr_ln114_3_fu_452_p2(8 - 1 downto 0);
    trunc_ln114_4_fu_263_p1 <= lshr_ln114_4_fu_257_p2(8 - 1 downto 0);
    trunc_ln114_5_fu_267_p1 <= buf_1_q1(8 - 1 downto 0);
    trunc_ln114_6_fu_293_p1 <= lshr_ln114_5_fu_287_p2(8 - 1 downto 0);
    trunc_ln114_7_fu_297_p1 <= buf_1_q0(8 - 1 downto 0);
    trunc_ln114_8_fu_505_p1 <= lshr_ln114_6_fu_500_p2(8 - 1 downto 0);
    trunc_ln114_9_fu_509_p1 <= buf_1_q1(8 - 1 downto 0);
    trunc_ln114_fu_191_p1 <= lshr_ln114_fu_185_p2(8 - 1 downto 0);
    xor_ln114_10_fu_575_p2 <= (trunc_ln114_14_fu_561_p1 xor tmp_95_fu_565_p4);
    xor_ln114_11_fu_609_p2 <= (trunc_ln114_15_fu_595_p1 xor tmp_96_fu_599_p4);
    xor_ln114_12_fu_403_p2 <= (trunc_ln114_17_fu_399_p1 xor trunc_ln114_16_fu_395_p1);
    xor_ln114_13_fu_644_p2 <= (trunc_ln114_19_fu_640_p1 xor trunc_ln114_18_fu_636_p1);
    xor_ln114_14_fu_694_p2 <= (trunc_ln114_21_fu_690_p1 xor trunc_ln114_20_fu_686_p1);
    xor_ln114_15_fu_723_p2 <= (trunc_ln114_23_fu_720_p1 xor trunc_ln114_22_fu_716_p1);
    xor_ln114_1_fu_241_p2 <= (trunc_ln114_1_fu_227_p1 xor tmp_4_fu_231_p4);
    xor_ln114_2_fu_437_p2 <= (trunc_ln114_2_fu_423_p1 xor tmp_s_fu_427_p4);
    xor_ln114_3_fu_471_p2 <= (trunc_ln114_3_fu_457_p1 xor tmp_92_fu_461_p4);
    xor_ln114_4_fu_271_p2 <= (trunc_ln114_5_fu_267_p1 xor trunc_ln114_4_fu_263_p1);
    xor_ln114_5_fu_301_p2 <= (trunc_ln114_7_fu_297_p1 xor trunc_ln114_6_fu_293_p1);
    xor_ln114_6_fu_513_p2 <= (trunc_ln114_9_fu_509_p1 xor trunc_ln114_8_fu_505_p1);
    xor_ln114_7_fu_541_p2 <= (trunc_ln114_11_fu_537_p1 xor trunc_ln114_10_fu_533_p1);
    xor_ln114_8_fu_337_p2 <= (trunc_ln114_12_fu_323_p1 xor tmp_93_fu_327_p4);
    xor_ln114_9_fu_373_p2 <= (trunc_ln114_13_fu_359_p1 xor tmp_94_fu_363_p4);
    xor_ln114_fu_205_p2 <= (trunc_ln114_fu_191_p1 xor tmp3_fu_195_p4);
    zext_ln114_10_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_10_fu_547_p2),768));
    zext_ln114_11_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_11_fu_581_p2),768));
    zext_ln114_12_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_12_fu_379_p2),768));
    zext_ln114_13_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_13_fu_622_p2),768));
    zext_ln114_14_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_14_fu_672_p2),768));
    zext_ln114_15_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(key_idx_read_reg_757),768));
    zext_ln114_1_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_1_fu_211_p2),768));
    zext_ln114_2_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_2_fu_409_p2),768));
    zext_ln114_3_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_3_fu_443_p2),768));
    zext_ln114_4_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_4_fu_247_p2),768));
    zext_ln114_5_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_5_fu_277_p2),768));
    zext_ln114_6_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_6_fu_491_p2),768));
    zext_ln114_7_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_7_fu_519_p2),768));
    zext_ln114_8_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_8_fu_307_p2),768));
    zext_ln114_9_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_9_fu_343_p2),768));
    zext_ln114_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_fu_175_p2),768));
end behav;
