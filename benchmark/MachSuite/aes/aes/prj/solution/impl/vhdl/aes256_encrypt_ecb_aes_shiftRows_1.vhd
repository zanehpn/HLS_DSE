-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256_encrypt_ecb_aes_shiftRows_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_0_ce0 : OUT STD_LOGIC;
    buf_0_we0 : OUT STD_LOGIC;
    buf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_0_ce1 : OUT STD_LOGIC;
    buf_0_we1 : OUT STD_LOGIC;
    buf_0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_1_ce0 : OUT STD_LOGIC;
    buf_1_we0 : OUT STD_LOGIC;
    buf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buf_1_ce1 : OUT STD_LOGIC;
    buf_1_we1 : OUT STD_LOGIC;
    buf_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of aes256_encrypt_ecb_aes_shiftRows_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal buf_1_addr_4_reg_186 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_0_addr_4_reg_191 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_1_load_4_reg_196 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal buf_0_load_4_reg_201 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_0_addr_5_reg_206 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_1_addr_5_reg_211 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_130_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_16_fu_139_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln131_fu_126_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_102_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_122_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_112_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln133_fu_152_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_148_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                buf_0_load_4_reg_201 <= buf_0_q0;
                buf_1_load_4_reg_196 <= buf_1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_0_addr_4_reg_191 <= ap_const_lv64_2(2 - 1 downto 0);
    buf_0_addr_5_reg_206 <= ap_const_lv64_3(2 - 1 downto 0);

    buf_0_address0_assign_proc : process(ap_CS_fsm_state1, buf_0_addr_4_reg_191, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_0_address0 <= buf_0_addr_4_reg_191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_0_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buf_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        else 
            buf_0_address0 <= "XX";
        end if; 
    end process;


    buf_0_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, buf_0_addr_5_reg_206, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_0_address1 <= buf_0_addr_5_reg_206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_0_address1 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buf_0_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            buf_0_address1 <= "XX";
        end if; 
    end process;


    buf_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            buf_0_ce0 <= ap_const_logic_1;
        else 
            buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            buf_0_ce1 <= ap_const_logic_1;
        else 
            buf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_d0_assign_proc : process(buf_1_load_4_reg_196, ap_CS_fsm_state2, tmp_s_fu_130_p3, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_0_d0 <= buf_1_load_4_reg_196;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_0_d0 <= tmp_s_fu_130_p3;
        else 
            buf_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    buf_0_d1 <= (j_fu_148_p1 & grp_fu_112_p4);

    buf_0_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            buf_0_we0 <= ap_const_logic_1;
        else 
            buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_we1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_0_we1 <= ap_const_logic_1;
        else 
            buf_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_addr_4_reg_186 <= ap_const_lv64_2(2 - 1 downto 0);
    buf_1_addr_5_reg_211 <= ap_const_lv64_3(2 - 1 downto 0);

    buf_1_address0_assign_proc : process(ap_CS_fsm_state1, buf_1_addr_4_reg_186, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_1_address0 <= buf_1_addr_4_reg_186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_1_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buf_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        else 
            buf_1_address0 <= "XX";
        end if; 
    end process;


    buf_1_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, buf_1_addr_5_reg_211, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_1_address1 <= buf_1_addr_5_reg_211;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_1_address1 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buf_1_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            buf_1_address1 <= "XX";
        end if; 
    end process;


    buf_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            buf_1_ce0 <= ap_const_logic_1;
        else 
            buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            buf_1_ce1 <= ap_const_logic_1;
        else 
            buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_d0_assign_proc : process(ap_CS_fsm_state2, buf_0_load_4_reg_201, ap_CS_fsm_state3, tmp_16_fu_139_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_1_d0 <= buf_0_load_4_reg_201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_1_d0 <= tmp_16_fu_139_p3;
        else 
            buf_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    buf_1_d1 <= (trunc_ln133_fu_152_p1 & grp_fu_102_p4);

    buf_1_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            buf_1_we0 <= ap_const_logic_1;
        else 
            buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_we1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_1_we1 <= ap_const_logic_1;
        else 
            buf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_102_p4 <= buf_0_q1(15 downto 8);
    grp_fu_112_p4 <= buf_1_q1(15 downto 8);
    i_fu_122_p1 <= buf_0_q1(8 - 1 downto 0);
    j_fu_148_p1 <= buf_0_q1(8 - 1 downto 0);
    tmp_16_fu_139_p3 <= (i_fu_122_p1 & grp_fu_112_p4);
    tmp_s_fu_130_p3 <= (trunc_ln131_fu_126_p1 & grp_fu_102_p4);
    trunc_ln131_fu_126_p1 <= buf_1_q1(8 - 1 downto 0);
    trunc_ln133_fu_152_p1 <= buf_1_q1(8 - 1 downto 0);
end behav;
