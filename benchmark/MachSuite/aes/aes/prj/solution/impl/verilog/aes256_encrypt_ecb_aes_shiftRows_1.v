// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes256_encrypt_ecb_aes_shiftRows_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_0_address0,
        buf_0_ce0,
        buf_0_we0,
        buf_0_d0,
        buf_0_q0,
        buf_0_address1,
        buf_0_ce1,
        buf_0_we1,
        buf_0_d1,
        buf_0_q1,
        buf_1_address0,
        buf_1_ce0,
        buf_1_we0,
        buf_1_d0,
        buf_1_q0,
        buf_1_address1,
        buf_1_ce1,
        buf_1_we1,
        buf_1_d1,
        buf_1_q1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] buf_0_address0;
output   buf_0_ce0;
output   buf_0_we0;
output  [15:0] buf_0_d0;
input  [15:0] buf_0_q0;
output  [1:0] buf_0_address1;
output   buf_0_ce1;
output   buf_0_we1;
output  [15:0] buf_0_d1;
input  [15:0] buf_0_q1;
output  [1:0] buf_1_address0;
output   buf_1_ce0;
output   buf_1_we0;
output  [15:0] buf_1_d0;
input  [15:0] buf_1_q0;
output  [1:0] buf_1_address1;
output   buf_1_ce1;
output   buf_1_we1;
output  [15:0] buf_1_d1;
input  [15:0] buf_1_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] buf_0_address0;
reg buf_0_ce0;
reg buf_0_we0;
reg[15:0] buf_0_d0;
reg[1:0] buf_0_address1;
reg buf_0_ce1;
reg buf_0_we1;
reg[1:0] buf_1_address0;
reg buf_1_ce0;
reg buf_1_we0;
reg[15:0] buf_1_d0;
reg[1:0] buf_1_address1;
reg buf_1_ce1;
reg buf_1_we1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] buf_1_addr_4_reg_186;
wire   [1:0] buf_0_addr_4_reg_191;
reg   [15:0] buf_1_load_4_reg_196;
wire    ap_CS_fsm_state2;
reg   [15:0] buf_0_load_4_reg_201;
wire   [1:0] buf_0_addr_5_reg_206;
wire   [1:0] buf_1_addr_5_reg_211;
wire   [15:0] tmp_s_fu_130_p3;
wire    ap_CS_fsm_state3;
wire   [15:0] tmp_16_fu_139_p3;
wire   [7:0] trunc_ln131_fu_126_p1;
wire   [7:0] grp_fu_102_p4;
wire   [7:0] i_fu_122_p1;
wire   [7:0] grp_fu_112_p4;
wire   [7:0] trunc_ln133_fu_152_p1;
wire   [7:0] j_fu_148_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_0_load_4_reg_201 <= buf_0_q0;
        buf_1_load_4_reg_196 <= buf_1_q0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_0_address0 = buf_0_addr_4_reg_191;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_0_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_0_address0 = 64'd2;
    end else begin
        buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_0_address1 = buf_0_addr_5_reg_206;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_0_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_0_address1 = 64'd1;
    end else begin
        buf_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        buf_0_ce0 = 1'b1;
    end else begin
        buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        buf_0_ce1 = 1'b1;
    end else begin
        buf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_0_d0 = buf_1_load_4_reg_196;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_0_d0 = tmp_s_fu_130_p3;
    end else begin
        buf_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        buf_0_we0 = 1'b1;
    end else begin
        buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_0_we1 = 1'b1;
    end else begin
        buf_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_1_address0 = buf_1_addr_4_reg_186;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_1_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_1_address0 = 64'd2;
    end else begin
        buf_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_1_address1 = buf_1_addr_5_reg_211;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_1_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_1_address1 = 64'd1;
    end else begin
        buf_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        buf_1_ce0 = 1'b1;
    end else begin
        buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        buf_1_ce1 = 1'b1;
    end else begin
        buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_1_d0 = buf_0_load_4_reg_201;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_1_d0 = tmp_16_fu_139_p3;
    end else begin
        buf_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        buf_1_we0 = 1'b1;
    end else begin
        buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_1_we1 = 1'b1;
    end else begin
        buf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign buf_0_addr_4_reg_191 = 64'd2;

assign buf_0_addr_5_reg_206 = 64'd3;

assign buf_0_d1 = {{j_fu_148_p1}, {grp_fu_112_p4}};

assign buf_1_addr_4_reg_186 = 64'd2;

assign buf_1_addr_5_reg_211 = 64'd3;

assign buf_1_d1 = {{trunc_ln133_fu_152_p1}, {grp_fu_102_p4}};

assign grp_fu_102_p4 = {{buf_0_q1[15:8]}};

assign grp_fu_112_p4 = {{buf_1_q1[15:8]}};

assign i_fu_122_p1 = buf_0_q1[7:0];

assign j_fu_148_p1 = buf_0_q1[7:0];

assign tmp_16_fu_139_p3 = {{i_fu_122_p1}, {grp_fu_112_p4}};

assign tmp_s_fu_130_p3 = {{trunc_ln131_fu_126_p1}, {grp_fu_102_p4}};

assign trunc_ln131_fu_126_p1 = buf_1_q1[7:0];

assign trunc_ln133_fu_152_p1 = buf_1_q1[7:0];

endmodule //aes256_encrypt_ecb_aes_shiftRows_1
