// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes256_encrypt_ecb_aes_addRoundKey_cpy_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_0_address0,
        buf_0_ce0,
        buf_0_we0,
        buf_0_d0,
        buf_0_address1,
        buf_0_ce1,
        buf_0_q1,
        buf_1_address0,
        buf_1_ce0,
        buf_1_we0,
        buf_1_d0,
        buf_1_address1,
        buf_1_ce1,
        buf_1_q1,
        ctx_read,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] buf_0_address0;
output   buf_0_ce0;
output   buf_0_we0;
output  [15:0] buf_0_d0;
output  [1:0] buf_0_address1;
output   buf_0_ce1;
input  [15:0] buf_0_q1;
output  [1:0] buf_1_address0;
output   buf_1_ce0;
output   buf_1_we0;
output  [15:0] buf_1_d0;
output  [1:0] buf_1_address1;
output   buf_1_ce1;
input  [15:0] buf_1_q1;
input  [767:0] ctx_read;
output  [767:0] ap_return;

reg ap_idle;
reg buf_0_ce0;
reg buf_0_we0;
reg buf_0_ce1;
reg buf_1_ce0;
reg buf_1_we0;
reg buf_1_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln122_fu_418_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] trunc_ln122_fu_188_p1;
reg   [7:0] trunc_ln122_reg_558;
reg   [0:0] tmp_reg_563;
reg   [0:0] tmp_93_reg_568;
reg   [1:0] buf_0_addr_reg_573;
reg   [1:0] buf_1_addr_reg_579;
wire   [767:0] or_ln122_1_fu_404_p3;
reg   [767:0] or_ln122_1_reg_585;
reg   [0:0] icmp_ln122_reg_590;
wire   [63:0] zext_ln122_4_fu_296_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_fu_92;
wire   [3:0] add_ln122_fu_412_p2;
wire    ap_loop_init;
reg   [767:0] phi_ln122_fu_96;
reg   [767:0] ap_sig_allocacmp_phi_ln122_load;
wire   [8:0] zext_ln122_cast_fu_168_p4;
wire   [767:0] zext_ln122_fu_178_p1;
wire   [767:0] lshr_ln122_fu_182_p2;
wire   [6:0] shl_ln_fu_160_p3;
wire   [127:0] zext_ln122_1_fu_192_p1;
wire   [127:0] shl_ln122_fu_196_p2;
wire   [127:0] zext_ln122_3_fu_206_p1;
wire   [128:0] zext_ln122_2_fu_202_p1;
wire  signed [128:0] xor_ln122_fu_216_p2;
wire  signed [767:0] sext_ln122_fu_222_p1;
wire   [127:0] trunc_ln122_2_fu_230_p1;
wire   [127:0] trunc_ln122_1_fu_226_p1;
wire   [127:0] and_ln122_2_fu_240_p2;
wire   [127:0] shl_ln122_1_fu_210_p2;
wire   [767:0] and_ln122_fu_234_p2;
wire   [639:0] tmp_s_fu_252_p4;
wire   [127:0] or_ln122_fu_246_p2;
wire   [1:0] empty_fu_156_p1;
wire  signed [7:0] zext_ln122_7_cast_fu_302_p4;
wire  signed [8:0] sext_ln122_2_fu_312_p1;
wire   [767:0] or_ln_fu_272_p3;
wire   [767:0] zext_ln122_12_fu_316_p1;
wire   [767:0] lshr_ln122_2_fu_320_p2;
wire   [255:0] zext_ln122_13_fu_330_p1;
wire   [255:0] shl_ln122_2_fu_334_p2;
wire   [7:0] trunc_ln122_6_fu_326_p1;
wire   [255:0] zext_ln122_9_fu_344_p1;
wire   [256:0] zext_ln122_8_fu_340_p1;
wire  signed [256:0] xor_ln122_2_fu_354_p2;
wire   [127:0] trunc_ln122_5_fu_262_p4;
wire  signed [767:0] sext_ln122_1_fu_360_p1;
wire   [255:0] tmp_90_fu_368_p3;
wire   [255:0] trunc_ln122_7_fu_364_p1;
wire   [255:0] and_ln122_4_fu_382_p2;
wire   [255:0] shl_ln122_3_fu_348_p2;
wire   [767:0] and_ln122_3_fu_376_p2;
wire   [511:0] tmp_91_fu_394_p4;
wire   [255:0] or_ln122_3_fu_388_p2;
wire   [3:0] and_ln122_1_fu_429_p3;
wire   [15:0] zext_ln122_5_fu_436_p1;
wire   [15:0] lshr_ln122_1_fu_440_p2;
wire   [15:0] zext_ln122_6_fu_450_p1;
wire   [15:0] lshr_ln122_3_fu_454_p2;
wire   [7:0] tmp_38_fu_464_p1;
wire   [7:0] tmp_38_fu_464_p2;
wire   [7:0] tmp_38_fu_464_p4;
wire   [15:0] zext_ln122_7_fu_478_p1;
wire   [15:0] shl_ln122_4_fu_482_p2;
wire   [15:0] xor_ln122_3_fu_488_p2;
wire   [7:0] xor_ln122_1_fu_473_p2;
wire   [15:0] zext_ln122_11_fu_500_p1;
wire   [15:0] and_ln122_6_fu_494_p2;
wire   [15:0] shl_ln122_6_fu_504_p2;
wire   [15:0] zext_ln122_10_fu_523_p1;
wire   [15:0] and_ln122_5_fu_517_p2;
wire   [15:0] shl_ln122_5_fu_527_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

aes256_encrypt_ecb_mux_21_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 8 ))
mux_21_8_1_1_U15(
    .din0(tmp_38_fu_464_p1),
    .din1(tmp_38_fu_464_p2),
    .din2(tmp_reg_563),
    .dout(tmp_38_fu_464_p4)
);

aes256_encrypt_ecb_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_92 <= 4'd15;
        end else if (((icmp_ln122_fu_418_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_92 <= add_ln122_fu_412_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            phi_ln122_fu_96 <= ctx_read;
        end else if (((icmp_ln122_reg_590 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            phi_ln122_fu_96 <= or_ln122_1_reg_585;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_0_addr_reg_573 <= zext_ln122_4_fu_296_p1;
        buf_1_addr_reg_579 <= zext_ln122_4_fu_296_p1;
        icmp_ln122_reg_590 <= icmp_ln122_fu_418_p2;
        or_ln122_1_reg_585 <= or_ln122_1_fu_404_p3;
        tmp_93_reg_568 <= i_fu_92[32'd2];
        tmp_reg_563 <= i_fu_92[32'd3];
        trunc_ln122_reg_558 <= trunc_ln122_fu_188_p1;
    end
end

always @ (*) begin
    if (((icmp_ln122_fu_418_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln122_reg_590 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_phi_ln122_load = or_ln122_1_reg_585;
    end else begin
        ap_sig_allocacmp_phi_ln122_load = phi_ln122_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_0_ce0 = 1'b1;
    end else begin
        buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_0_ce1 = 1'b1;
    end else begin
        buf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_563 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_0_we0 = 1'b1;
    end else begin
        buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_1_ce0 = 1'b1;
    end else begin
        buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_1_ce1 = 1'b1;
    end else begin
        buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_563 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_1_we0 = 1'b1;
    end else begin
        buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln122_fu_412_p2 = ($signed(i_fu_92) + $signed(4'd15));

assign and_ln122_1_fu_429_p3 = {{tmp_93_reg_568}, {3'd0}};

assign and_ln122_2_fu_240_p2 = (trunc_ln122_2_fu_230_p1 & trunc_ln122_1_fu_226_p1);

assign and_ln122_3_fu_376_p2 = (sext_ln122_1_fu_360_p1 & or_ln_fu_272_p3);

assign and_ln122_4_fu_382_p2 = (trunc_ln122_7_fu_364_p1 & tmp_90_fu_368_p3);

assign and_ln122_5_fu_517_p2 = (xor_ln122_3_fu_488_p2 & buf_1_q1);

assign and_ln122_6_fu_494_p2 = (xor_ln122_3_fu_488_p2 & buf_0_q1);

assign and_ln122_fu_234_p2 = (sext_ln122_fu_222_p1 & ap_sig_allocacmp_phi_ln122_load);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_return = or_ln122_1_reg_585;

assign buf_0_address0 = buf_0_addr_reg_573;

assign buf_0_address1 = zext_ln122_4_fu_296_p1;

assign buf_0_d0 = (shl_ln122_6_fu_504_p2 | and_ln122_6_fu_494_p2);

assign buf_1_address0 = buf_1_addr_reg_579;

assign buf_1_address1 = zext_ln122_4_fu_296_p1;

assign buf_1_d0 = (shl_ln122_5_fu_527_p2 | and_ln122_5_fu_517_p2);

assign empty_fu_156_p1 = i_fu_92[1:0];

assign icmp_ln122_fu_418_p2 = ((i_fu_92 == 4'd0) ? 1'b1 : 1'b0);

assign lshr_ln122_1_fu_440_p2 = buf_0_q1 >> zext_ln122_5_fu_436_p1;

assign lshr_ln122_2_fu_320_p2 = or_ln_fu_272_p3 >> zext_ln122_12_fu_316_p1;

assign lshr_ln122_3_fu_454_p2 = buf_1_q1 >> zext_ln122_6_fu_450_p1;

assign lshr_ln122_fu_182_p2 = ap_sig_allocacmp_phi_ln122_load >> zext_ln122_fu_178_p1;

assign or_ln122_1_fu_404_p3 = {{tmp_91_fu_394_p4}, {or_ln122_3_fu_388_p2}};

assign or_ln122_3_fu_388_p2 = (shl_ln122_3_fu_348_p2 | and_ln122_4_fu_382_p2);

assign or_ln122_fu_246_p2 = (shl_ln122_1_fu_210_p2 | and_ln122_2_fu_240_p2);

assign or_ln_fu_272_p3 = {{tmp_s_fu_252_p4}, {or_ln122_fu_246_p2}};

assign sext_ln122_1_fu_360_p1 = xor_ln122_2_fu_354_p2;

assign sext_ln122_2_fu_312_p1 = zext_ln122_7_cast_fu_302_p4;

assign sext_ln122_fu_222_p1 = xor_ln122_fu_216_p2;

assign shl_ln122_1_fu_210_p2 = zext_ln122_3_fu_206_p1 << zext_ln122_1_fu_192_p1;

assign shl_ln122_2_fu_334_p2 = 256'd255 << zext_ln122_13_fu_330_p1;

assign shl_ln122_3_fu_348_p2 = zext_ln122_9_fu_344_p1 << zext_ln122_13_fu_330_p1;

assign shl_ln122_4_fu_482_p2 = 16'd255 << zext_ln122_7_fu_478_p1;

assign shl_ln122_5_fu_527_p2 = zext_ln122_10_fu_523_p1 << zext_ln122_7_fu_478_p1;

assign shl_ln122_6_fu_504_p2 = zext_ln122_11_fu_500_p1 << zext_ln122_7_fu_478_p1;

assign shl_ln122_fu_196_p2 = 128'd255 << zext_ln122_1_fu_192_p1;

assign shl_ln_fu_160_p3 = {{i_fu_92}, {3'd0}};

assign tmp_38_fu_464_p1 = lshr_ln122_1_fu_440_p2[7:0];

assign tmp_38_fu_464_p2 = lshr_ln122_3_fu_454_p2[7:0];

assign tmp_90_fu_368_p3 = {{trunc_ln122_5_fu_262_p4}, {or_ln122_fu_246_p2}};

assign tmp_91_fu_394_p4 = {{and_ln122_3_fu_376_p2[767:256]}};

assign tmp_s_fu_252_p4 = {{and_ln122_fu_234_p2[767:128]}};

assign trunc_ln122_1_fu_226_p1 = xor_ln122_fu_216_p2[127:0];

assign trunc_ln122_2_fu_230_p1 = ap_sig_allocacmp_phi_ln122_load[127:0];

assign trunc_ln122_5_fu_262_p4 = {{and_ln122_fu_234_p2[255:128]}};

assign trunc_ln122_6_fu_326_p1 = lshr_ln122_2_fu_320_p2[7:0];

assign trunc_ln122_7_fu_364_p1 = xor_ln122_2_fu_354_p2[255:0];

assign trunc_ln122_fu_188_p1 = lshr_ln122_fu_182_p2[7:0];

assign xor_ln122_1_fu_473_p2 = (trunc_ln122_reg_558 ^ tmp_38_fu_464_p4);

assign xor_ln122_2_fu_354_p2 = (zext_ln122_8_fu_340_p1 ^ 257'd231584178474632390847141970017375815706539969331281128078915168015826259279871);

assign xor_ln122_3_fu_488_p2 = (shl_ln122_4_fu_482_p2 ^ 16'd65535);

assign xor_ln122_fu_216_p2 = (zext_ln122_2_fu_202_p1 ^ 129'd680564733841876926926749214863536422911);

assign zext_ln122_10_fu_523_p1 = xor_ln122_1_fu_473_p2;

assign zext_ln122_11_fu_500_p1 = xor_ln122_1_fu_473_p2;

assign zext_ln122_12_fu_316_p1 = $unsigned(sext_ln122_2_fu_312_p1);

assign zext_ln122_13_fu_330_p1 = $unsigned(zext_ln122_7_cast_fu_302_p4);

assign zext_ln122_1_fu_192_p1 = shl_ln_fu_160_p3;

assign zext_ln122_2_fu_202_p1 = shl_ln122_fu_196_p2;

assign zext_ln122_3_fu_206_p1 = trunc_ln122_fu_188_p1;

assign zext_ln122_4_fu_296_p1 = empty_fu_156_p1;

assign zext_ln122_5_fu_436_p1 = and_ln122_1_fu_429_p3;

assign zext_ln122_6_fu_450_p1 = and_ln122_1_fu_429_p3;

assign zext_ln122_7_cast_fu_302_p4 = {{{{1'd1}, {i_fu_92}}}, {3'd0}};

assign zext_ln122_7_fu_478_p1 = and_ln122_1_fu_429_p3;

assign zext_ln122_8_fu_340_p1 = shl_ln122_2_fu_334_p2;

assign zext_ln122_9_fu_344_p1 = trunc_ln122_6_fu_326_p1;

assign zext_ln122_cast_fu_168_p4 = {{{{2'd2}, {i_fu_92}}}, {3'd0}};

assign zext_ln122_fu_178_p1 = zext_ln122_cast_fu_168_p4;

endmodule //aes256_encrypt_ecb_aes_addRoundKey_cpy_1
