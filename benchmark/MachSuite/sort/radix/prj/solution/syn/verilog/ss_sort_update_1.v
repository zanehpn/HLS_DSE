// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ss_sort_update_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_address0,
        a_0_ce0,
        a_0_we0,
        a_0_d0,
        a_0_q0,
        a_1_address0,
        a_1_ce0,
        a_1_we0,
        a_1_d0,
        a_1_q0,
        bucket_0_address0,
        bucket_0_ce0,
        bucket_0_we0,
        bucket_0_d0,
        bucket_0_q0,
        bucket_1_address0,
        bucket_1_ce0,
        bucket_1_we0,
        bucket_1_d0,
        bucket_1_q0,
        b_03_address0,
        b_03_ce0,
        b_03_q0,
        b_03_address1,
        b_03_ce1,
        b_03_q1,
        b_15_address0,
        b_15_ce0,
        b_15_q0,
        b_15_address1,
        b_15_ce1,
        b_15_q1,
        exp
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] a_0_address0;
output   a_0_ce0;
output   a_0_we0;
output  [63:0] a_0_d0;
input  [63:0] a_0_q0;
output  [8:0] a_1_address0;
output   a_1_ce0;
output   a_1_we0;
output  [63:0] a_1_d0;
input  [63:0] a_1_q0;
output  [8:0] bucket_0_address0;
output   bucket_0_ce0;
output   bucket_0_we0;
output  [63:0] bucket_0_d0;
input  [63:0] bucket_0_q0;
output  [8:0] bucket_1_address0;
output   bucket_1_ce0;
output   bucket_1_we0;
output  [63:0] bucket_1_d0;
input  [63:0] bucket_1_q0;
output  [8:0] b_03_address0;
output   b_03_ce0;
input  [63:0] b_03_q0;
output  [8:0] b_03_address1;
output   b_03_ce1;
input  [63:0] b_03_q1;
output  [8:0] b_15_address0;
output   b_15_ce0;
input  [63:0] b_15_q0;
output  [8:0] b_15_address1;
output   b_15_ce1;
input  [63:0] b_15_q1;
input  [4:0] exp;

reg ap_idle;
reg[8:0] a_0_address0;
reg a_0_ce0;
reg a_0_we0;
reg[63:0] a_0_d0;
reg[8:0] a_1_address0;
reg a_1_ce0;
reg a_1_we0;
reg[63:0] a_1_d0;
reg[8:0] bucket_0_address0;
reg bucket_0_ce0;
reg bucket_0_we0;
reg[63:0] bucket_0_d0;
reg[8:0] bucket_1_address0;
reg bucket_1_ce0;
reg bucket_1_we0;
reg[63:0] bucket_1_d0;
reg b_03_ce0;
reg b_03_ce1;
reg b_15_ce0;
reg b_15_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln68_reg_1043;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
reg   [63:0] reg_236;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_pp0_stage5_11001;
reg   [63:0] reg_240;
wire   [31:0] exp_cast_fu_244_p1;
reg   [31:0] exp_cast_reg_1037;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln68_fu_266_p2;
wire   [2:0] select_ln68_fu_292_p3;
reg   [2:0] select_ln68_reg_1047;
wire   [9:0] select_ln68_1_fu_306_p3;
reg   [9:0] select_ln68_1_reg_1054;
wire   [8:0] empty_20_fu_318_p1;
reg   [8:0] empty_20_reg_1059;
reg   [0:0] tmp_1_reg_1065;
reg   [0:0] tmp_3_reg_1070;
reg   [8:0] bucket_0_addr_reg_1095;
wire    ap_block_pp0_stage1_11001;
reg   [8:0] bucket_1_addr_reg_1100;
wire   [31:0] tmp_2_fu_497_p4;
reg   [31:0] tmp_2_reg_1105;
wire   [31:0] tmp_10_fu_535_p4;
reg   [31:0] tmp_10_reg_1112;
reg   [0:0] tmp_7_reg_1119;
wire   [8:0] trunc_ln72_3_fu_607_p1;
reg   [8:0] trunc_ln72_3_reg_1123;
reg   [0:0] tmp_8_reg_1128;
reg   [0:0] tmp_9_reg_1133;
wire   [31:0] add_ln73_fu_627_p2;
reg   [31:0] add_ln73_reg_1137;
wire   [63:0] zext_ln73_fu_633_p1;
reg   [63:0] zext_ln73_reg_1143;
wire   [63:0] xor_ln73_fu_643_p2;
reg   [63:0] xor_ln73_reg_1149;
reg   [0:0] tmp_11_reg_1155;
wire   [5:0] shl_ln72_2_fu_665_p3;
reg   [5:0] shl_ln72_2_reg_1160;
wire   [63:0] zext_ln73_3_fu_673_p1;
reg   [63:0] zext_ln73_3_reg_1166;
wire   [63:0] xor_ln73_1_fu_683_p2;
reg   [63:0] xor_ln73_1_reg_1172;
reg   [8:0] a_0_addr_reg_1178;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [8:0] a_1_addr_reg_1183;
wire   [8:0] trunc_ln72_7_fu_852_p1;
reg   [8:0] trunc_ln72_7_reg_1188;
reg   [0:0] tmp_13_reg_1193;
reg   [0:0] tmp_14_reg_1198;
wire   [31:0] add_ln73_1_fu_872_p2;
reg   [31:0] add_ln73_1_reg_1202;
reg   [8:0] a_0_addr_1_reg_1208;
reg   [8:0] a_1_addr_1_reg_1213;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln70_2_fu_360_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln70_5_fu_380_p1;
wire   [63:0] zext_ln72_fu_411_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln72_3_fu_689_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln72_6_fu_888_p1;
reg   [2:0] i_fu_100;
wire   [2:0] add_ln69_fu_878_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_load;
reg   [9:0] blockID_fu_104;
reg   [9:0] ap_sig_allocacmp_blockID_load;
reg   [10:0] indvar_flatten_fu_108;
wire   [10:0] add_ln68_fu_272_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [63:0] or_ln73_1_fu_707_p2;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage4;
wire   [63:0] or_ln73_3_fu_906_p2;
wire   [63:0] or_ln73_fu_727_p2;
wire   [63:0] or_ln73_2_fu_926_p2;
wire   [63:0] or_ln72_1_fu_772_p2;
wire   [63:0] or_ln72_3_fu_971_p2;
wire   [63:0] or_ln72_fu_810_p2;
wire   [63:0] or_ln72_2_fu_1009_p2;
wire   [0:0] tmp_fu_284_p3;
wire   [9:0] add_ln68_1_fu_300_p2;
wire   [6:0] trunc_ln70_fu_322_p1;
wire   [8:0] zext_ln70_1_fu_350_p1;
wire   [8:0] trunc_ln70_3_fu_326_p3;
wire   [8:0] add_ln70_1_fu_354_p2;
wire   [1:0] trunc_ln69_fu_314_p1;
wire   [1:0] or_ln70_fu_366_p2;
wire   [8:0] add_ln70_2_cast8_fu_372_p3;
wire   [10:0] zext_ln69_fu_396_p1;
wire   [10:0] tmp_s_fu_399_p3;
wire   [9:0] zext_ln70_fu_430_p1;
wire   [9:0] shl_ln70_fu_406_p2;
wire   [10:0] add_ln70_fu_433_p2;
wire   [9:0] add_ln70_2_fu_439_p2;
wire   [0:0] tmp_6_fu_453_p3;
wire   [5:0] and_ln_fu_461_p3;
wire   [63:0] zext_ln70_3_fu_469_p1;
wire   [63:0] lshr_ln70_fu_473_p2;
wire   [63:0] zext_ln70_4_fu_483_p1;
wire   [63:0] lshr_ln70_1_fu_487_p2;
wire   [31:0] tmp_2_fu_497_p1;
wire   [31:0] tmp_2_fu_497_p2;
wire   [0:0] tmp_2_fu_497_p3;
wire   [5:0] and_ln70_2_fu_423_p3;
wire   [63:0] zext_ln70_6_fu_507_p1;
wire   [63:0] lshr_ln70_2_fu_511_p2;
wire   [63:0] zext_ln70_7_fu_521_p1;
wire   [63:0] lshr_ln70_3_fu_525_p2;
wire   [31:0] tmp_10_fu_535_p1;
wire   [31:0] tmp_10_fu_535_p2;
wire   [1:0] tmp_10_fu_535_p3;
wire    ap_block_pp0_stage2;
wire   [31:0] ashr_ln70_fu_545_p2;
wire   [0:0] trunc_ln72_fu_557_p1;
wire   [5:0] shl_ln_fu_561_p3;
wire   [63:0] zext_ln72_1_fu_569_p1;
wire   [63:0] lshr_ln72_fu_573_p2;
wire   [63:0] zext_ln72_2_fu_583_p1;
wire   [63:0] lshr_ln72_1_fu_587_p2;
wire   [31:0] tmp_5_fu_597_p1;
wire   [31:0] tmp_5_fu_597_p2;
wire   [0:0] tmp_5_fu_597_p3;
wire   [31:0] tmp_5_fu_597_p4;
wire   [63:0] shl_ln73_fu_637_p2;
wire   [31:0] ashr_ln70_1_fu_649_p2;
wire   [0:0] trunc_ln72_4_fu_661_p1;
wire   [63:0] shl_ln73_3_fu_677_p2;
wire   [63:0] zext_ln73_2_fu_699_p1;
wire   [63:0] and_ln73_1_fu_694_p2;
wire   [63:0] shl_ln73_2_fu_702_p2;
wire   [63:0] zext_ln73_1_fu_719_p1;
wire   [63:0] and_ln73_fu_714_p2;
wire   [63:0] shl_ln73_1_fu_722_p2;
wire   [5:0] shl_ln72_1_fu_734_p3;
wire   [63:0] zext_ln72_7_fu_741_p1;
wire   [63:0] shl_ln72_5_fu_745_p2;
wire   [63:0] xor_ln72_1_fu_751_p2;
wire   [63:0] zext_ln72_8_fu_763_p1;
wire   [63:0] and_ln72_1_fu_757_p2;
wire   [63:0] shl_ln72_6_fu_766_p2;
wire   [63:0] zext_ln72_4_fu_779_p1;
wire   [63:0] shl_ln72_fu_783_p2;
wire   [63:0] xor_ln72_fu_789_p2;
wire   [63:0] zext_ln72_5_fu_801_p1;
wire   [63:0] and_ln72_fu_795_p2;
wire   [63:0] shl_ln72_4_fu_804_p2;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln72_9_fu_817_p1;
wire   [63:0] lshr_ln72_2_fu_820_p2;
wire   [63:0] zext_ln72_10_fu_830_p1;
wire   [63:0] lshr_ln72_3_fu_833_p2;
wire   [31:0] tmp_12_fu_843_p1;
wire   [31:0] tmp_12_fu_843_p2;
wire   [31:0] tmp_12_fu_843_p4;
wire   [63:0] zext_ln73_5_fu_898_p1;
wire   [63:0] and_ln73_3_fu_893_p2;
wire   [63:0] shl_ln73_5_fu_901_p2;
wire   [63:0] zext_ln73_4_fu_918_p1;
wire   [63:0] and_ln73_2_fu_913_p2;
wire   [63:0] shl_ln73_4_fu_921_p2;
wire   [5:0] shl_ln72_3_fu_933_p3;
wire   [63:0] zext_ln72_13_fu_940_p1;
wire   [63:0] shl_ln72_9_fu_944_p2;
wire   [63:0] xor_ln72_3_fu_950_p2;
wire   [63:0] zext_ln72_14_fu_962_p1;
wire   [63:0] and_ln72_3_fu_956_p2;
wire   [63:0] shl_ln72_10_fu_965_p2;
wire   [63:0] zext_ln72_11_fu_978_p1;
wire   [63:0] shl_ln72_7_fu_982_p2;
wire   [63:0] xor_ln72_2_fu_988_p2;
wire   [63:0] zext_ln72_12_fu_1000_p1;
wire   [63:0] and_ln72_2_fu_994_p2;
wire   [63:0] shl_ln72_8_fu_1003_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

ss_sort_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U44(
    .din0(tmp_2_fu_497_p1),
    .din1(tmp_2_fu_497_p2),
    .din2(tmp_2_fu_497_p3),
    .dout(tmp_2_fu_497_p4)
);

ss_sort_mux_22_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_22_32_1_1_U45(
    .din0(tmp_10_fu_535_p1),
    .din1(tmp_10_fu_535_p2),
    .din2(tmp_10_fu_535_p3),
    .dout(tmp_10_fu_535_p4)
);

ss_sort_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U46(
    .din0(tmp_5_fu_597_p1),
    .din1(tmp_5_fu_597_p2),
    .din2(tmp_5_fu_597_p3),
    .dout(tmp_5_fu_597_p4)
);

ss_sort_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U47(
    .din0(tmp_12_fu_843_p1),
    .din1(tmp_12_fu_843_p2),
    .din2(tmp_11_reg_1155),
    .dout(tmp_12_fu_843_p4)
);

ss_sort_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln68_fu_266_p2 == 1'd0))) begin
            blockID_fu_104 <= select_ln68_1_fu_306_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            blockID_fu_104 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_100 <= 3'd0;
    end else if (((icmp_ln68_reg_1043 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        i_fu_100 <= add_ln69_fu_878_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln68_fu_266_p2 == 1'd0))) begin
            indvar_flatten_fu_108 <= add_ln68_fu_272_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_108 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_14_reg_1198 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_0_addr_1_reg_1208 <= zext_ln72_6_fu_888_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_reg_1043 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_9_reg_1133 == 1'd0))) begin
        a_0_addr_reg_1178 <= zext_ln72_3_fu_689_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_14_reg_1198 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_1_addr_1_reg_1213 <= zext_ln72_6_fu_888_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_reg_1043 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_9_reg_1133 == 1'd1))) begin
        a_1_addr_reg_1183 <= zext_ln72_3_fu_689_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_reg_1043 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_ln73_1_reg_1202 <= add_ln73_1_fu_872_p2;
        tmp_13_reg_1193 <= tmp_12_fu_843_p4[32'd9];
        tmp_14_reg_1198 <= tmp_12_fu_843_p4[32'd10];
        trunc_ln72_7_reg_1188 <= trunc_ln72_7_fu_852_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_reg_1043 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln73_reg_1137 <= add_ln73_fu_627_p2;
        shl_ln72_2_reg_1160[5] <= shl_ln72_2_fu_665_p3[5];
        tmp_11_reg_1155 <= ashr_ln70_1_fu_649_p2[32'd1];
        tmp_7_reg_1119 <= ashr_ln70_fu_545_p2[32'd1];
        tmp_8_reg_1128 <= tmp_5_fu_597_p4[32'd9];
        tmp_9_reg_1133 <= tmp_5_fu_597_p4[32'd10];
        trunc_ln72_3_reg_1123 <= trunc_ln72_3_fu_607_p1;
        xor_ln73_1_reg_1172 <= xor_ln73_1_fu_683_p2;
        xor_ln73_reg_1149 <= xor_ln73_fu_643_p2;
        zext_ln73_3_reg_1166[5] <= zext_ln73_3_fu_673_p1[5];
        zext_ln73_reg_1143[5] <= zext_ln73_fu_633_p1[5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_reg_1043 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bucket_0_addr_reg_1095 <= zext_ln72_fu_411_p1;
        bucket_1_addr_reg_1100 <= zext_ln72_fu_411_p1;
        tmp_10_reg_1112 <= tmp_10_fu_535_p4;
        tmp_2_reg_1105 <= tmp_2_fu_497_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln68_fu_266_p2 == 1'd0))) begin
        empty_20_reg_1059 <= empty_20_fu_318_p1;
        select_ln68_1_reg_1054 <= select_ln68_1_fu_306_p3;
        select_ln68_reg_1047 <= select_ln68_fu_292_p3;
        tmp_1_reg_1065 <= select_ln68_1_fu_306_p3[32'd8];
        tmp_3_reg_1070 <= select_ln68_1_fu_306_p3[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_cast_reg_1037[4 : 0] <= exp_cast_fu_244_p1[4 : 0];
        icmp_ln68_reg_1043 <= icmp_ln68_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln68_reg_1043 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln68_reg_1043 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_236 <= bucket_0_q0;
        reg_240 <= bucket_1_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_0_address0 = a_0_addr_1_reg_1208;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_0_address0 = zext_ln72_6_fu_888_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        a_0_address0 = a_0_addr_reg_1178;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        a_0_address0 = zext_ln72_3_fu_689_p1;
    end else begin
        a_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        a_0_ce0 = 1'b1;
    end else begin
        a_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_0_d0 = or_ln72_3_fu_971_p2;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        a_0_d0 = or_ln72_1_fu_772_p2;
    end else begin
        a_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_14_reg_1198 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln68_reg_1043 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_9_reg_1133 == 1'd0)))) begin
        a_0_we0 = 1'b1;
    end else begin
        a_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_1_address0 = a_1_addr_1_reg_1213;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_1_address0 = zext_ln72_6_fu_888_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        a_1_address0 = a_1_addr_reg_1183;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        a_1_address0 = zext_ln72_3_fu_689_p1;
    end else begin
        a_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        a_1_ce0 = 1'b1;
    end else begin
        a_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_1_d0 = or_ln72_2_fu_1009_p2;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        a_1_d0 = or_ln72_fu_810_p2;
    end else begin
        a_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_14_reg_1198 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln68_reg_1043 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_9_reg_1133 == 1'd1)))) begin
        a_1_we0 = 1'b1;
    end else begin
        a_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_1043 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_blockID_load = 10'd0;
    end else begin
        ap_sig_allocacmp_blockID_load = blockID_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 3'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_108;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_03_ce0 = 1'b1;
    end else begin
        b_03_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_03_ce1 = 1'b1;
    end else begin
        b_03_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_15_ce0 = 1'b1;
    end else begin
        b_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_15_ce1 = 1'b1;
    end else begin
        b_15_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        bucket_0_address0 = bucket_0_addr_reg_1095;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bucket_0_address0 = zext_ln72_fu_411_p1;
    end else begin
        bucket_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        bucket_0_ce0 = 1'b1;
    end else begin
        bucket_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bucket_0_d0 = or_ln73_3_fu_906_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        bucket_0_d0 = or_ln73_1_fu_707_p2;
    end else begin
        bucket_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_11_reg_1155 == 1'd0)) | ((icmp_ln68_reg_1043 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_7_reg_1119 == 1'd0)))) begin
        bucket_0_we0 = 1'b1;
    end else begin
        bucket_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        bucket_1_address0 = bucket_1_addr_reg_1100;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bucket_1_address0 = zext_ln72_fu_411_p1;
    end else begin
        bucket_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        bucket_1_ce0 = 1'b1;
    end else begin
        bucket_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bucket_1_d0 = or_ln73_2_fu_926_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        bucket_1_d0 = or_ln73_fu_727_p2;
    end else begin
        bucket_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_11_reg_1155 == 1'd1)) | ((icmp_ln68_reg_1043 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_7_reg_1119 == 1'd1)))) begin
        bucket_1_we0 = 1'b1;
    end else begin
        bucket_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln68_1_fu_300_p2 = (ap_sig_allocacmp_blockID_load + 10'd1);

assign add_ln68_fu_272_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln69_fu_878_p2 = (select_ln68_reg_1047 + 3'd2);

assign add_ln70_1_fu_354_p2 = (zext_ln70_1_fu_350_p1 + trunc_ln70_3_fu_326_p3);

assign add_ln70_2_cast8_fu_372_p3 = {{trunc_ln70_fu_322_p1}, {or_ln70_fu_366_p2}};

assign add_ln70_2_fu_439_p2 = (zext_ln70_fu_430_p1 + shl_ln70_fu_406_p2);

assign add_ln70_fu_433_p2 = (zext_ln69_fu_396_p1 + tmp_s_fu_399_p3);

assign add_ln73_1_fu_872_p2 = (tmp_12_fu_843_p4 + 32'd1);

assign add_ln73_fu_627_p2 = (tmp_5_fu_597_p4 + 32'd1);

assign and_ln70_2_fu_423_p3 = {{tmp_3_reg_1070}, {5'd0}};

assign and_ln72_1_fu_757_p2 = (xor_ln72_1_fu_751_p2 & a_0_q0);

assign and_ln72_2_fu_994_p2 = (xor_ln72_2_fu_988_p2 & a_1_q0);

assign and_ln72_3_fu_956_p2 = (xor_ln72_3_fu_950_p2 & a_0_q0);

assign and_ln72_fu_795_p2 = (xor_ln72_fu_789_p2 & a_1_q0);

assign and_ln73_1_fu_694_p2 = (xor_ln73_reg_1149 & reg_236);

assign and_ln73_2_fu_913_p2 = (xor_ln73_1_reg_1172 & reg_240);

assign and_ln73_3_fu_893_p2 = (xor_ln73_1_reg_1172 & reg_236);

assign and_ln73_fu_714_p2 = (xor_ln73_reg_1149 & reg_240);

assign and_ln_fu_461_p3 = {{tmp_6_fu_453_p3}, {5'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ashr_ln70_1_fu_649_p2 = $signed(tmp_10_reg_1112) >>> exp_cast_reg_1037;

assign ashr_ln70_fu_545_p2 = $signed(tmp_2_reg_1105) >>> exp_cast_reg_1037;

assign b_03_address0 = zext_ln70_5_fu_380_p1;

assign b_03_address1 = zext_ln70_2_fu_360_p1;

assign b_15_address0 = zext_ln70_5_fu_380_p1;

assign b_15_address1 = zext_ln70_2_fu_360_p1;

assign empty_20_fu_318_p1 = select_ln68_1_fu_306_p3[8:0];

assign exp_cast_fu_244_p1 = exp;

assign icmp_ln68_fu_266_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1024) ? 1'b1 : 1'b0);

assign lshr_ln70_1_fu_487_p2 = b_15_q1 >> zext_ln70_4_fu_483_p1;

assign lshr_ln70_2_fu_511_p2 = b_03_q0 >> zext_ln70_6_fu_507_p1;

assign lshr_ln70_3_fu_525_p2 = b_15_q0 >> zext_ln70_7_fu_521_p1;

assign lshr_ln70_fu_473_p2 = b_03_q1 >> zext_ln70_3_fu_469_p1;

assign lshr_ln72_1_fu_587_p2 = bucket_1_q0 >> zext_ln72_2_fu_583_p1;

assign lshr_ln72_2_fu_820_p2 = bucket_0_q0 >> zext_ln72_9_fu_817_p1;

assign lshr_ln72_3_fu_833_p2 = bucket_1_q0 >> zext_ln72_10_fu_830_p1;

assign lshr_ln72_fu_573_p2 = bucket_0_q0 >> zext_ln72_1_fu_569_p1;

assign or_ln70_fu_366_p2 = (trunc_ln69_fu_314_p1 | 2'd1);

assign or_ln72_1_fu_772_p2 = (shl_ln72_6_fu_766_p2 | and_ln72_1_fu_757_p2);

assign or_ln72_2_fu_1009_p2 = (shl_ln72_8_fu_1003_p2 | and_ln72_2_fu_994_p2);

assign or_ln72_3_fu_971_p2 = (shl_ln72_10_fu_965_p2 | and_ln72_3_fu_956_p2);

assign or_ln72_fu_810_p2 = (shl_ln72_4_fu_804_p2 | and_ln72_fu_795_p2);

assign or_ln73_1_fu_707_p2 = (shl_ln73_2_fu_702_p2 | and_ln73_1_fu_694_p2);

assign or_ln73_2_fu_926_p2 = (shl_ln73_4_fu_921_p2 | and_ln73_2_fu_913_p2);

assign or_ln73_3_fu_906_p2 = (shl_ln73_5_fu_901_p2 | and_ln73_3_fu_893_p2);

assign or_ln73_fu_727_p2 = (shl_ln73_1_fu_722_p2 | and_ln73_fu_714_p2);

assign select_ln68_1_fu_306_p3 = ((tmp_fu_284_p3[0:0] == 1'b1) ? add_ln68_1_fu_300_p2 : ap_sig_allocacmp_blockID_load);

assign select_ln68_fu_292_p3 = ((tmp_fu_284_p3[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_i_load);

assign shl_ln70_fu_406_p2 = select_ln68_1_reg_1054 << 10'd2;

assign shl_ln72_10_fu_965_p2 = zext_ln72_14_fu_962_p1 << zext_ln72_13_fu_940_p1;

assign shl_ln72_1_fu_734_p3 = {{tmp_8_reg_1128}, {5'd0}};

assign shl_ln72_2_fu_665_p3 = {{trunc_ln72_4_fu_661_p1}, {5'd0}};

assign shl_ln72_3_fu_933_p3 = {{tmp_13_reg_1193}, {5'd0}};

assign shl_ln72_4_fu_804_p2 = zext_ln72_5_fu_801_p1 << zext_ln72_4_fu_779_p1;

assign shl_ln72_5_fu_745_p2 = 64'd4294967295 << zext_ln72_7_fu_741_p1;

assign shl_ln72_6_fu_766_p2 = zext_ln72_8_fu_763_p1 << zext_ln72_7_fu_741_p1;

assign shl_ln72_7_fu_982_p2 = 64'd4294967295 << zext_ln72_11_fu_978_p1;

assign shl_ln72_8_fu_1003_p2 = zext_ln72_12_fu_1000_p1 << zext_ln72_11_fu_978_p1;

assign shl_ln72_9_fu_944_p2 = 64'd4294967295 << zext_ln72_13_fu_940_p1;

assign shl_ln72_fu_783_p2 = 64'd4294967295 << zext_ln72_4_fu_779_p1;

assign shl_ln73_1_fu_722_p2 = zext_ln73_1_fu_719_p1 << zext_ln73_reg_1143;

assign shl_ln73_2_fu_702_p2 = zext_ln73_2_fu_699_p1 << zext_ln73_reg_1143;

assign shl_ln73_3_fu_677_p2 = 64'd4294967295 << zext_ln73_3_fu_673_p1;

assign shl_ln73_4_fu_921_p2 = zext_ln73_4_fu_918_p1 << zext_ln73_3_reg_1166;

assign shl_ln73_5_fu_901_p2 = zext_ln73_5_fu_898_p1 << zext_ln73_3_reg_1166;

assign shl_ln73_fu_637_p2 = 64'd4294967295 << zext_ln73_fu_633_p1;

assign shl_ln_fu_561_p3 = {{trunc_ln72_fu_557_p1}, {5'd0}};

assign tmp_10_fu_535_p1 = lshr_ln70_2_fu_511_p2[31:0];

assign tmp_10_fu_535_p2 = lshr_ln70_3_fu_525_p2[31:0];

assign tmp_10_fu_535_p3 = {{1'd0}, {tmp_1_reg_1065}};

assign tmp_12_fu_843_p1 = lshr_ln72_2_fu_820_p2[31:0];

assign tmp_12_fu_843_p2 = lshr_ln72_3_fu_833_p2[31:0];

assign tmp_2_fu_497_p1 = lshr_ln70_fu_473_p2[31:0];

assign tmp_2_fu_497_p2 = lshr_ln70_1_fu_487_p2[31:0];

assign tmp_2_fu_497_p3 = add_ln70_fu_433_p2[32'd10];

assign tmp_5_fu_597_p1 = lshr_ln72_fu_573_p2[31:0];

assign tmp_5_fu_597_p2 = lshr_ln72_1_fu_587_p2[31:0];

assign tmp_5_fu_597_p3 = ashr_ln70_fu_545_p2[32'd1];

assign tmp_6_fu_453_p3 = add_ln70_2_fu_439_p2[32'd9];

assign tmp_fu_284_p3 = ap_sig_allocacmp_i_load[32'd2];

assign tmp_s_fu_399_p3 = {{empty_20_reg_1059}, {2'd0}};

assign trunc_ln69_fu_314_p1 = select_ln68_fu_292_p3[1:0];

assign trunc_ln70_3_fu_326_p3 = {{trunc_ln70_fu_322_p1}, {2'd0}};

assign trunc_ln70_fu_322_p1 = select_ln68_1_fu_306_p3[6:0];

assign trunc_ln72_3_fu_607_p1 = tmp_5_fu_597_p4[8:0];

assign trunc_ln72_4_fu_661_p1 = ashr_ln70_1_fu_649_p2[0:0];

assign trunc_ln72_7_fu_852_p1 = tmp_12_fu_843_p4[8:0];

assign trunc_ln72_fu_557_p1 = ashr_ln70_fu_545_p2[0:0];

assign xor_ln72_1_fu_751_p2 = (shl_ln72_5_fu_745_p2 ^ 64'd18446744073709551615);

assign xor_ln72_2_fu_988_p2 = (shl_ln72_7_fu_982_p2 ^ 64'd18446744073709551615);

assign xor_ln72_3_fu_950_p2 = (shl_ln72_9_fu_944_p2 ^ 64'd18446744073709551615);

assign xor_ln72_fu_789_p2 = (shl_ln72_fu_783_p2 ^ 64'd18446744073709551615);

assign xor_ln73_1_fu_683_p2 = (shl_ln73_3_fu_677_p2 ^ 64'd18446744073709551615);

assign xor_ln73_fu_643_p2 = (shl_ln73_fu_637_p2 ^ 64'd18446744073709551615);

assign zext_ln69_fu_396_p1 = select_ln68_reg_1047;

assign zext_ln70_1_fu_350_p1 = select_ln68_fu_292_p3;

assign zext_ln70_2_fu_360_p1 = add_ln70_1_fu_354_p2;

assign zext_ln70_3_fu_469_p1 = and_ln_fu_461_p3;

assign zext_ln70_4_fu_483_p1 = and_ln_fu_461_p3;

assign zext_ln70_5_fu_380_p1 = add_ln70_2_cast8_fu_372_p3;

assign zext_ln70_6_fu_507_p1 = and_ln70_2_fu_423_p3;

assign zext_ln70_7_fu_521_p1 = and_ln70_2_fu_423_p3;

assign zext_ln70_fu_430_p1 = select_ln68_reg_1047;

assign zext_ln72_10_fu_830_p1 = shl_ln72_2_reg_1160;

assign zext_ln72_11_fu_978_p1 = shl_ln72_3_fu_933_p3;

assign zext_ln72_12_fu_1000_p1 = tmp_10_reg_1112;

assign zext_ln72_13_fu_940_p1 = shl_ln72_3_fu_933_p3;

assign zext_ln72_14_fu_962_p1 = tmp_10_reg_1112;

assign zext_ln72_1_fu_569_p1 = shl_ln_fu_561_p3;

assign zext_ln72_2_fu_583_p1 = shl_ln_fu_561_p3;

assign zext_ln72_3_fu_689_p1 = trunc_ln72_3_reg_1123;

assign zext_ln72_4_fu_779_p1 = shl_ln72_1_fu_734_p3;

assign zext_ln72_5_fu_801_p1 = tmp_2_reg_1105;

assign zext_ln72_6_fu_888_p1 = trunc_ln72_7_reg_1188;

assign zext_ln72_7_fu_741_p1 = shl_ln72_1_fu_734_p3;

assign zext_ln72_8_fu_763_p1 = tmp_2_reg_1105;

assign zext_ln72_9_fu_817_p1 = shl_ln72_2_reg_1160;

assign zext_ln72_fu_411_p1 = empty_20_reg_1059;

assign zext_ln73_1_fu_719_p1 = add_ln73_reg_1137;

assign zext_ln73_2_fu_699_p1 = add_ln73_reg_1137;

assign zext_ln73_3_fu_673_p1 = shl_ln72_2_fu_665_p3;

assign zext_ln73_4_fu_918_p1 = add_ln73_1_reg_1202;

assign zext_ln73_5_fu_898_p1 = add_ln73_1_reg_1202;

assign zext_ln73_fu_633_p1 = shl_ln_fu_561_p3;

always @ (posedge ap_clk) begin
    exp_cast_reg_1037[31:5] <= 27'b000000000000000000000000000;
    zext_ln73_reg_1143[4:0] <= 5'b00000;
    zext_ln73_reg_1143[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    shl_ln72_2_reg_1160[4:0] <= 5'b00000;
    zext_ln73_3_reg_1166[4:0] <= 5'b00000;
    zext_ln73_3_reg_1166[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //ss_sort_update_1
