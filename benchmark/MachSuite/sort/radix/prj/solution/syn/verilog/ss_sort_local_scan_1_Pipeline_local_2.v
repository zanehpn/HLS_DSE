// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ss_sort_local_scan_1_Pipeline_local_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln14,
        trunc_ln15_2,
        trunc_ln,
        bucket_0_address0,
        bucket_0_ce0,
        bucket_0_we0,
        bucket_0_d0,
        bucket_0_q0,
        bucket_0_address1,
        bucket_0_ce1,
        bucket_0_q1,
        bucket_1_address0,
        bucket_1_ce0,
        bucket_1_we0,
        bucket_1_d0,
        bucket_1_q0,
        bucket_1_address1,
        bucket_1_ce1,
        bucket_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [10:0] zext_ln14;
input  [8:0] trunc_ln15_2;
input  [9:0] trunc_ln;
output  [8:0] bucket_0_address0;
output   bucket_0_ce0;
output   bucket_0_we0;
output  [63:0] bucket_0_d0;
input  [63:0] bucket_0_q0;
output  [8:0] bucket_0_address1;
output   bucket_0_ce1;
input  [63:0] bucket_0_q1;
output  [8:0] bucket_1_address0;
output   bucket_1_ce0;
output   bucket_1_we0;
output  [63:0] bucket_1_d0;
input  [63:0] bucket_1_q0;
output  [8:0] bucket_1_address1;
output   bucket_1_ce1;
input  [63:0] bucket_1_q1;

reg ap_idle;
reg[8:0] bucket_0_address0;
reg bucket_0_ce0;
reg bucket_0_we0;
reg[63:0] bucket_0_d0;
reg[8:0] bucket_0_address1;
reg bucket_0_ce1;
reg[8:0] bucket_1_address0;
reg bucket_1_ce0;
reg bucket_1_we0;
reg[63:0] bucket_1_d0;
reg[8:0] bucket_1_address1;
reg bucket_1_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln14_reg_730;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
reg   [63:0] reg_164;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_pp0_stage3_11001;
reg   [63:0] reg_169;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln14_cast_fu_174_p1;
reg   [63:0] zext_ln14_cast_reg_671;
reg   [63:0] i_0_load_reg_677;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] tmp_reg_683;
wire   [5:0] and_ln16_1_fu_238_p3;
reg   [5:0] and_ln16_1_reg_698;
reg   [8:0] bucket_0_addr_2_reg_706;
reg   [8:0] bucket_1_addr_2_reg_712;
wire   [63:0] zext_ln16_7_fu_252_p1;
reg   [63:0] zext_ln16_7_reg_718;
wire   [63:0] xor_ln16_fu_262_p2;
reg   [63:0] xor_ln16_reg_724;
wire   [0:0] icmp_ln14_fu_274_p2;
wire   [8:0] add_ln16_7_fu_297_p2;
reg   [8:0] add_ln16_7_reg_734;
reg   [53:0] lshr_ln16_4_reg_739;
wire   [5:0] and_ln16_2_fu_325_p3;
reg   [5:0] and_ln16_2_reg_744;
reg   [0:0] tmp_24_reg_750;
wire   [63:0] zext_ln16_14_fu_341_p1;
reg   [63:0] zext_ln16_14_reg_754;
wire   [63:0] xor_ln16_1_fu_351_p2;
reg   [63:0] xor_ln16_1_reg_760;
reg   [53:0] lshr_ln16_2_reg_766;
wire   [31:0] add_ln16_1_fu_468_p2;
reg   [31:0] add_ln16_1_reg_771;
reg   [0:0] tmp_22_reg_777;
reg   [8:0] bucket_0_addr_3_reg_781;
reg   [8:0] bucket_1_addr_3_reg_787;
wire   [31:0] tmp_29_1_fu_553_p4;
reg   [31:0] tmp_29_1_reg_793;
wire   [31:0] add_ln16_2_fu_597_p2;
reg   [31:0] add_ln16_2_reg_798;
wire    ap_block_pp0_stage5_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln16_fu_224_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln16_3_fu_246_p1;
wire   [63:0] zext_ln16_5_fu_482_p1;
wire    ap_block_pp0_stage2;
reg   [63:0] i_0_fu_76;
wire   [63:0] add_ln14_1_fu_642_p2;
wire    ap_loop_init;
wire   [63:0] or_ln16_1_fu_500_p2;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage4;
wire   [63:0] or_ln16_3_fu_615_p2;
wire    ap_block_pp0_stage0;
wire   [63:0] or_ln16_fu_520_p2;
wire   [63:0] or_ln16_2_fu_635_p2;
wire   [8:0] trunc_ln15_1_fu_190_p1;
wire   [9:0] trunc_ln15_fu_186_p1;
wire   [8:0] add_ln16_3_fu_194_p2;
wire   [9:0] add_ln16_4_fu_199_p2;
wire   [9:0] add_ln16_6_fu_210_p2;
wire   [8:0] add_ln16_5_fu_204_p2;
wire   [0:0] tmp_21_fu_230_p3;
wire   [63:0] shl_ln16_fu_256_p2;
wire   [63:0] add_ln14_fu_268_p2;
wire   [8:0] add_ln15_3_fu_286_p2;
wire   [9:0] add_ln15_2_fu_280_p2;
wire   [63:0] add_ln15_1_fu_292_p2;
wire   [9:0] add_ln16_8_fu_302_p2;
wire   [0:0] tmp_23_fu_317_p3;
wire   [63:0] shl_ln16_3_fu_345_p2;
wire   [63:0] add_ln15_fu_357_p2;
wire   [63:0] add_ln16_fu_361_p2;
wire   [5:0] and_ln_fu_377_p3;
wire   [63:0] zext_ln16_1_fu_384_p1;
wire   [63:0] lshr_ln16_fu_388_p2;
wire   [63:0] zext_ln16_2_fu_398_p1;
wire   [63:0] lshr_ln16_1_fu_402_p2;
wire   [31:0] tmp_s_fu_412_p1;
wire   [31:0] tmp_s_fu_412_p2;
wire   [53:0] tmp_s_fu_412_p3;
wire   [63:0] zext_ln16_4_fu_432_p1;
wire   [63:0] lshr_ln16_3_fu_435_p2;
wire   [63:0] zext_ln16_6_fu_445_p1;
wire   [63:0] lshr_ln16_5_fu_448_p2;
wire   [31:0] tmp_14_fu_458_p1;
wire   [31:0] tmp_14_fu_458_p2;
wire   [53:0] tmp_14_fu_458_p3;
wire   [31:0] tmp_14_fu_458_p4;
wire   [31:0] tmp_s_fu_412_p4;
wire   [63:0] zext_ln16_9_fu_492_p1;
wire   [63:0] and_ln16_3_fu_487_p2;
wire   [63:0] shl_ln16_2_fu_495_p2;
wire   [63:0] zext_ln16_8_fu_512_p1;
wire   [63:0] and_ln16_fu_507_p2;
wire   [63:0] shl_ln16_1_fu_515_p2;
wire   [63:0] zext_ln16_12_fu_527_p1;
wire   [63:0] lshr_ln16_8_fu_530_p2;
wire   [63:0] zext_ln16_13_fu_540_p1;
wire   [63:0] lshr_ln16_9_fu_543_p2;
wire   [31:0] tmp_29_1_fu_553_p1;
wire   [31:0] tmp_29_1_fu_553_p2;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln16_10_fu_562_p1;
wire   [63:0] lshr_ln16_6_fu_565_p2;
wire   [63:0] zext_ln16_11_fu_575_p1;
wire   [63:0] lshr_ln16_7_fu_578_p2;
wire   [31:0] tmp_26_1_fu_588_p1;
wire   [31:0] tmp_26_1_fu_588_p2;
wire   [31:0] tmp_26_1_fu_588_p4;
wire   [63:0] zext_ln16_16_fu_607_p1;
wire   [63:0] and_ln16_5_fu_602_p2;
wire   [63:0] shl_ln16_5_fu_610_p2;
wire   [63:0] zext_ln16_15_fu_627_p1;
wire   [63:0] and_ln16_4_fu_622_p2;
wire   [63:0] shl_ln16_4_fu_630_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_181;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

ss_sort_mux_254_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 54 ),
    .dout_WIDTH( 32 ))
mux_254_32_1_1_U12(
    .din0(tmp_s_fu_412_p1),
    .din1(tmp_s_fu_412_p2),
    .din2(tmp_s_fu_412_p3),
    .dout(tmp_s_fu_412_p4)
);

ss_sort_mux_254_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 54 ),
    .dout_WIDTH( 32 ))
mux_254_32_1_1_U13(
    .din0(tmp_14_fu_458_p1),
    .din1(tmp_14_fu_458_p2),
    .din2(tmp_14_fu_458_p3),
    .dout(tmp_14_fu_458_p4)
);

ss_sort_mux_254_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 54 ),
    .dout_WIDTH( 32 ))
mux_254_32_1_1_U14(
    .din0(tmp_29_1_fu_553_p1),
    .din1(tmp_29_1_fu_553_p2),
    .din2(lshr_ln16_4_reg_739),
    .dout(tmp_29_1_fu_553_p4)
);

ss_sort_mux_254_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 54 ),
    .dout_WIDTH( 32 ))
mux_254_32_1_1_U15(
    .din0(tmp_26_1_fu_588_p1),
    .din1(tmp_26_1_fu_588_p2),
    .din2(lshr_ln16_2_reg_766),
    .dout(tmp_26_1_fu_588_p4)
);

ss_sort_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_0_fu_76 <= 64'd1;
        end else if (((icmp_ln14_reg_730 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_0_fu_76 <= add_ln14_1_fu_642_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_181)) begin
            reg_164 <= bucket_0_q1;
        end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            reg_164 <= bucket_0_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_181)) begin
            reg_169 <= bucket_1_q1;
        end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            reg_169 <= bucket_1_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln16_1_reg_771 <= add_ln16_1_fu_468_p2;
        lshr_ln16_2_reg_766 <= {{add_ln15_fu_357_p2[63:10]}};
        tmp_22_reg_777 <= add_ln15_fu_357_p2[32'd10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_ln16_2_reg_798 <= add_ln16_2_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln14_fu_274_p2 == 1'd0))) begin
        add_ln16_7_reg_734 <= add_ln16_7_fu_297_p2;
        and_ln16_2_reg_744[5] <= and_ln16_2_fu_325_p3[5];
        lshr_ln16_4_reg_739 <= {{add_ln15_1_fu_292_p2[63:10]}};
        tmp_24_reg_750 <= add_ln15_1_fu_292_p2[32'd10];
        xor_ln16_1_reg_760 <= xor_ln16_1_fu_351_p2;
        zext_ln16_14_reg_754[5] <= zext_ln16_14_fu_341_p1[5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        and_ln16_1_reg_698[5] <= and_ln16_1_fu_238_p3[5];
        bucket_0_addr_2_reg_706 <= zext_ln16_3_fu_246_p1;
        bucket_1_addr_2_reg_712 <= zext_ln16_3_fu_246_p1;
        i_0_load_reg_677 <= i_0_fu_76;
        icmp_ln14_reg_730 <= icmp_ln14_fu_274_p2;
        tmp_reg_683 <= add_ln16_6_fu_210_p2[32'd9];
        xor_ln16_reg_724 <= xor_ln16_fu_262_p2;
        zext_ln16_7_reg_718[5] <= zext_ln16_7_fu_252_p1[5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_730 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        bucket_0_addr_3_reg_781 <= zext_ln16_5_fu_482_p1;
        bucket_1_addr_3_reg_787 <= zext_ln16_5_fu_482_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_730 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_29_1_reg_793 <= tmp_29_1_fu_553_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln14_cast_reg_671[10 : 0] <= zext_ln14_cast_fu_174_p1[10 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_730 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bucket_0_address0 = bucket_0_addr_3_reg_781;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        bucket_0_address0 = bucket_0_addr_2_reg_706;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bucket_0_address0 = zext_ln16_3_fu_246_p1;
    end else begin
        bucket_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            bucket_0_address1 = bucket_0_addr_2_reg_706;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            bucket_0_address1 = zext_ln16_5_fu_482_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            bucket_0_address1 = zext_ln16_fu_224_p1;
        end else begin
            bucket_0_address1 = 'bx;
        end
    end else begin
        bucket_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        bucket_0_ce0 = 1'b1;
    end else begin
        bucket_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        bucket_0_ce1 = 1'b1;
    end else begin
        bucket_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bucket_0_d0 = or_ln16_3_fu_615_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        bucket_0_d0 = or_ln16_1_fu_500_p2;
    end else begin
        bucket_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln14_reg_730 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_24_reg_750 == 1'd0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_22_reg_777 == 1'd0)))) begin
        bucket_0_we0 = 1'b1;
    end else begin
        bucket_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bucket_1_address0 = bucket_1_addr_3_reg_787;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        bucket_1_address0 = bucket_1_addr_2_reg_712;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bucket_1_address0 = zext_ln16_3_fu_246_p1;
    end else begin
        bucket_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            bucket_1_address1 = bucket_1_addr_2_reg_712;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            bucket_1_address1 = zext_ln16_5_fu_482_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            bucket_1_address1 = zext_ln16_fu_224_p1;
        end else begin
            bucket_1_address1 = 'bx;
        end
    end else begin
        bucket_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        bucket_1_ce0 = 1'b1;
    end else begin
        bucket_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        bucket_1_ce1 = 1'b1;
    end else begin
        bucket_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bucket_1_d0 = or_ln16_2_fu_635_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        bucket_1_d0 = or_ln16_fu_520_p2;
    end else begin
        bucket_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln14_reg_730 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_24_reg_750 == 1'd1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_22_reg_777 == 1'd1)))) begin
        bucket_1_we0 = 1'b1;
    end else begin
        bucket_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_1_fu_642_p2 = (i_0_load_reg_677 + 64'd2);

assign add_ln14_fu_268_p2 = (i_0_fu_76 + 64'd1);

assign add_ln15_1_fu_292_p2 = (add_ln14_fu_268_p2 + zext_ln14_cast_reg_671);

assign add_ln15_2_fu_280_p2 = (trunc_ln15_fu_186_p1 + 10'd1);

assign add_ln15_3_fu_286_p2 = (trunc_ln15_1_fu_190_p1 + 9'd1);

assign add_ln15_fu_357_p2 = (i_0_load_reg_677 + zext_ln14_cast_reg_671);

assign add_ln16_1_fu_468_p2 = (tmp_14_fu_458_p4 + tmp_s_fu_412_p4);

assign add_ln16_2_fu_597_p2 = (tmp_29_1_reg_793 + tmp_26_1_fu_588_p4);

assign add_ln16_3_fu_194_p2 = (trunc_ln15_1_fu_190_p1 + trunc_ln15_2);

assign add_ln16_4_fu_199_p2 = (trunc_ln15_fu_186_p1 + trunc_ln);

assign add_ln16_5_fu_204_p2 = ($signed(add_ln16_3_fu_194_p2) + $signed(9'd511));

assign add_ln16_6_fu_210_p2 = ($signed(add_ln16_4_fu_199_p2) + $signed(10'd1023));

assign add_ln16_7_fu_297_p2 = (add_ln15_3_fu_286_p2 + trunc_ln15_2);

assign add_ln16_8_fu_302_p2 = (add_ln15_2_fu_280_p2 + trunc_ln);

assign add_ln16_fu_361_p2 = ($signed(add_ln15_fu_357_p2) + $signed(64'd18446744073709551615));

assign and_ln16_1_fu_238_p3 = {{tmp_21_fu_230_p3}, {5'd0}};

assign and_ln16_2_fu_325_p3 = {{tmp_23_fu_317_p3}, {5'd0}};

assign and_ln16_3_fu_487_p2 = (xor_ln16_reg_724 & reg_164);

assign and_ln16_4_fu_622_p2 = (xor_ln16_1_reg_760 & reg_169);

assign and_ln16_5_fu_602_p2 = (xor_ln16_1_reg_760 & reg_164);

assign and_ln16_fu_507_p2 = (xor_ln16_reg_724 & reg_169);

assign and_ln_fu_377_p3 = {{tmp_reg_683}, {5'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_181 = ((icmp_ln14_reg_730 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign icmp_ln14_fu_274_p2 = ((add_ln14_fu_268_p2 == 64'd16) ? 1'b1 : 1'b0);

assign lshr_ln16_1_fu_402_p2 = bucket_1_q1 >> zext_ln16_2_fu_398_p1;

assign lshr_ln16_3_fu_435_p2 = bucket_0_q0 >> zext_ln16_4_fu_432_p1;

assign lshr_ln16_5_fu_448_p2 = bucket_1_q0 >> zext_ln16_6_fu_445_p1;

assign lshr_ln16_6_fu_565_p2 = bucket_0_q1 >> zext_ln16_10_fu_562_p1;

assign lshr_ln16_7_fu_578_p2 = bucket_1_q1 >> zext_ln16_11_fu_575_p1;

assign lshr_ln16_8_fu_530_p2 = bucket_0_q1 >> zext_ln16_12_fu_527_p1;

assign lshr_ln16_9_fu_543_p2 = bucket_1_q1 >> zext_ln16_13_fu_540_p1;

assign lshr_ln16_fu_388_p2 = bucket_0_q1 >> zext_ln16_1_fu_384_p1;

assign or_ln16_1_fu_500_p2 = (shl_ln16_2_fu_495_p2 | and_ln16_3_fu_487_p2);

assign or_ln16_2_fu_635_p2 = (shl_ln16_4_fu_630_p2 | and_ln16_4_fu_622_p2);

assign or_ln16_3_fu_615_p2 = (shl_ln16_5_fu_610_p2 | and_ln16_5_fu_602_p2);

assign or_ln16_fu_520_p2 = (shl_ln16_1_fu_515_p2 | and_ln16_fu_507_p2);

assign shl_ln16_1_fu_515_p2 = zext_ln16_8_fu_512_p1 << zext_ln16_7_reg_718;

assign shl_ln16_2_fu_495_p2 = zext_ln16_9_fu_492_p1 << zext_ln16_7_reg_718;

assign shl_ln16_3_fu_345_p2 = 64'd4294967295 << zext_ln16_14_fu_341_p1;

assign shl_ln16_4_fu_630_p2 = zext_ln16_15_fu_627_p1 << zext_ln16_14_reg_754;

assign shl_ln16_5_fu_610_p2 = zext_ln16_16_fu_607_p1 << zext_ln16_14_reg_754;

assign shl_ln16_fu_256_p2 = 64'd4294967295 << zext_ln16_7_fu_252_p1;

assign tmp_14_fu_458_p1 = lshr_ln16_3_fu_435_p2[31:0];

assign tmp_14_fu_458_p2 = lshr_ln16_5_fu_448_p2[31:0];

assign tmp_14_fu_458_p3 = {{add_ln15_fu_357_p2[63:10]}};

assign tmp_21_fu_230_p3 = add_ln16_4_fu_199_p2[32'd9];

assign tmp_23_fu_317_p3 = add_ln16_8_fu_302_p2[32'd9];

assign tmp_26_1_fu_588_p1 = lshr_ln16_6_fu_565_p2[31:0];

assign tmp_26_1_fu_588_p2 = lshr_ln16_7_fu_578_p2[31:0];

assign tmp_29_1_fu_553_p1 = lshr_ln16_8_fu_530_p2[31:0];

assign tmp_29_1_fu_553_p2 = lshr_ln16_9_fu_543_p2[31:0];

assign tmp_s_fu_412_p1 = lshr_ln16_fu_388_p2[31:0];

assign tmp_s_fu_412_p2 = lshr_ln16_1_fu_402_p2[31:0];

assign tmp_s_fu_412_p3 = {{add_ln16_fu_361_p2[63:10]}};

assign trunc_ln15_1_fu_190_p1 = i_0_fu_76[8:0];

assign trunc_ln15_fu_186_p1 = i_0_fu_76[9:0];

assign xor_ln16_1_fu_351_p2 = (shl_ln16_3_fu_345_p2 ^ 64'd18446744073709551615);

assign xor_ln16_fu_262_p2 = (shl_ln16_fu_256_p2 ^ 64'd18446744073709551615);

assign zext_ln14_cast_fu_174_p1 = zext_ln14;

assign zext_ln16_10_fu_562_p1 = and_ln16_1_reg_698;

assign zext_ln16_11_fu_575_p1 = and_ln16_1_reg_698;

assign zext_ln16_12_fu_527_p1 = and_ln16_2_reg_744;

assign zext_ln16_13_fu_540_p1 = and_ln16_2_reg_744;

assign zext_ln16_14_fu_341_p1 = and_ln16_2_fu_325_p3;

assign zext_ln16_15_fu_627_p1 = add_ln16_2_reg_798;

assign zext_ln16_16_fu_607_p1 = add_ln16_2_reg_798;

assign zext_ln16_1_fu_384_p1 = and_ln_fu_377_p3;

assign zext_ln16_2_fu_398_p1 = and_ln_fu_377_p3;

assign zext_ln16_3_fu_246_p1 = add_ln16_3_fu_194_p2;

assign zext_ln16_4_fu_432_p1 = and_ln16_1_reg_698;

assign zext_ln16_5_fu_482_p1 = add_ln16_7_reg_734;

assign zext_ln16_6_fu_445_p1 = and_ln16_1_reg_698;

assign zext_ln16_7_fu_252_p1 = and_ln16_1_fu_238_p3;

assign zext_ln16_8_fu_512_p1 = add_ln16_1_reg_771;

assign zext_ln16_9_fu_492_p1 = add_ln16_1_reg_771;

assign zext_ln16_fu_224_p1 = add_ln16_5_fu_204_p2;

always @ (posedge ap_clk) begin
    zext_ln14_cast_reg_671[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    and_ln16_1_reg_698[4:0] <= 5'b00000;
    zext_ln16_7_reg_718[4:0] <= 5'b00000;
    zext_ln16_7_reg_718[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    and_ln16_2_reg_744[4:0] <= 5'b00000;
    zext_ln16_14_reg_754[4:0] <= 5'b00000;
    zext_ln16_14_reg_754[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //ss_sort_local_scan_1_Pipeline_local_2
