// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ss_sort_local_scan_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bucket_0_address0,
        bucket_0_ce0,
        bucket_0_we0,
        bucket_0_d0,
        bucket_0_q0,
        bucket_0_address1,
        bucket_0_ce1,
        bucket_0_q1,
        bucket_1_address0,
        bucket_1_ce0,
        bucket_1_we0,
        bucket_1_d0,
        bucket_1_q0,
        bucket_1_address1,
        bucket_1_ce1,
        bucket_1_q1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] bucket_0_address0;
output   bucket_0_ce0;
output   bucket_0_we0;
output  [63:0] bucket_0_d0;
input  [63:0] bucket_0_q0;
output  [8:0] bucket_0_address1;
output   bucket_0_ce1;
input  [63:0] bucket_0_q1;
output  [8:0] bucket_1_address0;
output   bucket_1_ce0;
output   bucket_1_we0;
output  [63:0] bucket_1_d0;
input  [63:0] bucket_1_q0;
output  [8:0] bucket_1_address1;
output   bucket_1_ce1;
input  [63:0] bucket_1_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] tmp_s_fu_79_p3;
reg   [10:0] tmp_s_reg_129;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln13_fu_63_p2;
wire   [9:0] trunc_ln_fu_92_p3;
reg   [9:0] trunc_ln_reg_134;
wire   [8:0] trunc_ln15_2_fu_105_p3;
reg   [8:0] trunc_ln15_2_reg_139;
wire    grp_local_scan_1_Pipeline_local_2_fu_44_ap_start;
wire    grp_local_scan_1_Pipeline_local_2_fu_44_ap_done;
wire    grp_local_scan_1_Pipeline_local_2_fu_44_ap_idle;
wire    grp_local_scan_1_Pipeline_local_2_fu_44_ap_ready;
wire   [8:0] grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_address0;
wire    grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_ce0;
wire    grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_we0;
wire   [63:0] grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_d0;
wire   [8:0] grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_address1;
wire    grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_ce1;
wire   [8:0] grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_address0;
wire    grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_ce0;
wire    grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_we0;
wire   [63:0] grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_d0;
wire   [8:0] grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_address1;
wire    grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_ce1;
reg    grp_local_scan_1_Pipeline_local_2_fu_44_ap_start_reg;
wire    ap_CS_fsm_state3;
reg   [7:0] radixID_fu_40;
wire   [7:0] add_ln13_fu_69_p2;
wire   [6:0] empty_23_fu_75_p1;
wire   [5:0] trunc_ln15_fu_88_p1;
wire   [4:0] trunc_ln15_3_fu_101_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_local_scan_1_Pipeline_local_2_fu_44_ap_start_reg = 1'b0;
end

ss_sort_local_scan_1_Pipeline_local_2 grp_local_scan_1_Pipeline_local_2_fu_44(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_local_scan_1_Pipeline_local_2_fu_44_ap_start),
    .ap_done(grp_local_scan_1_Pipeline_local_2_fu_44_ap_done),
    .ap_idle(grp_local_scan_1_Pipeline_local_2_fu_44_ap_idle),
    .ap_ready(grp_local_scan_1_Pipeline_local_2_fu_44_ap_ready),
    .zext_ln14(tmp_s_reg_129),
    .trunc_ln15_2(trunc_ln15_2_reg_139),
    .trunc_ln(trunc_ln_reg_134),
    .bucket_0_address0(grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_address0),
    .bucket_0_ce0(grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_ce0),
    .bucket_0_we0(grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_we0),
    .bucket_0_d0(grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_d0),
    .bucket_0_q0(bucket_0_q0),
    .bucket_0_address1(grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_address1),
    .bucket_0_ce1(grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_ce1),
    .bucket_0_q1(bucket_0_q1),
    .bucket_1_address0(grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_address0),
    .bucket_1_ce0(grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_ce0),
    .bucket_1_we0(grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_we0),
    .bucket_1_d0(grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_d0),
    .bucket_1_q0(bucket_1_q0),
    .bucket_1_address1(grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_address1),
    .bucket_1_ce1(grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_ce1),
    .bucket_1_q1(bucket_1_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_local_scan_1_Pipeline_local_2_fu_44_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln13_fu_63_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_local_scan_1_Pipeline_local_2_fu_44_ap_start_reg <= 1'b1;
        end else if ((grp_local_scan_1_Pipeline_local_2_fu_44_ap_ready == 1'b1)) begin
            grp_local_scan_1_Pipeline_local_2_fu_44_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        radixID_fu_40 <= 8'd0;
    end else if (((icmp_ln13_fu_63_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        radixID_fu_40 <= add_ln13_fu_69_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_63_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_129[10 : 4] <= tmp_s_fu_79_p3[10 : 4];
        trunc_ln15_2_reg_139[8 : 4] <= trunc_ln15_2_fu_105_p3[8 : 4];
        trunc_ln_reg_134[9 : 4] <= trunc_ln_fu_92_p3[9 : 4];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_local_scan_1_Pipeline_local_2_fu_44_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln13_fu_63_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_63_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_63_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_local_scan_1_Pipeline_local_2_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_69_p2 = (radixID_fu_40 + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign bucket_0_address0 = grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_address0;

assign bucket_0_address1 = grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_address1;

assign bucket_0_ce0 = grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_ce0;

assign bucket_0_ce1 = grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_ce1;

assign bucket_0_d0 = grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_d0;

assign bucket_0_we0 = grp_local_scan_1_Pipeline_local_2_fu_44_bucket_0_we0;

assign bucket_1_address0 = grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_address0;

assign bucket_1_address1 = grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_address1;

assign bucket_1_ce0 = grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_ce0;

assign bucket_1_ce1 = grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_ce1;

assign bucket_1_d0 = grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_d0;

assign bucket_1_we0 = grp_local_scan_1_Pipeline_local_2_fu_44_bucket_1_we0;

assign empty_23_fu_75_p1 = radixID_fu_40[6:0];

assign grp_local_scan_1_Pipeline_local_2_fu_44_ap_start = grp_local_scan_1_Pipeline_local_2_fu_44_ap_start_reg;

assign icmp_ln13_fu_63_p2 = ((radixID_fu_40 == 8'd128) ? 1'b1 : 1'b0);

assign tmp_s_fu_79_p3 = {{empty_23_fu_75_p1}, {4'd0}};

assign trunc_ln15_2_fu_105_p3 = {{trunc_ln15_3_fu_101_p1}, {4'd0}};

assign trunc_ln15_3_fu_101_p1 = radixID_fu_40[4:0];

assign trunc_ln15_fu_88_p1 = radixID_fu_40[5:0];

assign trunc_ln_fu_92_p3 = {{trunc_ln15_fu_88_p1}, {4'd0}};

always @ (posedge ap_clk) begin
    tmp_s_reg_129[3:0] <= 4'b0000;
    trunc_ln_reg_134[3:0] <= 4'b0000;
    trunc_ln15_2_reg_139[3:0] <= 4'b0000;
end

endmodule //ss_sort_local_scan_1
