-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ss_sort_last_step_scan_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bucket_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_0_ce0 : OUT STD_LOGIC;
    bucket_0_we0 : OUT STD_LOGIC;
    bucket_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    bucket_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_1_ce0 : OUT STD_LOGIC;
    bucket_1_we0 : OUT STD_LOGIC;
    bucket_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_0_ce0 : OUT STD_LOGIC;
    sum_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_1_ce0 : OUT STD_LOGIC;
    sum_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of ss_sort_last_step_scan_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln34_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal reg_170 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal reg_174 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln34_reg_666 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_fu_202_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_reg_670 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln34_fu_222_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln34_reg_675 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln34_1_fu_236_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_1_reg_680 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_244_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln34_reg_685 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln35_fu_248_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln35_reg_690 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_25_reg_695 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_284_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_reg_701 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_28_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_360_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln_reg_724 : STD_LOGIC_VECTOR (5 downto 0);
    signal bucket_0_addr_reg_730 : STD_LOGIC_VECTOR (8 downto 0);
    signal bucket_1_addr_reg_735 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_7_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_7_reg_740 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln37_fu_384_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln37_reg_746 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_12_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_12_reg_752 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln37_1_fu_400_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln37_1_reg_758 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_432_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_764 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_467_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_769 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln37_1_fu_476_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln37_1_reg_775 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal bucket_0_addr_3_reg_780 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal bucket_1_addr_3_reg_785 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln37_1_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_1_reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln37_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_1_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_3_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_90 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_fu_627_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (4 downto 0);
    signal radixID_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_radixID_load : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_98 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln37_2_fu_501_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln37_4_fu_600_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln37_1_fu_522_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln37_3_fu_620_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_214_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_1_fu_230_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_24_fu_256_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_fu_276_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln36_fu_298_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln35_fu_252_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_260_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_1_fu_322_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln36_1_fu_310_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_fu_318_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln5_fu_302_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_fu_326_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln37_3_fu_338_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_29_fu_352_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_2_fu_332_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln37_fu_378_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln37_3_fu_394_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_2_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln37_fu_409_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_4_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln37_1_fu_422_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_432_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln37_5_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln37_2_fu_444_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_6_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln37_3_fu_457_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln37_9_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln37_2_fu_487_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln37_2_fu_496_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_8_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln37_fu_508_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln37_1_fu_517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln37_fu_529_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln36_1_cast6_fu_534_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_10_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln37_4_fu_550_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_11_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln37_5_fu_563_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_573_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln37_14_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln37_4_fu_587_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln37_5_fu_595_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_13_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln37_3_fu_607_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln37_4_fu_615_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ss_sort_mux_21_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ss_sort_mux_22_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ss_sort_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_21_32_1_1_U37 : component ss_sort_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_16_fu_432_p1,
        din1 => tmp_16_fu_432_p2,
        din2 => tmp_28_reg_719,
        dout => tmp_16_fu_432_p4);

    mux_21_32_1_1_U38 : component ss_sort_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_17_fu_467_p1,
        din1 => tmp_17_fu_467_p2,
        din2 => tmp_25_reg_695,
        dout => tmp_17_fu_467_p4);

    mux_22_32_1_1_U39 : component ss_sort_mux_22_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_18_fu_573_p1,
        din1 => tmp_18_fu_573_p2,
        din2 => and_ln37_1_reg_775,
        dout => tmp_18_fu_573_p4);

    flow_control_loop_pipe_sequential_init_U : component ss_sort_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_90 <= ap_const_lv5_0;
            elsif (((icmp_ln34_reg_666 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_fu_90 <= add_ln35_fu_627_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                indvar_flatten_fu_98 <= ap_const_lv11_0;
            elsif (((icmp_ln34_reg_666 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                indvar_flatten_fu_98 <= add_ln34_reg_670;
            end if; 
        end if;
    end process;

    radixID_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                radixID_fu_94 <= ap_const_lv8_0;
            elsif (((icmp_ln34_reg_666 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                radixID_fu_94 <= select_ln34_1_reg_680;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln34_reg_670 <= add_ln34_fu_202_p2;
                icmp_ln34_reg_666 <= icmp_ln34_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln37_1_reg_790 <= add_ln37_1_fu_582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    and_ln37_1_reg_775(0) <= and_ln37_1_fu_476_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (icmp_ln34_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    and_ln_reg_724(5) <= and_ln_fu_360_p3(5);
                bucket_0_addr_reg_730 <= zext_ln37_1_fu_368_p1(9 - 1 downto 0);
                bucket_1_addr_reg_735 <= zext_ln37_1_fu_368_p1(9 - 1 downto 0);
                select_ln34_1_reg_680 <= select_ln34_1_fu_236_p3;
                select_ln34_reg_675 <= select_ln34_fu_222_p3;
                    tmp_15_reg_701(5) <= tmp_15_fu_284_p3(5);
                tmp_25_reg_695 <= select_ln34_1_fu_236_p3(6 downto 6);
                tmp_28_reg_719 <= add_ln36_fu_326_p2(10 downto 10);
                trunc_ln34_reg_685 <= trunc_ln34_fu_244_p1;
                trunc_ln35_reg_690 <= trunc_ln35_fu_248_p1;
                xor_ln37_1_reg_758 <= xor_ln37_1_fu_400_p2;
                xor_ln37_reg_746 <= xor_ln37_fu_384_p2;
                    zext_ln37_12_reg_752(5) <= zext_ln37_12_fu_390_p1(5);
                    zext_ln37_7_reg_740(5) <= zext_ln37_7_fu_374_p1(5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    bucket_0_addr_3_reg_780(8 downto 1) <= zext_ln37_3_fu_541_p1(9 - 1 downto 0)(8 downto 1);
                    bucket_1_addr_3_reg_785(8 downto 1) <= zext_ln37_3_fu_541_p1(9 - 1 downto 0)(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_170 <= bucket_0_q0;
                reg_174 <= bucket_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_16_reg_764 <= tmp_16_fu_432_p4;
                tmp_17_reg_769 <= tmp_17_fu_467_p4;
            end if;
        end if;
    end process;
    tmp_15_reg_701(4 downto 0) <= "00000";
    and_ln_reg_724(4 downto 0) <= "00000";
    zext_ln37_7_reg_740(4 downto 0) <= "00000";
    zext_ln37_7_reg_740(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln37_12_reg_752(4 downto 0) <= "00000";
    zext_ln37_12_reg_752(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    and_ln37_1_reg_775(1) <= '0';
    bucket_0_addr_3_reg_780(0) <= '1';
    bucket_1_addr_3_reg_785(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln34_fu_196_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln34_fu_196_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln34_1_fu_230_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_radixID_load) + unsigned(ap_const_lv8_1));
    add_ln34_fu_202_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv11_1));
    add_ln35_fu_627_p2 <= std_logic_vector(unsigned(select_ln34_reg_675) + unsigned(ap_const_lv5_2));
    add_ln36_1_cast6_fu_534_p3 <= (trunc_ln34_reg_685 & or_ln37_fu_529_p2);
    add_ln36_fu_326_p2 <= std_logic_vector(unsigned(zext_ln35_fu_252_p1) + unsigned(tmp_s_fu_260_p3));
    add_ln37_1_fu_582_p2 <= std_logic_vector(unsigned(tmp_18_fu_573_p4) + unsigned(tmp_17_reg_769));
    add_ln37_2_fu_332_p2 <= std_logic_vector(unsigned(zext_ln36_1_fu_322_p1) + unsigned(trunc_ln36_1_fu_310_p3));
    add_ln37_3_fu_338_p2 <= std_logic_vector(unsigned(zext_ln36_fu_318_p1) + unsigned(trunc_ln5_fu_302_p3));
    add_ln37_fu_483_p2 <= std_logic_vector(unsigned(tmp_17_reg_769) + unsigned(tmp_16_reg_764));
    and_ln37_1_fu_476_p3 <= (ap_const_lv1_0 & tmp_25_reg_695);
    and_ln37_2_fu_487_p2 <= (xor_ln37_reg_746 and reg_170);
    and_ln37_3_fu_607_p2 <= (xor_ln37_1_reg_758 and reg_174);
    and_ln37_4_fu_587_p2 <= (xor_ln37_1_reg_758 and reg_170);
    and_ln37_fu_508_p2 <= (xor_ln37_reg_746 and reg_174);
    and_ln_fu_360_p3 <= (tmp_29_fu_352_p3 & ap_const_lv5_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln34_fu_196_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln34_fu_196_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_state1, i_fu_90, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten_fu_98)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_radixID_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, radixID_fu_94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_radixID_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_radixID_load <= radixID_fu_94;
        end if; 
    end process;


    bucket_0_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln34_fu_196_p2, ap_CS_fsm_state6, icmp_ln34_reg_666, tmp_25_reg_695, tmp_28_reg_719, bucket_0_addr_reg_730, ap_CS_fsm_state3, bucket_0_addr_3_reg_780, ap_CS_fsm_state4, zext_ln37_1_fu_368_p1, zext_ln37_3_fu_541_p1)
    begin
        if (((icmp_ln34_reg_666 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_25_reg_695 = ap_const_lv1_0))) then 
            bucket_0_address0 <= bucket_0_addr_3_reg_780;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bucket_0_address0 <= zext_ln37_3_fu_541_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_28_reg_719 = ap_const_lv1_0))) then 
            bucket_0_address0 <= bucket_0_addr_reg_730;
        elsif (((icmp_ln34_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bucket_0_address0 <= zext_ln37_1_fu_368_p1(9 - 1 downto 0);
        else 
            bucket_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bucket_0_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln34_fu_196_p2, ap_CS_fsm_state6, icmp_ln34_reg_666, tmp_25_reg_695, tmp_28_reg_719, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start_int = ap_const_logic_1) and (icmp_ln34_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln34_reg_666 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_25_reg_695 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_28_reg_719 = ap_const_lv1_0)))) then 
            bucket_0_ce0 <= ap_const_logic_1;
        else 
            bucket_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_0_d0_assign_proc : process(ap_CS_fsm_state6, icmp_ln34_reg_666, tmp_25_reg_695, tmp_28_reg_719, ap_CS_fsm_state3, or_ln37_2_fu_501_p2, or_ln37_4_fu_600_p2)
    begin
        if (((icmp_ln34_reg_666 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_25_reg_695 = ap_const_lv1_0))) then 
            bucket_0_d0 <= or_ln37_4_fu_600_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_28_reg_719 = ap_const_lv1_0))) then 
            bucket_0_d0 <= or_ln37_2_fu_501_p2;
        else 
            bucket_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bucket_0_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln34_reg_666, tmp_25_reg_695, tmp_28_reg_719, ap_CS_fsm_state3)
    begin
        if ((((icmp_ln34_reg_666 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_25_reg_695 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_28_reg_719 = ap_const_lv1_0)))) then 
            bucket_0_we0 <= ap_const_logic_1;
        else 
            bucket_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_1_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln34_fu_196_p2, ap_CS_fsm_state6, icmp_ln34_reg_666, tmp_25_reg_695, tmp_28_reg_719, bucket_1_addr_reg_735, ap_CS_fsm_state3, ap_CS_fsm_state4, bucket_1_addr_3_reg_785, zext_ln37_1_fu_368_p1, zext_ln37_3_fu_541_p1)
    begin
        if (((icmp_ln34_reg_666 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_25_reg_695 = ap_const_lv1_1))) then 
            bucket_1_address0 <= bucket_1_addr_3_reg_785;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bucket_1_address0 <= zext_ln37_3_fu_541_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_28_reg_719 = ap_const_lv1_1))) then 
            bucket_1_address0 <= bucket_1_addr_reg_735;
        elsif (((icmp_ln34_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bucket_1_address0 <= zext_ln37_1_fu_368_p1(9 - 1 downto 0);
        else 
            bucket_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bucket_1_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln34_fu_196_p2, ap_CS_fsm_state6, icmp_ln34_reg_666, tmp_25_reg_695, tmp_28_reg_719, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start_int = ap_const_logic_1) and (icmp_ln34_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln34_reg_666 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_25_reg_695 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_28_reg_719 = ap_const_lv1_1)))) then 
            bucket_1_ce0 <= ap_const_logic_1;
        else 
            bucket_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_1_d0_assign_proc : process(ap_CS_fsm_state6, icmp_ln34_reg_666, tmp_25_reg_695, tmp_28_reg_719, ap_CS_fsm_state3, or_ln37_1_fu_522_p2, or_ln37_3_fu_620_p2)
    begin
        if (((icmp_ln34_reg_666 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_25_reg_695 = ap_const_lv1_1))) then 
            bucket_1_d0 <= or_ln37_3_fu_620_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_28_reg_719 = ap_const_lv1_1))) then 
            bucket_1_d0 <= or_ln37_1_fu_522_p2;
        else 
            bucket_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bucket_1_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln34_reg_666, tmp_25_reg_695, tmp_28_reg_719, ap_CS_fsm_state3)
    begin
        if ((((icmp_ln34_reg_666 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_25_reg_695 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_28_reg_719 = ap_const_lv1_1)))) then 
            bucket_1_we0 <= ap_const_logic_1;
        else 
            bucket_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_24_fu_256_p1 <= select_ln34_1_fu_236_p3(7 - 1 downto 0);
    icmp_ln34_fu_196_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv11_400) else "0";
    lshr_ln37_1_fu_422_p2 <= std_logic_vector(shift_right(unsigned(bucket_1_q0),to_integer(unsigned('0' & zext_ln37_4_fu_419_p1(31-1 downto 0)))));
    lshr_ln37_2_fu_444_p2 <= std_logic_vector(shift_right(unsigned(sum_0_q0),to_integer(unsigned('0' & zext_ln37_5_fu_441_p1(31-1 downto 0)))));
    lshr_ln37_3_fu_457_p2 <= std_logic_vector(shift_right(unsigned(sum_1_q0),to_integer(unsigned('0' & zext_ln37_6_fu_454_p1(31-1 downto 0)))));
    lshr_ln37_4_fu_550_p2 <= std_logic_vector(shift_right(unsigned(bucket_0_q0),to_integer(unsigned('0' & zext_ln37_10_fu_547_p1(31-1 downto 0)))));
    lshr_ln37_5_fu_563_p2 <= std_logic_vector(shift_right(unsigned(bucket_1_q0),to_integer(unsigned('0' & zext_ln37_11_fu_560_p1(31-1 downto 0)))));
    lshr_ln37_fu_409_p2 <= std_logic_vector(shift_right(unsigned(bucket_0_q0),to_integer(unsigned('0' & zext_ln37_2_fu_406_p1(31-1 downto 0)))));
    or_ln37_1_fu_522_p2 <= (shl_ln37_1_fu_517_p2 or and_ln37_fu_508_p2);
    or_ln37_2_fu_501_p2 <= (shl_ln37_2_fu_496_p2 or and_ln37_2_fu_487_p2);
    or_ln37_3_fu_620_p2 <= (shl_ln37_4_fu_615_p2 or and_ln37_3_fu_607_p2);
    or_ln37_4_fu_600_p2 <= (shl_ln37_5_fu_595_p2 or and_ln37_4_fu_587_p2);
    or_ln37_fu_529_p2 <= (trunc_ln35_reg_690 or ap_const_lv4_1);
    select_ln34_1_fu_236_p3 <= 
        add_ln34_1_fu_230_p2 when (tmp_fu_214_p3(0) = '1') else 
        ap_sig_allocacmp_radixID_load;
    select_ln34_fu_222_p3 <= 
        ap_const_lv5_0 when (tmp_fu_214_p3(0) = '1') else 
        ap_sig_allocacmp_i_load;
    shl_ln37_1_fu_517_p2 <= std_logic_vector(shift_left(unsigned(zext_ln37_8_fu_513_p1),to_integer(unsigned('0' & zext_ln37_7_reg_740(31-1 downto 0)))));
    shl_ln37_2_fu_496_p2 <= std_logic_vector(shift_left(unsigned(zext_ln37_9_fu_492_p1),to_integer(unsigned('0' & zext_ln37_7_reg_740(31-1 downto 0)))));
    shl_ln37_3_fu_394_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln37_12_fu_390_p1(31-1 downto 0)))));
    shl_ln37_4_fu_615_p2 <= std_logic_vector(shift_left(unsigned(zext_ln37_13_fu_612_p1),to_integer(unsigned('0' & zext_ln37_12_reg_752(31-1 downto 0)))));
    shl_ln37_5_fu_595_p2 <= std_logic_vector(shift_left(unsigned(zext_ln37_14_fu_592_p1),to_integer(unsigned('0' & zext_ln37_12_reg_752(31-1 downto 0)))));
    shl_ln37_fu_378_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln37_7_fu_374_p1(31-1 downto 0)))));
    sum_0_address0 <= zext_ln37_fu_292_p1(5 - 1 downto 0);

    sum_0_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sum_0_ce0 <= ap_const_logic_1;
        else 
            sum_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_1_address0 <= zext_ln37_fu_292_p1(5 - 1 downto 0);

    sum_1_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sum_1_ce0 <= ap_const_logic_1;
        else 
            sum_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_15_fu_284_p3 <= (tmp_26_fu_276_p3 & ap_const_lv5_0);
    tmp_16_fu_432_p1 <= lshr_ln37_fu_409_p2(32 - 1 downto 0);
    tmp_16_fu_432_p2 <= lshr_ln37_1_fu_422_p2(32 - 1 downto 0);
    tmp_17_fu_467_p1 <= lshr_ln37_2_fu_444_p2(32 - 1 downto 0);
    tmp_17_fu_467_p2 <= lshr_ln37_3_fu_457_p2(32 - 1 downto 0);
    tmp_18_fu_573_p1 <= lshr_ln37_4_fu_550_p2(32 - 1 downto 0);
    tmp_18_fu_573_p2 <= lshr_ln37_5_fu_563_p2(32 - 1 downto 0);
    tmp_26_fu_276_p3 <= select_ln34_1_fu_236_p3(5 downto 5);
    tmp_29_fu_352_p3 <= add_ln37_3_fu_338_p2(9 downto 9);
    tmp_fu_214_p3 <= ap_sig_allocacmp_i_load(4 downto 4);
    tmp_s_fu_260_p3 <= (empty_24_fu_256_p1 & ap_const_lv4_0);
    trunc_ln34_fu_244_p1 <= select_ln34_1_fu_236_p3(5 - 1 downto 0);
    trunc_ln35_fu_248_p1 <= select_ln34_fu_222_p3(4 - 1 downto 0);
    trunc_ln36_1_fu_310_p3 <= (trunc_ln34_fu_244_p1 & ap_const_lv4_0);
    trunc_ln36_fu_298_p1 <= select_ln34_1_fu_236_p3(6 - 1 downto 0);
    trunc_ln5_fu_302_p3 <= (trunc_ln36_fu_298_p1 & ap_const_lv4_0);
    xor_ln37_1_fu_400_p2 <= (shl_ln37_3_fu_394_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln37_fu_384_p2 <= (shl_ln37_fu_378_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    zext_ln35_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_fu_222_p3),11));
    zext_ln36_1_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_fu_222_p3),9));
    zext_ln36_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_fu_222_p3),10));
    zext_ln37_10_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_701),64));
    zext_ln37_11_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_701),64));
    zext_ln37_12_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_284_p3),64));
    zext_ln37_13_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_1_reg_790),64));
    zext_ln37_14_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_1_reg_790),64));
    zext_ln37_1_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_2_fu_332_p2),64));
    zext_ln37_2_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_reg_724),64));
    zext_ln37_3_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_cast6_fu_534_p3),64));
    zext_ln37_4_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_reg_724),64));
    zext_ln37_5_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_701),64));
    zext_ln37_6_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_701),64));
    zext_ln37_7_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_360_p3),64));
    zext_ln37_8_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_fu_483_p2),64));
    zext_ln37_9_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_fu_483_p2),64));
    zext_ln37_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln34_fu_244_p1),64));
end behav;
