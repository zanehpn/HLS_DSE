-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ss_sort is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    a_0_ce0 : OUT STD_LOGIC;
    a_0_we0 : OUT STD_LOGIC;
    a_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    a_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    a_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    a_0_ce1 : OUT STD_LOGIC;
    a_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    a_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    a_1_ce0 : OUT STD_LOGIC;
    a_1_we0 : OUT STD_LOGIC;
    a_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    a_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    a_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    a_1_ce1 : OUT STD_LOGIC;
    a_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    b_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    b_0_ce0 : OUT STD_LOGIC;
    b_0_we0 : OUT STD_LOGIC;
    b_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    b_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    b_0_ce1 : OUT STD_LOGIC;
    b_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    b_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    b_1_ce0 : OUT STD_LOGIC;
    b_1_we0 : OUT STD_LOGIC;
    b_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    b_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    b_1_ce1 : OUT STD_LOGIC;
    b_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_0_ce0 : OUT STD_LOGIC;
    bucket_0_we0 : OUT STD_LOGIC;
    bucket_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    bucket_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_0_ce1 : OUT STD_LOGIC;
    bucket_0_we1 : OUT STD_LOGIC;
    bucket_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    bucket_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_1_ce0 : OUT STD_LOGIC;
    bucket_1_we0 : OUT STD_LOGIC;
    bucket_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_1_ce1 : OUT STD_LOGIC;
    bucket_1_we1 : OUT STD_LOGIC;
    bucket_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_0_ce0 : OUT STD_LOGIC;
    sum_0_we0 : OUT STD_LOGIC;
    sum_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sum_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_0_ce1 : OUT STD_LOGIC;
    sum_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_1_ce0 : OUT STD_LOGIC;
    sum_1_we0 : OUT STD_LOGIC;
    sum_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sum_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_1_ce1 : OUT STD_LOGIC;
    sum_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of ss_sort is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ss_sort_ss_sort,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.978000,HLS_SYN_LAT=444881,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2695,HLS_SYN_LUT=22141,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln84_fu_187_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln84_reg_216 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln84_1_fu_190_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln84_1_reg_221 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_init_1_fu_95_ap_start : STD_LOGIC;
    signal grp_init_1_fu_95_ap_done : STD_LOGIC;
    signal grp_init_1_fu_95_ap_idle : STD_LOGIC;
    signal grp_init_1_fu_95_ap_ready : STD_LOGIC;
    signal grp_init_1_fu_95_bucket_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_init_1_fu_95_bucket_0_ce0 : STD_LOGIC;
    signal grp_init_1_fu_95_bucket_0_we0 : STD_LOGIC;
    signal grp_init_1_fu_95_bucket_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_init_1_fu_95_bucket_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_init_1_fu_95_bucket_0_ce1 : STD_LOGIC;
    signal grp_init_1_fu_95_bucket_0_we1 : STD_LOGIC;
    signal grp_init_1_fu_95_bucket_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_init_1_fu_95_bucket_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_init_1_fu_95_bucket_1_ce0 : STD_LOGIC;
    signal grp_init_1_fu_95_bucket_1_we0 : STD_LOGIC;
    signal grp_init_1_fu_95_bucket_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_init_1_fu_95_bucket_1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_init_1_fu_95_bucket_1_ce1 : STD_LOGIC;
    signal grp_init_1_fu_95_bucket_1_we1 : STD_LOGIC;
    signal grp_init_1_fu_95_bucket_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hist_1_fu_103_ap_start : STD_LOGIC;
    signal grp_hist_1_fu_103_ap_done : STD_LOGIC;
    signal grp_hist_1_fu_103_ap_idle : STD_LOGIC;
    signal grp_hist_1_fu_103_ap_ready : STD_LOGIC;
    signal grp_hist_1_fu_103_bucket_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_hist_1_fu_103_bucket_0_ce0 : STD_LOGIC;
    signal grp_hist_1_fu_103_bucket_0_we0 : STD_LOGIC;
    signal grp_hist_1_fu_103_bucket_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hist_1_fu_103_bucket_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_hist_1_fu_103_bucket_1_ce0 : STD_LOGIC;
    signal grp_hist_1_fu_103_bucket_1_we0 : STD_LOGIC;
    signal grp_hist_1_fu_103_bucket_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hist_1_fu_103_b_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_hist_1_fu_103_b_0_ce0 : STD_LOGIC;
    signal grp_hist_1_fu_103_b_0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hist_1_fu_103_b_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_hist_1_fu_103_b_1_ce0 : STD_LOGIC;
    signal grp_hist_1_fu_103_b_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_local_scan_1_fu_118_ap_start : STD_LOGIC;
    signal grp_local_scan_1_fu_118_ap_done : STD_LOGIC;
    signal grp_local_scan_1_fu_118_ap_idle : STD_LOGIC;
    signal grp_local_scan_1_fu_118_ap_ready : STD_LOGIC;
    signal grp_local_scan_1_fu_118_bucket_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_local_scan_1_fu_118_bucket_0_ce0 : STD_LOGIC;
    signal grp_local_scan_1_fu_118_bucket_0_we0 : STD_LOGIC;
    signal grp_local_scan_1_fu_118_bucket_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_local_scan_1_fu_118_bucket_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_local_scan_1_fu_118_bucket_0_ce1 : STD_LOGIC;
    signal grp_local_scan_1_fu_118_bucket_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_local_scan_1_fu_118_bucket_1_ce0 : STD_LOGIC;
    signal grp_local_scan_1_fu_118_bucket_1_we0 : STD_LOGIC;
    signal grp_local_scan_1_fu_118_bucket_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_local_scan_1_fu_118_bucket_1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_local_scan_1_fu_118_bucket_1_ce1 : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_ap_start : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_ap_done : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_ap_idle : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_ap_ready : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_sum_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sum_scan_1_fu_126_sum_0_ce0 : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_sum_0_we0 : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_sum_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sum_scan_1_fu_126_sum_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sum_scan_1_fu_126_sum_0_ce1 : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_sum_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sum_scan_1_fu_126_sum_1_ce0 : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_sum_1_we0 : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_sum_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sum_scan_1_fu_126_sum_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sum_scan_1_fu_126_sum_1_ce1 : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_bucket_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sum_scan_1_fu_126_bucket_0_ce0 : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_bucket_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sum_scan_1_fu_126_bucket_0_ce1 : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_bucket_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sum_scan_1_fu_126_bucket_1_ce0 : STD_LOGIC;
    signal grp_sum_scan_1_fu_126_bucket_1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sum_scan_1_fu_126_bucket_1_ce1 : STD_LOGIC;
    signal grp_last_step_scan_1_fu_138_ap_start : STD_LOGIC;
    signal grp_last_step_scan_1_fu_138_ap_done : STD_LOGIC;
    signal grp_last_step_scan_1_fu_138_ap_idle : STD_LOGIC;
    signal grp_last_step_scan_1_fu_138_ap_ready : STD_LOGIC;
    signal grp_last_step_scan_1_fu_138_bucket_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_last_step_scan_1_fu_138_bucket_0_ce0 : STD_LOGIC;
    signal grp_last_step_scan_1_fu_138_bucket_0_we0 : STD_LOGIC;
    signal grp_last_step_scan_1_fu_138_bucket_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_last_step_scan_1_fu_138_bucket_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_last_step_scan_1_fu_138_bucket_1_ce0 : STD_LOGIC;
    signal grp_last_step_scan_1_fu_138_bucket_1_we0 : STD_LOGIC;
    signal grp_last_step_scan_1_fu_138_bucket_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_last_step_scan_1_fu_138_sum_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_last_step_scan_1_fu_138_sum_0_ce0 : STD_LOGIC;
    signal grp_last_step_scan_1_fu_138_sum_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_last_step_scan_1_fu_138_sum_1_ce0 : STD_LOGIC;
    signal grp_update_1_fu_150_ap_start : STD_LOGIC;
    signal grp_update_1_fu_150_ap_done : STD_LOGIC;
    signal grp_update_1_fu_150_ap_idle : STD_LOGIC;
    signal grp_update_1_fu_150_ap_ready : STD_LOGIC;
    signal grp_update_1_fu_150_a_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_update_1_fu_150_a_0_ce0 : STD_LOGIC;
    signal grp_update_1_fu_150_a_0_we0 : STD_LOGIC;
    signal grp_update_1_fu_150_a_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_1_fu_150_a_0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_1_fu_150_a_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_update_1_fu_150_a_1_ce0 : STD_LOGIC;
    signal grp_update_1_fu_150_a_1_we0 : STD_LOGIC;
    signal grp_update_1_fu_150_a_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_1_fu_150_a_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_1_fu_150_bucket_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_update_1_fu_150_bucket_0_ce0 : STD_LOGIC;
    signal grp_update_1_fu_150_bucket_0_we0 : STD_LOGIC;
    signal grp_update_1_fu_150_bucket_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_1_fu_150_bucket_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_update_1_fu_150_bucket_1_ce0 : STD_LOGIC;
    signal grp_update_1_fu_150_bucket_1_we0 : STD_LOGIC;
    signal grp_update_1_fu_150_bucket_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_1_fu_150_b_03_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_update_1_fu_150_b_03_ce0 : STD_LOGIC;
    signal grp_update_1_fu_150_b_03_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_1_fu_150_b_03_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_update_1_fu_150_b_03_ce1 : STD_LOGIC;
    signal grp_update_1_fu_150_b_03_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_1_fu_150_b_15_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_update_1_fu_150_b_15_ce0 : STD_LOGIC;
    signal grp_update_1_fu_150_b_15_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_1_fu_150_b_15_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_update_1_fu_150_b_15_ce1 : STD_LOGIC;
    signal grp_update_1_fu_150_b_15_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal valid_buffer_reg_70 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_valid_buffer_1_phi_fu_86_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal grp_init_1_fu_95_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_179_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hist_1_fu_103_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_local_scan_1_fu_118_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_sum_scan_1_fu_126_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_last_step_scan_1_fu_138_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_update_1_fu_150_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal exp_fu_66 : STD_LOGIC_VECTOR (5 downto 0);
    signal exp_3_fu_193_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ss_sort_init_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bucket_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_0_ce0 : OUT STD_LOGIC;
        bucket_0_we0 : OUT STD_LOGIC;
        bucket_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        bucket_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_0_ce1 : OUT STD_LOGIC;
        bucket_0_we1 : OUT STD_LOGIC;
        bucket_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        bucket_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_1_ce0 : OUT STD_LOGIC;
        bucket_1_we0 : OUT STD_LOGIC;
        bucket_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_1_ce1 : OUT STD_LOGIC;
        bucket_1_we1 : OUT STD_LOGIC;
        bucket_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ss_sort_hist_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bucket_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_0_ce0 : OUT STD_LOGIC;
        bucket_0_we0 : OUT STD_LOGIC;
        bucket_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        bucket_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_1_ce0 : OUT STD_LOGIC;
        bucket_1_we0 : OUT STD_LOGIC;
        bucket_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        b_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        b_0_ce0 : OUT STD_LOGIC;
        b_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        b_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        b_1_ce0 : OUT STD_LOGIC;
        b_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        exp : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component ss_sort_local_scan_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bucket_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_0_ce0 : OUT STD_LOGIC;
        bucket_0_we0 : OUT STD_LOGIC;
        bucket_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        bucket_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_0_ce1 : OUT STD_LOGIC;
        bucket_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_1_ce0 : OUT STD_LOGIC;
        bucket_1_we0 : OUT STD_LOGIC;
        bucket_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_1_ce1 : OUT STD_LOGIC;
        bucket_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ss_sort_sum_scan_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sum_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sum_0_ce0 : OUT STD_LOGIC;
        sum_0_we0 : OUT STD_LOGIC;
        sum_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        sum_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sum_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sum_0_ce1 : OUT STD_LOGIC;
        sum_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        sum_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sum_1_ce0 : OUT STD_LOGIC;
        sum_1_we0 : OUT STD_LOGIC;
        sum_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        sum_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sum_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sum_1_ce1 : OUT STD_LOGIC;
        sum_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_0_ce0 : OUT STD_LOGIC;
        bucket_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_0_ce1 : OUT STD_LOGIC;
        bucket_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_1_ce0 : OUT STD_LOGIC;
        bucket_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_1_ce1 : OUT STD_LOGIC;
        bucket_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ss_sort_last_step_scan_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bucket_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_0_ce0 : OUT STD_LOGIC;
        bucket_0_we0 : OUT STD_LOGIC;
        bucket_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        bucket_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_1_ce0 : OUT STD_LOGIC;
        bucket_1_we0 : OUT STD_LOGIC;
        bucket_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sum_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sum_0_ce0 : OUT STD_LOGIC;
        sum_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sum_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sum_1_ce0 : OUT STD_LOGIC;
        sum_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ss_sort_update_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        a_0_ce0 : OUT STD_LOGIC;
        a_0_we0 : OUT STD_LOGIC;
        a_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        a_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        a_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        a_1_ce0 : OUT STD_LOGIC;
        a_1_we0 : OUT STD_LOGIC;
        a_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        a_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_0_ce0 : OUT STD_LOGIC;
        bucket_0_we0 : OUT STD_LOGIC;
        bucket_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        bucket_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_1_ce0 : OUT STD_LOGIC;
        bucket_1_we0 : OUT STD_LOGIC;
        bucket_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        b_03_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        b_03_ce0 : OUT STD_LOGIC;
        b_03_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        b_03_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        b_03_ce1 : OUT STD_LOGIC;
        b_03_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        b_15_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        b_15_ce0 : OUT STD_LOGIC;
        b_15_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        b_15_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        b_15_ce1 : OUT STD_LOGIC;
        b_15_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        exp : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    grp_init_1_fu_95 : component ss_sort_init_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_init_1_fu_95_ap_start,
        ap_done => grp_init_1_fu_95_ap_done,
        ap_idle => grp_init_1_fu_95_ap_idle,
        ap_ready => grp_init_1_fu_95_ap_ready,
        bucket_0_address0 => grp_init_1_fu_95_bucket_0_address0,
        bucket_0_ce0 => grp_init_1_fu_95_bucket_0_ce0,
        bucket_0_we0 => grp_init_1_fu_95_bucket_0_we0,
        bucket_0_d0 => grp_init_1_fu_95_bucket_0_d0,
        bucket_0_q0 => bucket_0_q0,
        bucket_0_address1 => grp_init_1_fu_95_bucket_0_address1,
        bucket_0_ce1 => grp_init_1_fu_95_bucket_0_ce1,
        bucket_0_we1 => grp_init_1_fu_95_bucket_0_we1,
        bucket_0_d1 => grp_init_1_fu_95_bucket_0_d1,
        bucket_0_q1 => bucket_0_q1,
        bucket_1_address0 => grp_init_1_fu_95_bucket_1_address0,
        bucket_1_ce0 => grp_init_1_fu_95_bucket_1_ce0,
        bucket_1_we0 => grp_init_1_fu_95_bucket_1_we0,
        bucket_1_d0 => grp_init_1_fu_95_bucket_1_d0,
        bucket_1_q0 => bucket_1_q0,
        bucket_1_address1 => grp_init_1_fu_95_bucket_1_address1,
        bucket_1_ce1 => grp_init_1_fu_95_bucket_1_ce1,
        bucket_1_we1 => grp_init_1_fu_95_bucket_1_we1,
        bucket_1_d1 => grp_init_1_fu_95_bucket_1_d1,
        bucket_1_q1 => bucket_1_q1);

    grp_hist_1_fu_103 : component ss_sort_hist_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hist_1_fu_103_ap_start,
        ap_done => grp_hist_1_fu_103_ap_done,
        ap_idle => grp_hist_1_fu_103_ap_idle,
        ap_ready => grp_hist_1_fu_103_ap_ready,
        bucket_0_address0 => grp_hist_1_fu_103_bucket_0_address0,
        bucket_0_ce0 => grp_hist_1_fu_103_bucket_0_ce0,
        bucket_0_we0 => grp_hist_1_fu_103_bucket_0_we0,
        bucket_0_d0 => grp_hist_1_fu_103_bucket_0_d0,
        bucket_0_q0 => bucket_0_q0,
        bucket_1_address0 => grp_hist_1_fu_103_bucket_1_address0,
        bucket_1_ce0 => grp_hist_1_fu_103_bucket_1_ce0,
        bucket_1_we0 => grp_hist_1_fu_103_bucket_1_we0,
        bucket_1_d0 => grp_hist_1_fu_103_bucket_1_d0,
        bucket_1_q0 => bucket_1_q0,
        b_0_address0 => grp_hist_1_fu_103_b_0_address0,
        b_0_ce0 => grp_hist_1_fu_103_b_0_ce0,
        b_0_q0 => grp_hist_1_fu_103_b_0_q0,
        b_1_address0 => grp_hist_1_fu_103_b_1_address0,
        b_1_ce0 => grp_hist_1_fu_103_b_1_ce0,
        b_1_q0 => grp_hist_1_fu_103_b_1_q0,
        exp => trunc_ln84_reg_216);

    grp_local_scan_1_fu_118 : component ss_sort_local_scan_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_local_scan_1_fu_118_ap_start,
        ap_done => grp_local_scan_1_fu_118_ap_done,
        ap_idle => grp_local_scan_1_fu_118_ap_idle,
        ap_ready => grp_local_scan_1_fu_118_ap_ready,
        bucket_0_address0 => grp_local_scan_1_fu_118_bucket_0_address0,
        bucket_0_ce0 => grp_local_scan_1_fu_118_bucket_0_ce0,
        bucket_0_we0 => grp_local_scan_1_fu_118_bucket_0_we0,
        bucket_0_d0 => grp_local_scan_1_fu_118_bucket_0_d0,
        bucket_0_q0 => bucket_0_q0,
        bucket_0_address1 => grp_local_scan_1_fu_118_bucket_0_address1,
        bucket_0_ce1 => grp_local_scan_1_fu_118_bucket_0_ce1,
        bucket_0_q1 => bucket_0_q1,
        bucket_1_address0 => grp_local_scan_1_fu_118_bucket_1_address0,
        bucket_1_ce0 => grp_local_scan_1_fu_118_bucket_1_ce0,
        bucket_1_we0 => grp_local_scan_1_fu_118_bucket_1_we0,
        bucket_1_d0 => grp_local_scan_1_fu_118_bucket_1_d0,
        bucket_1_q0 => bucket_1_q0,
        bucket_1_address1 => grp_local_scan_1_fu_118_bucket_1_address1,
        bucket_1_ce1 => grp_local_scan_1_fu_118_bucket_1_ce1,
        bucket_1_q1 => bucket_1_q1);

    grp_sum_scan_1_fu_126 : component ss_sort_sum_scan_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sum_scan_1_fu_126_ap_start,
        ap_done => grp_sum_scan_1_fu_126_ap_done,
        ap_idle => grp_sum_scan_1_fu_126_ap_idle,
        ap_ready => grp_sum_scan_1_fu_126_ap_ready,
        sum_0_address0 => grp_sum_scan_1_fu_126_sum_0_address0,
        sum_0_ce0 => grp_sum_scan_1_fu_126_sum_0_ce0,
        sum_0_we0 => grp_sum_scan_1_fu_126_sum_0_we0,
        sum_0_d0 => grp_sum_scan_1_fu_126_sum_0_d0,
        sum_0_q0 => sum_0_q0,
        sum_0_address1 => grp_sum_scan_1_fu_126_sum_0_address1,
        sum_0_ce1 => grp_sum_scan_1_fu_126_sum_0_ce1,
        sum_0_q1 => sum_0_q1,
        sum_1_address0 => grp_sum_scan_1_fu_126_sum_1_address0,
        sum_1_ce0 => grp_sum_scan_1_fu_126_sum_1_ce0,
        sum_1_we0 => grp_sum_scan_1_fu_126_sum_1_we0,
        sum_1_d0 => grp_sum_scan_1_fu_126_sum_1_d0,
        sum_1_q0 => sum_1_q0,
        sum_1_address1 => grp_sum_scan_1_fu_126_sum_1_address1,
        sum_1_ce1 => grp_sum_scan_1_fu_126_sum_1_ce1,
        sum_1_q1 => sum_1_q1,
        bucket_0_address0 => grp_sum_scan_1_fu_126_bucket_0_address0,
        bucket_0_ce0 => grp_sum_scan_1_fu_126_bucket_0_ce0,
        bucket_0_q0 => bucket_0_q0,
        bucket_0_address1 => grp_sum_scan_1_fu_126_bucket_0_address1,
        bucket_0_ce1 => grp_sum_scan_1_fu_126_bucket_0_ce1,
        bucket_0_q1 => bucket_0_q1,
        bucket_1_address0 => grp_sum_scan_1_fu_126_bucket_1_address0,
        bucket_1_ce0 => grp_sum_scan_1_fu_126_bucket_1_ce0,
        bucket_1_q0 => bucket_1_q0,
        bucket_1_address1 => grp_sum_scan_1_fu_126_bucket_1_address1,
        bucket_1_ce1 => grp_sum_scan_1_fu_126_bucket_1_ce1,
        bucket_1_q1 => bucket_1_q1);

    grp_last_step_scan_1_fu_138 : component ss_sort_last_step_scan_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_last_step_scan_1_fu_138_ap_start,
        ap_done => grp_last_step_scan_1_fu_138_ap_done,
        ap_idle => grp_last_step_scan_1_fu_138_ap_idle,
        ap_ready => grp_last_step_scan_1_fu_138_ap_ready,
        bucket_0_address0 => grp_last_step_scan_1_fu_138_bucket_0_address0,
        bucket_0_ce0 => grp_last_step_scan_1_fu_138_bucket_0_ce0,
        bucket_0_we0 => grp_last_step_scan_1_fu_138_bucket_0_we0,
        bucket_0_d0 => grp_last_step_scan_1_fu_138_bucket_0_d0,
        bucket_0_q0 => bucket_0_q0,
        bucket_1_address0 => grp_last_step_scan_1_fu_138_bucket_1_address0,
        bucket_1_ce0 => grp_last_step_scan_1_fu_138_bucket_1_ce0,
        bucket_1_we0 => grp_last_step_scan_1_fu_138_bucket_1_we0,
        bucket_1_d0 => grp_last_step_scan_1_fu_138_bucket_1_d0,
        bucket_1_q0 => bucket_1_q0,
        sum_0_address0 => grp_last_step_scan_1_fu_138_sum_0_address0,
        sum_0_ce0 => grp_last_step_scan_1_fu_138_sum_0_ce0,
        sum_0_q0 => sum_0_q0,
        sum_1_address0 => grp_last_step_scan_1_fu_138_sum_1_address0,
        sum_1_ce0 => grp_last_step_scan_1_fu_138_sum_1_ce0,
        sum_1_q0 => sum_1_q0);

    grp_update_1_fu_150 : component ss_sort_update_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_1_fu_150_ap_start,
        ap_done => grp_update_1_fu_150_ap_done,
        ap_idle => grp_update_1_fu_150_ap_idle,
        ap_ready => grp_update_1_fu_150_ap_ready,
        a_0_address0 => grp_update_1_fu_150_a_0_address0,
        a_0_ce0 => grp_update_1_fu_150_a_0_ce0,
        a_0_we0 => grp_update_1_fu_150_a_0_we0,
        a_0_d0 => grp_update_1_fu_150_a_0_d0,
        a_0_q0 => grp_update_1_fu_150_a_0_q0,
        a_1_address0 => grp_update_1_fu_150_a_1_address0,
        a_1_ce0 => grp_update_1_fu_150_a_1_ce0,
        a_1_we0 => grp_update_1_fu_150_a_1_we0,
        a_1_d0 => grp_update_1_fu_150_a_1_d0,
        a_1_q0 => grp_update_1_fu_150_a_1_q0,
        bucket_0_address0 => grp_update_1_fu_150_bucket_0_address0,
        bucket_0_ce0 => grp_update_1_fu_150_bucket_0_ce0,
        bucket_0_we0 => grp_update_1_fu_150_bucket_0_we0,
        bucket_0_d0 => grp_update_1_fu_150_bucket_0_d0,
        bucket_0_q0 => bucket_0_q0,
        bucket_1_address0 => grp_update_1_fu_150_bucket_1_address0,
        bucket_1_ce0 => grp_update_1_fu_150_bucket_1_ce0,
        bucket_1_we0 => grp_update_1_fu_150_bucket_1_we0,
        bucket_1_d0 => grp_update_1_fu_150_bucket_1_d0,
        bucket_1_q0 => bucket_1_q0,
        b_03_address0 => grp_update_1_fu_150_b_03_address0,
        b_03_ce0 => grp_update_1_fu_150_b_03_ce0,
        b_03_q0 => grp_update_1_fu_150_b_03_q0,
        b_03_address1 => grp_update_1_fu_150_b_03_address1,
        b_03_ce1 => grp_update_1_fu_150_b_03_ce1,
        b_03_q1 => grp_update_1_fu_150_b_03_q1,
        b_15_address0 => grp_update_1_fu_150_b_15_address0,
        b_15_ce0 => grp_update_1_fu_150_b_15_ce0,
        b_15_q0 => grp_update_1_fu_150_b_15_q0,
        b_15_address1 => grp_update_1_fu_150_b_15_address1,
        b_15_ce1 => grp_update_1_fu_150_b_15_ce1,
        b_15_q1 => grp_update_1_fu_150_b_15_q1,
        exp => trunc_ln84_1_reg_221);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_hist_1_fu_103_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hist_1_fu_103_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_hist_1_fu_103_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hist_1_fu_103_ap_ready = ap_const_logic_1)) then 
                    grp_hist_1_fu_103_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_init_1_fu_95_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_init_1_fu_95_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_fu_179_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_init_1_fu_95_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_init_1_fu_95_ap_ready = ap_const_logic_1)) then 
                    grp_init_1_fu_95_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_last_step_scan_1_fu_138_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_last_step_scan_1_fu_138_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_last_step_scan_1_fu_138_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_last_step_scan_1_fu_138_ap_ready = ap_const_logic_1)) then 
                    grp_last_step_scan_1_fu_138_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_local_scan_1_fu_118_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_local_scan_1_fu_118_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_local_scan_1_fu_118_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_local_scan_1_fu_118_ap_ready = ap_const_logic_1)) then 
                    grp_local_scan_1_fu_118_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sum_scan_1_fu_126_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sum_scan_1_fu_126_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_sum_scan_1_fu_126_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sum_scan_1_fu_126_ap_ready = ap_const_logic_1)) then 
                    grp_sum_scan_1_fu_126_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_1_fu_150_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_1_fu_150_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    grp_update_1_fu_150_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_1_fu_150_ap_ready = ap_const_logic_1)) then 
                    grp_update_1_fu_150_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    exp_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                exp_fu_66 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                exp_fu_66 <= exp_3_fu_193_p2;
            end if; 
        end if;
    end process;

    valid_buffer_reg_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                valid_buffer_reg_70 <= ap_phi_mux_valid_buffer_1_phi_fu_86_p4;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                valid_buffer_reg_70 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln84_1_reg_221 <= trunc_ln84_1_fu_190_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln84_reg_216 <= trunc_ln84_fu_187_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state12, grp_init_1_fu_95_ap_done, grp_local_scan_1_fu_118_ap_done, grp_sum_scan_1_fu_126_ap_done, grp_last_step_scan_1_fu_138_ap_done, valid_buffer_reg_70, ap_CS_fsm_state14, ap_block_state14_on_subcall_done, ap_CS_fsm_state2, tmp_fu_179_p3, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_block_state5_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_179_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_init_1_fu_95_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grp_init_1_fu_95_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_local_scan_1_fu_118_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_sum_scan_1_fu_126_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((valid_buffer_reg_70 = ap_const_lv1_1) and (grp_last_step_scan_1_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((valid_buffer_reg_70 = ap_const_lv1_0) and (grp_last_step_scan_1_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    a_0_address0_assign_proc : process(grp_hist_1_fu_103_b_0_address0, grp_update_1_fu_150_a_0_address0, grp_update_1_fu_150_b_03_address0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            a_0_address0 <= grp_update_1_fu_150_b_03_address0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            a_0_address0 <= grp_update_1_fu_150_a_0_address0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            a_0_address0 <= grp_hist_1_fu_103_b_0_address0;
        else 
            a_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    a_0_address1 <= grp_update_1_fu_150_b_03_address1;

    a_0_ce0_assign_proc : process(grp_hist_1_fu_103_b_0_ce0, grp_update_1_fu_150_a_0_ce0, grp_update_1_fu_150_b_03_ce0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            a_0_ce0 <= grp_update_1_fu_150_b_03_ce0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            a_0_ce0 <= grp_update_1_fu_150_a_0_ce0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            a_0_ce0 <= grp_hist_1_fu_103_b_0_ce0;
        else 
            a_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_0_ce1_assign_proc : process(grp_update_1_fu_150_b_03_ce1, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            a_0_ce1 <= grp_update_1_fu_150_b_03_ce1;
        else 
            a_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_0_d0 <= grp_update_1_fu_150_a_0_d0;

    a_0_we0_assign_proc : process(grp_update_1_fu_150_a_0_we0, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            a_0_we0 <= grp_update_1_fu_150_a_0_we0;
        else 
            a_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_1_address0_assign_proc : process(grp_hist_1_fu_103_b_1_address0, grp_update_1_fu_150_a_1_address0, grp_update_1_fu_150_b_15_address0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            a_1_address0 <= grp_update_1_fu_150_b_15_address0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            a_1_address0 <= grp_update_1_fu_150_a_1_address0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            a_1_address0 <= grp_hist_1_fu_103_b_1_address0;
        else 
            a_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    a_1_address1 <= grp_update_1_fu_150_b_15_address1;

    a_1_ce0_assign_proc : process(grp_hist_1_fu_103_b_1_ce0, grp_update_1_fu_150_a_1_ce0, grp_update_1_fu_150_b_15_ce0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            a_1_ce0 <= grp_update_1_fu_150_b_15_ce0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            a_1_ce0 <= grp_update_1_fu_150_a_1_ce0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            a_1_ce0 <= grp_hist_1_fu_103_b_1_ce0;
        else 
            a_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_1_ce1_assign_proc : process(grp_update_1_fu_150_b_15_ce1, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            a_1_ce1 <= grp_update_1_fu_150_b_15_ce1;
        else 
            a_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_1_d0 <= grp_update_1_fu_150_a_1_d0;

    a_1_we0_assign_proc : process(grp_update_1_fu_150_a_1_we0, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            a_1_we0 <= grp_update_1_fu_150_a_1_we0;
        else 
            a_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_sum_scan_1_fu_126_ap_done)
    begin
        if ((grp_sum_scan_1_fu_126_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_last_step_scan_1_fu_138_ap_done)
    begin
        if ((grp_last_step_scan_1_fu_138_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(ap_block_state14_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state14_on_subcall_done)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_init_1_fu_95_ap_done)
    begin
        if ((grp_init_1_fu_95_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state5_on_subcall_done)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_local_scan_1_fu_118_ap_done)
    begin
        if ((grp_local_scan_1_fu_118_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state14_on_subcall_done_assign_proc : process(grp_update_1_fu_150_ap_done, valid_buffer_reg_70)
    begin
                ap_block_state14_on_subcall_done <= (((valid_buffer_reg_70 = ap_const_lv1_1) and (grp_update_1_fu_150_ap_done = ap_const_logic_0)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (grp_update_1_fu_150_ap_done = ap_const_logic_0)));
    end process;


    ap_block_state5_on_subcall_done_assign_proc : process(grp_hist_1_fu_103_ap_done, valid_buffer_reg_70)
    begin
                ap_block_state5_on_subcall_done <= (((valid_buffer_reg_70 = ap_const_lv1_1) and (grp_hist_1_fu_103_ap_done = ap_const_logic_0)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (grp_hist_1_fu_103_ap_done = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_179_p3)
    begin
        if (((tmp_fu_179_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_valid_buffer_1_phi_fu_86_p4_assign_proc : process(valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
            if ((valid_buffer_reg_70 = ap_const_lv1_1)) then 
                ap_phi_mux_valid_buffer_1_phi_fu_86_p4 <= ap_const_lv1_0;
            elsif ((valid_buffer_reg_70 = ap_const_lv1_0)) then 
                ap_phi_mux_valid_buffer_1_phi_fu_86_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_valid_buffer_1_phi_fu_86_p4 <= "X";
            end if;
        else 
            ap_phi_mux_valid_buffer_1_phi_fu_86_p4 <= "X";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_179_p3)
    begin
        if (((tmp_fu_179_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_0_address0_assign_proc : process(grp_hist_1_fu_103_b_0_address0, grp_update_1_fu_150_a_0_address0, grp_update_1_fu_150_b_03_address0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            b_0_address0 <= grp_update_1_fu_150_b_03_address0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            b_0_address0 <= grp_update_1_fu_150_a_0_address0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            b_0_address0 <= grp_hist_1_fu_103_b_0_address0;
        else 
            b_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    b_0_address1 <= grp_update_1_fu_150_b_03_address1;

    b_0_ce0_assign_proc : process(grp_hist_1_fu_103_b_0_ce0, grp_update_1_fu_150_a_0_ce0, grp_update_1_fu_150_b_03_ce0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            b_0_ce0 <= grp_update_1_fu_150_b_03_ce0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            b_0_ce0 <= grp_update_1_fu_150_a_0_ce0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            b_0_ce0 <= grp_hist_1_fu_103_b_0_ce0;
        else 
            b_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_0_ce1_assign_proc : process(grp_update_1_fu_150_b_03_ce1, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            b_0_ce1 <= grp_update_1_fu_150_b_03_ce1;
        else 
            b_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_0_d0 <= grp_update_1_fu_150_a_0_d0;

    b_0_we0_assign_proc : process(grp_update_1_fu_150_a_0_we0, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            b_0_we0 <= grp_update_1_fu_150_a_0_we0;
        else 
            b_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_address0_assign_proc : process(grp_hist_1_fu_103_b_1_address0, grp_update_1_fu_150_a_1_address0, grp_update_1_fu_150_b_15_address0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            b_1_address0 <= grp_update_1_fu_150_b_15_address0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            b_1_address0 <= grp_update_1_fu_150_a_1_address0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            b_1_address0 <= grp_hist_1_fu_103_b_1_address0;
        else 
            b_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    b_1_address1 <= grp_update_1_fu_150_b_15_address1;

    b_1_ce0_assign_proc : process(grp_hist_1_fu_103_b_1_ce0, grp_update_1_fu_150_a_1_ce0, grp_update_1_fu_150_b_15_ce0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            b_1_ce0 <= grp_update_1_fu_150_b_15_ce0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            b_1_ce0 <= grp_update_1_fu_150_a_1_ce0;
        elsif (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            b_1_ce0 <= grp_hist_1_fu_103_b_1_ce0;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_ce1_assign_proc : process(grp_update_1_fu_150_b_15_ce1, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            b_1_ce1 <= grp_update_1_fu_150_b_15_ce1;
        else 
            b_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_1_d0 <= grp_update_1_fu_150_a_1_d0;

    b_1_we0_assign_proc : process(grp_update_1_fu_150_a_1_we0, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if (((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            b_1_we0 <= grp_update_1_fu_150_a_1_we0;
        else 
            b_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_0_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, grp_init_1_fu_95_bucket_0_address0, grp_hist_1_fu_103_bucket_0_address0, grp_local_scan_1_fu_118_bucket_0_address0, grp_sum_scan_1_fu_126_bucket_0_address0, grp_last_step_scan_1_fu_138_bucket_0_address0, grp_update_1_fu_150_bucket_0_address0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            bucket_0_address0 <= grp_update_1_fu_150_bucket_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bucket_0_address0 <= grp_last_step_scan_1_fu_138_bucket_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bucket_0_address0 <= grp_sum_scan_1_fu_126_bucket_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_0_address0 <= grp_local_scan_1_fu_118_bucket_0_address0;
        elsif ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            bucket_0_address0 <= grp_hist_1_fu_103_bucket_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_0_address0 <= grp_init_1_fu_95_bucket_0_address0;
        else 
            bucket_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bucket_0_address1_assign_proc : process(ap_CS_fsm_state3, grp_init_1_fu_95_bucket_0_address1, grp_local_scan_1_fu_118_bucket_0_address1, grp_sum_scan_1_fu_126_bucket_0_address1, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bucket_0_address1 <= grp_sum_scan_1_fu_126_bucket_0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_0_address1 <= grp_local_scan_1_fu_118_bucket_0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_0_address1 <= grp_init_1_fu_95_bucket_0_address1;
        else 
            bucket_0_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    bucket_0_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, grp_init_1_fu_95_bucket_0_ce0, grp_hist_1_fu_103_bucket_0_ce0, grp_local_scan_1_fu_118_bucket_0_ce0, grp_sum_scan_1_fu_126_bucket_0_ce0, grp_last_step_scan_1_fu_138_bucket_0_ce0, grp_update_1_fu_150_bucket_0_ce0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            bucket_0_ce0 <= grp_update_1_fu_150_bucket_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bucket_0_ce0 <= grp_last_step_scan_1_fu_138_bucket_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bucket_0_ce0 <= grp_sum_scan_1_fu_126_bucket_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_0_ce0 <= grp_local_scan_1_fu_118_bucket_0_ce0;
        elsif ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            bucket_0_ce0 <= grp_hist_1_fu_103_bucket_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_0_ce0 <= grp_init_1_fu_95_bucket_0_ce0;
        else 
            bucket_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_0_ce1_assign_proc : process(ap_CS_fsm_state3, grp_init_1_fu_95_bucket_0_ce1, grp_local_scan_1_fu_118_bucket_0_ce1, grp_sum_scan_1_fu_126_bucket_0_ce1, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bucket_0_ce1 <= grp_sum_scan_1_fu_126_bucket_0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_0_ce1 <= grp_local_scan_1_fu_118_bucket_0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_0_ce1 <= grp_init_1_fu_95_bucket_0_ce1;
        else 
            bucket_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_0_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, grp_init_1_fu_95_bucket_0_d0, grp_hist_1_fu_103_bucket_0_d0, grp_local_scan_1_fu_118_bucket_0_d0, grp_last_step_scan_1_fu_138_bucket_0_d0, grp_update_1_fu_150_bucket_0_d0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            bucket_0_d0 <= grp_update_1_fu_150_bucket_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bucket_0_d0 <= grp_last_step_scan_1_fu_138_bucket_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_0_d0 <= grp_local_scan_1_fu_118_bucket_0_d0;
        elsif ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            bucket_0_d0 <= grp_hist_1_fu_103_bucket_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_0_d0 <= grp_init_1_fu_95_bucket_0_d0;
        else 
            bucket_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    bucket_0_d1 <= grp_init_1_fu_95_bucket_0_d1;

    bucket_0_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, grp_init_1_fu_95_bucket_0_we0, grp_hist_1_fu_103_bucket_0_we0, grp_local_scan_1_fu_118_bucket_0_we0, grp_last_step_scan_1_fu_138_bucket_0_we0, grp_update_1_fu_150_bucket_0_we0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            bucket_0_we0 <= grp_update_1_fu_150_bucket_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bucket_0_we0 <= grp_last_step_scan_1_fu_138_bucket_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_0_we0 <= grp_local_scan_1_fu_118_bucket_0_we0;
        elsif ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            bucket_0_we0 <= grp_hist_1_fu_103_bucket_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_0_we0 <= grp_init_1_fu_95_bucket_0_we0;
        else 
            bucket_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_0_we1_assign_proc : process(ap_CS_fsm_state3, grp_init_1_fu_95_bucket_0_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_0_we1 <= grp_init_1_fu_95_bucket_0_we1;
        else 
            bucket_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_1_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, grp_init_1_fu_95_bucket_1_address0, grp_hist_1_fu_103_bucket_1_address0, grp_local_scan_1_fu_118_bucket_1_address0, grp_sum_scan_1_fu_126_bucket_1_address0, grp_last_step_scan_1_fu_138_bucket_1_address0, grp_update_1_fu_150_bucket_1_address0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            bucket_1_address0 <= grp_update_1_fu_150_bucket_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bucket_1_address0 <= grp_last_step_scan_1_fu_138_bucket_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bucket_1_address0 <= grp_sum_scan_1_fu_126_bucket_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_1_address0 <= grp_local_scan_1_fu_118_bucket_1_address0;
        elsif ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            bucket_1_address0 <= grp_hist_1_fu_103_bucket_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_1_address0 <= grp_init_1_fu_95_bucket_1_address0;
        else 
            bucket_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bucket_1_address1_assign_proc : process(ap_CS_fsm_state3, grp_init_1_fu_95_bucket_1_address1, grp_local_scan_1_fu_118_bucket_1_address1, grp_sum_scan_1_fu_126_bucket_1_address1, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bucket_1_address1 <= grp_sum_scan_1_fu_126_bucket_1_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_1_address1 <= grp_local_scan_1_fu_118_bucket_1_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_1_address1 <= grp_init_1_fu_95_bucket_1_address1;
        else 
            bucket_1_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    bucket_1_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, grp_init_1_fu_95_bucket_1_ce0, grp_hist_1_fu_103_bucket_1_ce0, grp_local_scan_1_fu_118_bucket_1_ce0, grp_sum_scan_1_fu_126_bucket_1_ce0, grp_last_step_scan_1_fu_138_bucket_1_ce0, grp_update_1_fu_150_bucket_1_ce0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            bucket_1_ce0 <= grp_update_1_fu_150_bucket_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bucket_1_ce0 <= grp_last_step_scan_1_fu_138_bucket_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bucket_1_ce0 <= grp_sum_scan_1_fu_126_bucket_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_1_ce0 <= grp_local_scan_1_fu_118_bucket_1_ce0;
        elsif ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            bucket_1_ce0 <= grp_hist_1_fu_103_bucket_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_1_ce0 <= grp_init_1_fu_95_bucket_1_ce0;
        else 
            bucket_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_1_ce1_assign_proc : process(ap_CS_fsm_state3, grp_init_1_fu_95_bucket_1_ce1, grp_local_scan_1_fu_118_bucket_1_ce1, grp_sum_scan_1_fu_126_bucket_1_ce1, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bucket_1_ce1 <= grp_sum_scan_1_fu_126_bucket_1_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_1_ce1 <= grp_local_scan_1_fu_118_bucket_1_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_1_ce1 <= grp_init_1_fu_95_bucket_1_ce1;
        else 
            bucket_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_1_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, grp_init_1_fu_95_bucket_1_d0, grp_hist_1_fu_103_bucket_1_d0, grp_local_scan_1_fu_118_bucket_1_d0, grp_last_step_scan_1_fu_138_bucket_1_d0, grp_update_1_fu_150_bucket_1_d0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            bucket_1_d0 <= grp_update_1_fu_150_bucket_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bucket_1_d0 <= grp_last_step_scan_1_fu_138_bucket_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_1_d0 <= grp_local_scan_1_fu_118_bucket_1_d0;
        elsif ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            bucket_1_d0 <= grp_hist_1_fu_103_bucket_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_1_d0 <= grp_init_1_fu_95_bucket_1_d0;
        else 
            bucket_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    bucket_1_d1 <= grp_init_1_fu_95_bucket_1_d1;

    bucket_1_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, grp_init_1_fu_95_bucket_1_we0, grp_hist_1_fu_103_bucket_1_we0, grp_local_scan_1_fu_118_bucket_1_we0, grp_last_step_scan_1_fu_138_bucket_1_we0, grp_update_1_fu_150_bucket_1_we0, valid_buffer_reg_70, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            bucket_1_we0 <= grp_update_1_fu_150_bucket_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bucket_1_we0 <= grp_last_step_scan_1_fu_138_bucket_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_1_we0 <= grp_local_scan_1_fu_118_bucket_1_we0;
        elsif ((((valid_buffer_reg_70 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((valid_buffer_reg_70 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            bucket_1_we0 <= grp_hist_1_fu_103_bucket_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_1_we0 <= grp_init_1_fu_95_bucket_1_we0;
        else 
            bucket_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_1_we1_assign_proc : process(ap_CS_fsm_state3, grp_init_1_fu_95_bucket_1_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_1_we1 <= grp_init_1_fu_95_bucket_1_we1;
        else 
            bucket_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exp_3_fu_193_p2 <= std_logic_vector(unsigned(exp_fu_66) + unsigned(ap_const_lv6_2));
    grp_hist_1_fu_103_ap_start <= grp_hist_1_fu_103_ap_start_reg;

    grp_hist_1_fu_103_b_0_q0_assign_proc : process(a_0_q0, b_0_q0, valid_buffer_reg_70, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((valid_buffer_reg_70 = ap_const_lv1_1)) then 
                grp_hist_1_fu_103_b_0_q0 <= b_0_q0;
            elsif ((valid_buffer_reg_70 = ap_const_lv1_0)) then 
                grp_hist_1_fu_103_b_0_q0 <= a_0_q0;
            else 
                grp_hist_1_fu_103_b_0_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_hist_1_fu_103_b_0_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_hist_1_fu_103_b_1_q0_assign_proc : process(a_1_q0, b_1_q0, valid_buffer_reg_70, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((valid_buffer_reg_70 = ap_const_lv1_1)) then 
                grp_hist_1_fu_103_b_1_q0 <= b_1_q0;
            elsif ((valid_buffer_reg_70 = ap_const_lv1_0)) then 
                grp_hist_1_fu_103_b_1_q0 <= a_1_q0;
            else 
                grp_hist_1_fu_103_b_1_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_hist_1_fu_103_b_1_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_init_1_fu_95_ap_start <= grp_init_1_fu_95_ap_start_reg;
    grp_last_step_scan_1_fu_138_ap_start <= grp_last_step_scan_1_fu_138_ap_start_reg;
    grp_local_scan_1_fu_118_ap_start <= grp_local_scan_1_fu_118_ap_start_reg;
    grp_sum_scan_1_fu_126_ap_start <= grp_sum_scan_1_fu_126_ap_start_reg;

    grp_update_1_fu_150_a_0_q0_assign_proc : process(a_0_q0, b_0_q0, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
            if ((valid_buffer_reg_70 = ap_const_lv1_1)) then 
                grp_update_1_fu_150_a_0_q0 <= a_0_q0;
            elsif ((valid_buffer_reg_70 = ap_const_lv1_0)) then 
                grp_update_1_fu_150_a_0_q0 <= b_0_q0;
            else 
                grp_update_1_fu_150_a_0_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_update_1_fu_150_a_0_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_update_1_fu_150_a_1_q0_assign_proc : process(a_1_q0, b_1_q0, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
            if ((valid_buffer_reg_70 = ap_const_lv1_1)) then 
                grp_update_1_fu_150_a_1_q0 <= a_1_q0;
            elsif ((valid_buffer_reg_70 = ap_const_lv1_0)) then 
                grp_update_1_fu_150_a_1_q0 <= b_1_q0;
            else 
                grp_update_1_fu_150_a_1_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_update_1_fu_150_a_1_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_update_1_fu_150_ap_start <= grp_update_1_fu_150_ap_start_reg;

    grp_update_1_fu_150_b_03_q0_assign_proc : process(a_0_q0, b_0_q0, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
            if ((valid_buffer_reg_70 = ap_const_lv1_1)) then 
                grp_update_1_fu_150_b_03_q0 <= b_0_q0;
            elsif ((valid_buffer_reg_70 = ap_const_lv1_0)) then 
                grp_update_1_fu_150_b_03_q0 <= a_0_q0;
            else 
                grp_update_1_fu_150_b_03_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_update_1_fu_150_b_03_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_update_1_fu_150_b_03_q1_assign_proc : process(a_0_q1, b_0_q1, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
            if ((valid_buffer_reg_70 = ap_const_lv1_1)) then 
                grp_update_1_fu_150_b_03_q1 <= b_0_q1;
            elsif ((valid_buffer_reg_70 = ap_const_lv1_0)) then 
                grp_update_1_fu_150_b_03_q1 <= a_0_q1;
            else 
                grp_update_1_fu_150_b_03_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_update_1_fu_150_b_03_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_update_1_fu_150_b_15_q0_assign_proc : process(a_1_q0, b_1_q0, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
            if ((valid_buffer_reg_70 = ap_const_lv1_1)) then 
                grp_update_1_fu_150_b_15_q0 <= b_1_q0;
            elsif ((valid_buffer_reg_70 = ap_const_lv1_0)) then 
                grp_update_1_fu_150_b_15_q0 <= a_1_q0;
            else 
                grp_update_1_fu_150_b_15_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_update_1_fu_150_b_15_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_update_1_fu_150_b_15_q1_assign_proc : process(a_1_q1, b_1_q1, valid_buffer_reg_70, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
            if ((valid_buffer_reg_70 = ap_const_lv1_1)) then 
                grp_update_1_fu_150_b_15_q1 <= b_1_q1;
            elsif ((valid_buffer_reg_70 = ap_const_lv1_0)) then 
                grp_update_1_fu_150_b_15_q1 <= a_1_q1;
            else 
                grp_update_1_fu_150_b_15_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_update_1_fu_150_b_15_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_0_address0_assign_proc : process(ap_CS_fsm_state12, grp_sum_scan_1_fu_126_sum_0_address0, grp_last_step_scan_1_fu_138_sum_0_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sum_0_address0 <= grp_last_step_scan_1_fu_138_sum_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sum_0_address0 <= grp_sum_scan_1_fu_126_sum_0_address0;
        else 
            sum_0_address0 <= "XXXXX";
        end if; 
    end process;

    sum_0_address1 <= grp_sum_scan_1_fu_126_sum_0_address1;

    sum_0_ce0_assign_proc : process(ap_CS_fsm_state12, grp_sum_scan_1_fu_126_sum_0_ce0, grp_last_step_scan_1_fu_138_sum_0_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sum_0_ce0 <= grp_last_step_scan_1_fu_138_sum_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sum_0_ce0 <= grp_sum_scan_1_fu_126_sum_0_ce0;
        else 
            sum_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_0_ce1_assign_proc : process(grp_sum_scan_1_fu_126_sum_0_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sum_0_ce1 <= grp_sum_scan_1_fu_126_sum_0_ce1;
        else 
            sum_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sum_0_d0 <= grp_sum_scan_1_fu_126_sum_0_d0;

    sum_0_we0_assign_proc : process(grp_sum_scan_1_fu_126_sum_0_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sum_0_we0 <= grp_sum_scan_1_fu_126_sum_0_we0;
        else 
            sum_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_1_address0_assign_proc : process(ap_CS_fsm_state12, grp_sum_scan_1_fu_126_sum_1_address0, grp_last_step_scan_1_fu_138_sum_1_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sum_1_address0 <= grp_last_step_scan_1_fu_138_sum_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sum_1_address0 <= grp_sum_scan_1_fu_126_sum_1_address0;
        else 
            sum_1_address0 <= "XXXXX";
        end if; 
    end process;

    sum_1_address1 <= grp_sum_scan_1_fu_126_sum_1_address1;

    sum_1_ce0_assign_proc : process(ap_CS_fsm_state12, grp_sum_scan_1_fu_126_sum_1_ce0, grp_last_step_scan_1_fu_138_sum_1_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sum_1_ce0 <= grp_last_step_scan_1_fu_138_sum_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sum_1_ce0 <= grp_sum_scan_1_fu_126_sum_1_ce0;
        else 
            sum_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_1_ce1_assign_proc : process(grp_sum_scan_1_fu_126_sum_1_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sum_1_ce1 <= grp_sum_scan_1_fu_126_sum_1_ce1;
        else 
            sum_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sum_1_d0 <= grp_sum_scan_1_fu_126_sum_1_d0;

    sum_1_we0_assign_proc : process(grp_sum_scan_1_fu_126_sum_1_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sum_1_we0 <= grp_sum_scan_1_fu_126_sum_1_we0;
        else 
            sum_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_179_p3 <= exp_fu_66(5 downto 5);
    trunc_ln84_1_fu_190_p1 <= exp_fu_66(5 - 1 downto 0);
    trunc_ln84_fu_187_p1 <= exp_fu_66(5 - 1 downto 0);
end behav;
