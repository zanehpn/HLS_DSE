-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ss_sort_init_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bucket_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_0_ce0 : OUT STD_LOGIC;
    bucket_0_we0 : OUT STD_LOGIC;
    bucket_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    bucket_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_0_ce1 : OUT STD_LOGIC;
    bucket_0_we1 : OUT STD_LOGIC;
    bucket_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    bucket_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_1_ce0 : OUT STD_LOGIC;
    bucket_1_we0 : OUT STD_LOGIC;
    bucket_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_1_ce1 : OUT STD_LOGIC;
    bucket_1_we1 : OUT STD_LOGIC;
    bucket_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of ss_sort_init_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv64_FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_fu_112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal i_1_reg_271 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_reg_276 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_132_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln_reg_280 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_fu_146_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_reg_288 : STD_LOGIC_VECTOR (0 downto 0);
    signal bucket_0_addr_reg_292 : STD_LOGIC_VECTOR (8 downto 0);
    signal bucket_1_addr_reg_297 : STD_LOGIC_VECTOR (8 downto 0);
    signal bucket_0_addr_4_reg_302 : STD_LOGIC_VECTOR (8 downto 0);
    signal bucket_1_addr_4_reg_307 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_fu_140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_2_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_50 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln45_fu_254_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_30_fu_124_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_fu_120_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln46_fu_154_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_3_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln46_1_fu_169_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln46_1_fu_175_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_1_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln46_fu_191_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln46_fu_197_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_5_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln46_3_fu_213_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln46_3_fu_219_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_4_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln46_2_fu_235_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln46_2_fu_241_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ss_sort_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component ss_sort_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_50 <= ap_const_lv12_0;
            elsif (((tmp_reg_276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_50 <= add_ln45_fu_254_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_112_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    and_ln_reg_280(5) <= and_ln_fu_132_p3(5);
                tmp_31_reg_288 <= ap_sig_allocacmp_i_1(10 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_31_fu_146_p3 = ap_const_lv1_0) and (tmp_fu_112_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    bucket_0_addr_4_reg_302(8 downto 1) <= zext_ln46_2_fu_160_p1(9 - 1 downto 0)(8 downto 1);
                bucket_0_addr_reg_292 <= zext_ln46_fu_140_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_31_fu_146_p3 = ap_const_lv1_1) and (tmp_fu_112_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    bucket_1_addr_4_reg_307(8 downto 1) <= zext_ln46_2_fu_160_p1(9 - 1 downto 0)(8 downto 1);
                bucket_1_addr_reg_297 <= zext_ln46_fu_140_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i_1_reg_271 <= ap_sig_allocacmp_i_1;
                tmp_reg_276 <= ap_sig_allocacmp_i_1(11 downto 11);
            end if;
        end if;
    end process;
    and_ln_reg_280(4 downto 0) <= "00000";
    bucket_0_addr_4_reg_302(0) <= '1';
    bucket_1_addr_4_reg_307(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_112_p3, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((tmp_fu_112_p3 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln45_fu_254_p2 <= std_logic_vector(unsigned(i_1_reg_271) + unsigned(ap_const_lv12_2));
    and_ln_fu_132_p3 <= (tmp_30_fu_124_p3 & ap_const_lv5_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_112_p3, ap_start_int)
    begin
        if (((tmp_fu_112_p3 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_state1, i_fu_50, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_50;
        end if; 
    end process;


    bucket_0_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_112_p3, ap_CS_fsm_state2, tmp_reg_276, tmp_31_fu_146_p3, tmp_31_reg_288, bucket_0_addr_4_reg_302, zext_ln46_2_fu_160_p1)
    begin
        if (((tmp_31_reg_288 = ap_const_lv1_0) and (tmp_reg_276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bucket_0_address0 <= bucket_0_addr_4_reg_302;
        elsif (((tmp_31_fu_146_p3 = ap_const_lv1_0) and (tmp_fu_112_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bucket_0_address0 <= zext_ln46_2_fu_160_p1(9 - 1 downto 0);
        else 
            bucket_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bucket_0_address1_assign_proc : process(ap_CS_fsm_state1, tmp_fu_112_p3, ap_CS_fsm_state2, tmp_reg_276, tmp_31_fu_146_p3, tmp_31_reg_288, bucket_0_addr_reg_292, zext_ln46_fu_140_p1)
    begin
        if (((tmp_31_reg_288 = ap_const_lv1_0) and (tmp_reg_276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bucket_0_address1 <= bucket_0_addr_reg_292;
        elsif (((tmp_31_fu_146_p3 = ap_const_lv1_0) and (tmp_fu_112_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bucket_0_address1 <= zext_ln46_fu_140_p1(9 - 1 downto 0);
        else 
            bucket_0_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    bucket_0_ce0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_112_p3, ap_CS_fsm_state2, tmp_reg_276, tmp_31_fu_146_p3, tmp_31_reg_288, ap_start_int)
    begin
        if ((((tmp_31_fu_146_p3 = ap_const_lv1_0) and (tmp_fu_112_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_31_reg_288 = ap_const_lv1_0) and (tmp_reg_276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            bucket_0_ce0 <= ap_const_logic_1;
        else 
            bucket_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_0_ce1_assign_proc : process(ap_CS_fsm_state1, tmp_fu_112_p3, ap_CS_fsm_state2, tmp_reg_276, tmp_31_fu_146_p3, tmp_31_reg_288, ap_start_int)
    begin
        if ((((tmp_31_fu_146_p3 = ap_const_lv1_0) and (tmp_fu_112_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_31_reg_288 = ap_const_lv1_0) and (tmp_reg_276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            bucket_0_ce1 <= ap_const_logic_1;
        else 
            bucket_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bucket_0_d0 <= (xor_ln46_3_fu_219_p2 and bucket_0_q0);
    bucket_0_d1 <= (xor_ln46_1_fu_175_p2 and bucket_0_q1);

    bucket_0_we0_assign_proc : process(ap_CS_fsm_state2, tmp_reg_276, tmp_31_reg_288)
    begin
        if (((tmp_31_reg_288 = ap_const_lv1_0) and (tmp_reg_276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bucket_0_we0 <= ap_const_logic_1;
        else 
            bucket_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_0_we1_assign_proc : process(ap_CS_fsm_state2, tmp_reg_276, tmp_31_reg_288)
    begin
        if (((tmp_31_reg_288 = ap_const_lv1_0) and (tmp_reg_276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bucket_0_we1 <= ap_const_logic_1;
        else 
            bucket_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_1_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_112_p3, ap_CS_fsm_state2, tmp_reg_276, tmp_31_fu_146_p3, tmp_31_reg_288, bucket_1_addr_4_reg_307, zext_ln46_2_fu_160_p1)
    begin
        if (((tmp_31_reg_288 = ap_const_lv1_1) and (tmp_reg_276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bucket_1_address0 <= bucket_1_addr_4_reg_307;
        elsif (((tmp_31_fu_146_p3 = ap_const_lv1_1) and (tmp_fu_112_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bucket_1_address0 <= zext_ln46_2_fu_160_p1(9 - 1 downto 0);
        else 
            bucket_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bucket_1_address1_assign_proc : process(ap_CS_fsm_state1, tmp_fu_112_p3, ap_CS_fsm_state2, tmp_reg_276, tmp_31_fu_146_p3, tmp_31_reg_288, bucket_1_addr_reg_297, zext_ln46_fu_140_p1)
    begin
        if (((tmp_31_reg_288 = ap_const_lv1_1) and (tmp_reg_276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bucket_1_address1 <= bucket_1_addr_reg_297;
        elsif (((tmp_31_fu_146_p3 = ap_const_lv1_1) and (tmp_fu_112_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bucket_1_address1 <= zext_ln46_fu_140_p1(9 - 1 downto 0);
        else 
            bucket_1_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    bucket_1_ce0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_112_p3, ap_CS_fsm_state2, tmp_reg_276, tmp_31_fu_146_p3, tmp_31_reg_288, ap_start_int)
    begin
        if ((((tmp_31_fu_146_p3 = ap_const_lv1_1) and (tmp_fu_112_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_31_reg_288 = ap_const_lv1_1) and (tmp_reg_276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            bucket_1_ce0 <= ap_const_logic_1;
        else 
            bucket_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_1_ce1_assign_proc : process(ap_CS_fsm_state1, tmp_fu_112_p3, ap_CS_fsm_state2, tmp_reg_276, tmp_31_fu_146_p3, tmp_31_reg_288, ap_start_int)
    begin
        if ((((tmp_31_fu_146_p3 = ap_const_lv1_1) and (tmp_fu_112_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_31_reg_288 = ap_const_lv1_1) and (tmp_reg_276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            bucket_1_ce1 <= ap_const_logic_1;
        else 
            bucket_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bucket_1_d0 <= (xor_ln46_2_fu_241_p2 and bucket_1_q0);
    bucket_1_d1 <= (xor_ln46_fu_197_p2 and bucket_1_q1);

    bucket_1_we0_assign_proc : process(ap_CS_fsm_state2, tmp_reg_276, tmp_31_reg_288)
    begin
        if (((tmp_31_reg_288 = ap_const_lv1_1) and (tmp_reg_276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bucket_1_we0 <= ap_const_logic_1;
        else 
            bucket_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_1_we1_assign_proc : process(ap_CS_fsm_state2, tmp_reg_276, tmp_31_reg_288)
    begin
        if (((tmp_31_reg_288 = ap_const_lv1_1) and (tmp_reg_276 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bucket_1_we1 <= ap_const_logic_1;
        else 
            bucket_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln46_fu_154_p2 <= (trunc_ln45_fu_120_p1 or ap_const_lv9_1);
    shl_ln46_1_fu_169_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln46_3_fu_166_p1(31-1 downto 0)))));
    shl_ln46_2_fu_235_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln46_4_fu_232_p1(31-1 downto 0)))));
    shl_ln46_3_fu_213_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln46_5_fu_210_p1(31-1 downto 0)))));
    shl_ln46_fu_191_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln46_1_fu_188_p1(31-1 downto 0)))));
    tmp_30_fu_124_p3 <= ap_sig_allocacmp_i_1(9 downto 9);
    tmp_31_fu_146_p3 <= ap_sig_allocacmp_i_1(10 downto 10);
    tmp_fu_112_p3 <= ap_sig_allocacmp_i_1(11 downto 11);
    trunc_ln45_fu_120_p1 <= ap_sig_allocacmp_i_1(9 - 1 downto 0);
    xor_ln46_1_fu_175_p2 <= (shl_ln46_1_fu_169_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln46_2_fu_241_p2 <= (shl_ln46_2_fu_235_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln46_3_fu_219_p2 <= (shl_ln46_3_fu_213_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln46_fu_197_p2 <= (shl_ln46_fu_191_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    zext_ln46_1_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_reg_280),64));
    zext_ln46_2_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln46_fu_154_p2),64));
    zext_ln46_3_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_reg_280),64));
    zext_ln46_4_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_reg_280),64));
    zext_ln46_5_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_reg_280),64));
    zext_ln46_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln45_fu_120_p1),64));
end behav;
