// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ss_sort_last_step_scan_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bucket_0_address0,
        bucket_0_ce0,
        bucket_0_we0,
        bucket_0_d0,
        bucket_0_q0,
        bucket_1_address0,
        bucket_1_ce0,
        bucket_1_we0,
        bucket_1_d0,
        bucket_1_q0,
        sum_0_address0,
        sum_0_ce0,
        sum_0_q0,
        sum_1_address0,
        sum_1_ce0,
        sum_1_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] bucket_0_address0;
output   bucket_0_ce0;
output   bucket_0_we0;
output  [63:0] bucket_0_d0;
input  [63:0] bucket_0_q0;
output  [8:0] bucket_1_address0;
output   bucket_1_ce0;
output   bucket_1_we0;
output  [63:0] bucket_1_d0;
input  [63:0] bucket_1_q0;
output  [4:0] sum_0_address0;
output   sum_0_ce0;
input  [63:0] sum_0_q0;
output  [4:0] sum_1_address0;
output   sum_1_ce0;
input  [63:0] sum_1_q0;

reg ap_idle;
reg[8:0] bucket_0_address0;
reg bucket_0_ce0;
reg bucket_0_we0;
reg[63:0] bucket_0_d0;
reg[8:0] bucket_1_address0;
reg bucket_1_ce0;
reg bucket_1_we0;
reg[63:0] bucket_1_d0;
reg sum_0_ce0;
reg sum_1_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln34_fu_196_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
reg   [63:0] reg_170;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
reg   [63:0] reg_174;
reg   [0:0] icmp_ln34_reg_666;
wire   [10:0] add_ln34_fu_202_p2;
reg   [10:0] add_ln34_reg_670;
wire   [4:0] select_ln34_fu_222_p3;
reg   [4:0] select_ln34_reg_675;
wire   [7:0] select_ln34_1_fu_236_p3;
reg   [7:0] select_ln34_1_reg_680;
wire   [4:0] trunc_ln34_fu_244_p1;
reg   [4:0] trunc_ln34_reg_685;
wire   [3:0] trunc_ln35_fu_248_p1;
reg   [3:0] trunc_ln35_reg_690;
reg   [0:0] tmp_25_reg_695;
wire   [5:0] tmp_15_fu_284_p3;
reg   [5:0] tmp_15_reg_701;
reg   [0:0] tmp_28_reg_719;
wire   [5:0] and_ln_fu_360_p3;
reg   [5:0] and_ln_reg_724;
reg   [8:0] bucket_0_addr_reg_730;
reg   [8:0] bucket_1_addr_reg_735;
wire   [63:0] zext_ln37_7_fu_374_p1;
reg   [63:0] zext_ln37_7_reg_740;
wire   [63:0] xor_ln37_fu_384_p2;
reg   [63:0] xor_ln37_reg_746;
wire   [63:0] zext_ln37_12_fu_390_p1;
reg   [63:0] zext_ln37_12_reg_752;
wire   [63:0] xor_ln37_1_fu_400_p2;
reg   [63:0] xor_ln37_1_reg_758;
wire   [31:0] tmp_16_fu_432_p4;
reg   [31:0] tmp_16_reg_764;
wire   [31:0] tmp_17_fu_467_p4;
reg   [31:0] tmp_17_reg_769;
wire   [1:0] and_ln37_1_fu_476_p3;
reg   [1:0] and_ln37_1_reg_775;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [8:0] bucket_0_addr_3_reg_780;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
reg   [8:0] bucket_1_addr_3_reg_785;
wire   [31:0] add_ln37_1_fu_582_p2;
reg   [31:0] add_ln37_1_reg_790;
wire   [63:0] zext_ln37_fu_292_p1;
wire   [63:0] zext_ln37_1_fu_368_p1;
wire   [63:0] zext_ln37_3_fu_541_p1;
reg   [4:0] i_fu_90;
wire   [4:0] add_ln35_fu_627_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_load;
reg   [7:0] radixID_fu_94;
reg   [7:0] ap_sig_allocacmp_radixID_load;
reg   [10:0] indvar_flatten_fu_98;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [63:0] or_ln37_2_fu_501_p2;
wire   [63:0] or_ln37_4_fu_600_p2;
wire   [63:0] or_ln37_1_fu_522_p2;
wire   [63:0] or_ln37_3_fu_620_p2;
wire   [0:0] tmp_fu_214_p3;
wire   [7:0] add_ln34_1_fu_230_p2;
wire   [6:0] empty_24_fu_256_p1;
wire   [0:0] tmp_26_fu_276_p3;
wire   [5:0] trunc_ln36_fu_298_p1;
wire   [10:0] zext_ln35_fu_252_p1;
wire   [10:0] tmp_s_fu_260_p3;
wire   [8:0] zext_ln36_1_fu_322_p1;
wire   [8:0] trunc_ln36_1_fu_310_p3;
wire   [9:0] zext_ln36_fu_318_p1;
wire   [9:0] trunc_ln5_fu_302_p3;
wire   [10:0] add_ln36_fu_326_p2;
wire   [9:0] add_ln37_3_fu_338_p2;
wire   [0:0] tmp_29_fu_352_p3;
wire   [8:0] add_ln37_2_fu_332_p2;
wire   [63:0] shl_ln37_fu_378_p2;
wire   [63:0] shl_ln37_3_fu_394_p2;
wire   [63:0] zext_ln37_2_fu_406_p1;
wire   [63:0] lshr_ln37_fu_409_p2;
wire   [63:0] zext_ln37_4_fu_419_p1;
wire   [63:0] lshr_ln37_1_fu_422_p2;
wire   [31:0] tmp_16_fu_432_p1;
wire   [31:0] tmp_16_fu_432_p2;
wire   [63:0] zext_ln37_5_fu_441_p1;
wire   [63:0] lshr_ln37_2_fu_444_p2;
wire   [63:0] zext_ln37_6_fu_454_p1;
wire   [63:0] lshr_ln37_3_fu_457_p2;
wire   [31:0] tmp_17_fu_467_p1;
wire   [31:0] tmp_17_fu_467_p2;
wire   [31:0] add_ln37_fu_483_p2;
wire   [63:0] zext_ln37_9_fu_492_p1;
wire   [63:0] and_ln37_2_fu_487_p2;
wire   [63:0] shl_ln37_2_fu_496_p2;
wire   [63:0] zext_ln37_8_fu_513_p1;
wire   [63:0] and_ln37_fu_508_p2;
wire   [63:0] shl_ln37_1_fu_517_p2;
wire   [3:0] or_ln37_fu_529_p2;
wire   [8:0] add_ln36_1_cast6_fu_534_p3;
wire   [63:0] zext_ln37_10_fu_547_p1;
wire   [63:0] lshr_ln37_4_fu_550_p2;
wire   [63:0] zext_ln37_11_fu_560_p1;
wire   [63:0] lshr_ln37_5_fu_563_p2;
wire   [31:0] tmp_18_fu_573_p1;
wire   [31:0] tmp_18_fu_573_p2;
wire   [31:0] tmp_18_fu_573_p4;
wire   [63:0] zext_ln37_14_fu_592_p1;
wire   [63:0] and_ln37_4_fu_587_p2;
wire   [63:0] shl_ln37_5_fu_595_p2;
wire   [63:0] zext_ln37_13_fu_612_p1;
wire   [63:0] and_ln37_3_fu_607_p2;
wire   [63:0] shl_ln37_4_fu_615_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_done_reg = 1'b0;
end

ss_sort_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U37(
    .din0(tmp_16_fu_432_p1),
    .din1(tmp_16_fu_432_p2),
    .din2(tmp_28_reg_719),
    .dout(tmp_16_fu_432_p4)
);

ss_sort_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U38(
    .din0(tmp_17_fu_467_p1),
    .din1(tmp_17_fu_467_p2),
    .din2(tmp_25_reg_695),
    .dout(tmp_17_fu_467_p4)
);

ss_sort_mux_22_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_22_32_1_1_U39(
    .din0(tmp_18_fu_573_p1),
    .din1(tmp_18_fu_573_p2),
    .din2(and_ln37_1_reg_775),
    .dout(tmp_18_fu_573_p4)
);

ss_sort_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        i_fu_90 <= 5'd0;
    end else if (((icmp_ln34_reg_666 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        i_fu_90 <= add_ln35_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_98 <= 11'd0;
    end else if (((icmp_ln34_reg_666 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        indvar_flatten_fu_98 <= add_ln34_reg_670;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        radixID_fu_94 <= 8'd0;
    end else if (((icmp_ln34_reg_666 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        radixID_fu_94 <= select_ln34_1_reg_680;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln34_reg_670 <= add_ln34_fu_202_p2;
        icmp_ln34_reg_666 <= icmp_ln34_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln37_1_reg_790 <= add_ln37_1_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        and_ln37_1_reg_775[0] <= and_ln37_1_fu_476_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        and_ln_reg_724[5] <= and_ln_fu_360_p3[5];
        bucket_0_addr_reg_730 <= zext_ln37_1_fu_368_p1;
        bucket_1_addr_reg_735 <= zext_ln37_1_fu_368_p1;
        select_ln34_1_reg_680 <= select_ln34_1_fu_236_p3;
        select_ln34_reg_675 <= select_ln34_fu_222_p3;
        tmp_15_reg_701[5] <= tmp_15_fu_284_p3[5];
        tmp_25_reg_695 <= select_ln34_1_fu_236_p3[32'd6];
        tmp_28_reg_719 <= add_ln36_fu_326_p2[32'd10];
        trunc_ln34_reg_685 <= trunc_ln34_fu_244_p1;
        trunc_ln35_reg_690 <= trunc_ln35_fu_248_p1;
        xor_ln37_1_reg_758 <= xor_ln37_1_fu_400_p2;
        xor_ln37_reg_746 <= xor_ln37_fu_384_p2;
        zext_ln37_12_reg_752[5] <= zext_ln37_12_fu_390_p1[5];
        zext_ln37_7_reg_740[5] <= zext_ln37_7_fu_374_p1[5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bucket_0_addr_3_reg_780[8 : 1] <= zext_ln37_3_fu_541_p1[8 : 1];
        bucket_1_addr_3_reg_785[8 : 1] <= zext_ln37_3_fu_541_p1[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_170 <= bucket_0_q0;
        reg_174 <= bucket_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_16_reg_764 <= tmp_16_fu_432_p4;
        tmp_17_reg_769 <= tmp_17_fu_467_p4;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln34_fu_196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_90;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_98;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_radixID_load = 8'd0;
    end else begin
        ap_sig_allocacmp_radixID_load = radixID_fu_94;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_666 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (tmp_25_reg_695 == 1'd0))) begin
        bucket_0_address0 = bucket_0_addr_3_reg_780;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        bucket_0_address0 = zext_ln37_3_fu_541_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_28_reg_719 == 1'd0))) begin
        bucket_0_address0 = bucket_0_addr_reg_730;
    end else if (((icmp_ln34_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        bucket_0_address0 = zext_ln37_1_fu_368_p1;
    end else begin
        bucket_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start_int == 1'b1) & (icmp_ln34_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln34_reg_666 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (tmp_25_reg_695 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_28_reg_719 == 1'd0)))) begin
        bucket_0_ce0 = 1'b1;
    end else begin
        bucket_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_666 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (tmp_25_reg_695 == 1'd0))) begin
        bucket_0_d0 = or_ln37_4_fu_600_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_28_reg_719 == 1'd0))) begin
        bucket_0_d0 = or_ln37_2_fu_501_p2;
    end else begin
        bucket_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln34_reg_666 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (tmp_25_reg_695 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_28_reg_719 == 1'd0)))) begin
        bucket_0_we0 = 1'b1;
    end else begin
        bucket_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_666 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (tmp_25_reg_695 == 1'd1))) begin
        bucket_1_address0 = bucket_1_addr_3_reg_785;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        bucket_1_address0 = zext_ln37_3_fu_541_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_28_reg_719 == 1'd1))) begin
        bucket_1_address0 = bucket_1_addr_reg_735;
    end else if (((icmp_ln34_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        bucket_1_address0 = zext_ln37_1_fu_368_p1;
    end else begin
        bucket_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start_int == 1'b1) & (icmp_ln34_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln34_reg_666 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (tmp_25_reg_695 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_28_reg_719 == 1'd1)))) begin
        bucket_1_ce0 = 1'b1;
    end else begin
        bucket_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_666 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (tmp_25_reg_695 == 1'd1))) begin
        bucket_1_d0 = or_ln37_3_fu_620_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_28_reg_719 == 1'd1))) begin
        bucket_1_d0 = or_ln37_1_fu_522_p2;
    end else begin
        bucket_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln34_reg_666 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (tmp_25_reg_695 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_28_reg_719 == 1'd1)))) begin
        bucket_1_we0 = 1'b1;
    end else begin
        bucket_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_0_ce0 = 1'b1;
    end else begin
        sum_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_1_ce0 = 1'b1;
    end else begin
        sum_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln34_fu_196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_1_fu_230_p2 = (ap_sig_allocacmp_radixID_load + 8'd1);

assign add_ln34_fu_202_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln35_fu_627_p2 = (select_ln34_reg_675 + 5'd2);

assign add_ln36_1_cast6_fu_534_p3 = {{trunc_ln34_reg_685}, {or_ln37_fu_529_p2}};

assign add_ln36_fu_326_p2 = (zext_ln35_fu_252_p1 + tmp_s_fu_260_p3);

assign add_ln37_1_fu_582_p2 = (tmp_18_fu_573_p4 + tmp_17_reg_769);

assign add_ln37_2_fu_332_p2 = (zext_ln36_1_fu_322_p1 + trunc_ln36_1_fu_310_p3);

assign add_ln37_3_fu_338_p2 = (zext_ln36_fu_318_p1 + trunc_ln5_fu_302_p3);

assign add_ln37_fu_483_p2 = (tmp_17_reg_769 + tmp_16_reg_764);

assign and_ln37_1_fu_476_p3 = {{1'd0}, {tmp_25_reg_695}};

assign and_ln37_2_fu_487_p2 = (xor_ln37_reg_746 & reg_170);

assign and_ln37_3_fu_607_p2 = (xor_ln37_1_reg_758 & reg_174);

assign and_ln37_4_fu_587_p2 = (xor_ln37_1_reg_758 & reg_170);

assign and_ln37_fu_508_p2 = (xor_ln37_reg_746 & reg_174);

assign and_ln_fu_360_p3 = {{tmp_29_fu_352_p3}, {5'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_24_fu_256_p1 = select_ln34_1_fu_236_p3[6:0];

assign icmp_ln34_fu_196_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1024) ? 1'b1 : 1'b0);

assign lshr_ln37_1_fu_422_p2 = bucket_1_q0 >> zext_ln37_4_fu_419_p1;

assign lshr_ln37_2_fu_444_p2 = sum_0_q0 >> zext_ln37_5_fu_441_p1;

assign lshr_ln37_3_fu_457_p2 = sum_1_q0 >> zext_ln37_6_fu_454_p1;

assign lshr_ln37_4_fu_550_p2 = bucket_0_q0 >> zext_ln37_10_fu_547_p1;

assign lshr_ln37_5_fu_563_p2 = bucket_1_q0 >> zext_ln37_11_fu_560_p1;

assign lshr_ln37_fu_409_p2 = bucket_0_q0 >> zext_ln37_2_fu_406_p1;

assign or_ln37_1_fu_522_p2 = (shl_ln37_1_fu_517_p2 | and_ln37_fu_508_p2);

assign or_ln37_2_fu_501_p2 = (shl_ln37_2_fu_496_p2 | and_ln37_2_fu_487_p2);

assign or_ln37_3_fu_620_p2 = (shl_ln37_4_fu_615_p2 | and_ln37_3_fu_607_p2);

assign or_ln37_4_fu_600_p2 = (shl_ln37_5_fu_595_p2 | and_ln37_4_fu_587_p2);

assign or_ln37_fu_529_p2 = (trunc_ln35_reg_690 | 4'd1);

assign select_ln34_1_fu_236_p3 = ((tmp_fu_214_p3[0:0] == 1'b1) ? add_ln34_1_fu_230_p2 : ap_sig_allocacmp_radixID_load);

assign select_ln34_fu_222_p3 = ((tmp_fu_214_p3[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_i_load);

assign shl_ln37_1_fu_517_p2 = zext_ln37_8_fu_513_p1 << zext_ln37_7_reg_740;

assign shl_ln37_2_fu_496_p2 = zext_ln37_9_fu_492_p1 << zext_ln37_7_reg_740;

assign shl_ln37_3_fu_394_p2 = 64'd4294967295 << zext_ln37_12_fu_390_p1;

assign shl_ln37_4_fu_615_p2 = zext_ln37_13_fu_612_p1 << zext_ln37_12_reg_752;

assign shl_ln37_5_fu_595_p2 = zext_ln37_14_fu_592_p1 << zext_ln37_12_reg_752;

assign shl_ln37_fu_378_p2 = 64'd4294967295 << zext_ln37_7_fu_374_p1;

assign sum_0_address0 = zext_ln37_fu_292_p1;

assign sum_1_address0 = zext_ln37_fu_292_p1;

assign tmp_15_fu_284_p3 = {{tmp_26_fu_276_p3}, {5'd0}};

assign tmp_16_fu_432_p1 = lshr_ln37_fu_409_p2[31:0];

assign tmp_16_fu_432_p2 = lshr_ln37_1_fu_422_p2[31:0];

assign tmp_17_fu_467_p1 = lshr_ln37_2_fu_444_p2[31:0];

assign tmp_17_fu_467_p2 = lshr_ln37_3_fu_457_p2[31:0];

assign tmp_18_fu_573_p1 = lshr_ln37_4_fu_550_p2[31:0];

assign tmp_18_fu_573_p2 = lshr_ln37_5_fu_563_p2[31:0];

assign tmp_26_fu_276_p3 = select_ln34_1_fu_236_p3[32'd5];

assign tmp_29_fu_352_p3 = add_ln37_3_fu_338_p2[32'd9];

assign tmp_fu_214_p3 = ap_sig_allocacmp_i_load[32'd4];

assign tmp_s_fu_260_p3 = {{empty_24_fu_256_p1}, {4'd0}};

assign trunc_ln34_fu_244_p1 = select_ln34_1_fu_236_p3[4:0];

assign trunc_ln35_fu_248_p1 = select_ln34_fu_222_p3[3:0];

assign trunc_ln36_1_fu_310_p3 = {{trunc_ln34_fu_244_p1}, {4'd0}};

assign trunc_ln36_fu_298_p1 = select_ln34_1_fu_236_p3[5:0];

assign trunc_ln5_fu_302_p3 = {{trunc_ln36_fu_298_p1}, {4'd0}};

assign xor_ln37_1_fu_400_p2 = (shl_ln37_3_fu_394_p2 ^ 64'd18446744073709551615);

assign xor_ln37_fu_384_p2 = (shl_ln37_fu_378_p2 ^ 64'd18446744073709551615);

assign zext_ln35_fu_252_p1 = select_ln34_fu_222_p3;

assign zext_ln36_1_fu_322_p1 = select_ln34_fu_222_p3;

assign zext_ln36_fu_318_p1 = select_ln34_fu_222_p3;

assign zext_ln37_10_fu_547_p1 = tmp_15_reg_701;

assign zext_ln37_11_fu_560_p1 = tmp_15_reg_701;

assign zext_ln37_12_fu_390_p1 = tmp_15_fu_284_p3;

assign zext_ln37_13_fu_612_p1 = add_ln37_1_reg_790;

assign zext_ln37_14_fu_592_p1 = add_ln37_1_reg_790;

assign zext_ln37_1_fu_368_p1 = add_ln37_2_fu_332_p2;

assign zext_ln37_2_fu_406_p1 = and_ln_reg_724;

assign zext_ln37_3_fu_541_p1 = add_ln36_1_cast6_fu_534_p3;

assign zext_ln37_4_fu_419_p1 = and_ln_reg_724;

assign zext_ln37_5_fu_441_p1 = tmp_15_reg_701;

assign zext_ln37_6_fu_454_p1 = tmp_15_reg_701;

assign zext_ln37_7_fu_374_p1 = and_ln_fu_360_p3;

assign zext_ln37_8_fu_513_p1 = add_ln37_fu_483_p2;

assign zext_ln37_9_fu_492_p1 = add_ln37_fu_483_p2;

assign zext_ln37_fu_292_p1 = trunc_ln34_fu_244_p1;

always @ (posedge ap_clk) begin
    tmp_15_reg_701[4:0] <= 5'b00000;
    and_ln_reg_724[4:0] <= 5'b00000;
    zext_ln37_7_reg_740[4:0] <= 5'b00000;
    zext_ln37_7_reg_740[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln37_12_reg_752[4:0] <= 5'b00000;
    zext_ln37_12_reg_752[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    and_ln37_1_reg_775[1] <= 1'b0;
    bucket_0_addr_3_reg_780[0] <= 1'b1;
    bucket_1_addr_3_reg_785[0] <= 1'b1;
end

endmodule //ss_sort_last_step_scan_1
