// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ss_sort_init_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bucket_0_address0,
        bucket_0_ce0,
        bucket_0_we0,
        bucket_0_d0,
        bucket_0_q0,
        bucket_0_address1,
        bucket_0_ce1,
        bucket_0_we1,
        bucket_0_d1,
        bucket_0_q1,
        bucket_1_address0,
        bucket_1_ce0,
        bucket_1_we0,
        bucket_1_d0,
        bucket_1_q0,
        bucket_1_address1,
        bucket_1_ce1,
        bucket_1_we1,
        bucket_1_d1,
        bucket_1_q1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] bucket_0_address0;
output   bucket_0_ce0;
output   bucket_0_we0;
output  [63:0] bucket_0_d0;
input  [63:0] bucket_0_q0;
output  [8:0] bucket_0_address1;
output   bucket_0_ce1;
output   bucket_0_we1;
output  [63:0] bucket_0_d1;
input  [63:0] bucket_0_q1;
output  [8:0] bucket_1_address0;
output   bucket_1_ce0;
output   bucket_1_we0;
output  [63:0] bucket_1_d0;
input  [63:0] bucket_1_q0;
output  [8:0] bucket_1_address1;
output   bucket_1_ce1;
output   bucket_1_we1;
output  [63:0] bucket_1_d1;
input  [63:0] bucket_1_q1;

reg ap_idle;
reg[8:0] bucket_0_address0;
reg bucket_0_ce0;
reg bucket_0_we0;
reg[8:0] bucket_0_address1;
reg bucket_0_ce1;
reg bucket_0_we1;
reg[8:0] bucket_1_address0;
reg bucket_1_ce0;
reg bucket_1_we0;
reg[8:0] bucket_1_address1;
reg bucket_1_ce1;
reg bucket_1_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_fu_112_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [11:0] i_1_reg_271;
reg   [0:0] tmp_reg_276;
wire   [5:0] and_ln_fu_132_p3;
reg   [5:0] and_ln_reg_280;
wire   [0:0] tmp_31_fu_146_p3;
reg   [0:0] tmp_31_reg_288;
reg   [8:0] bucket_0_addr_reg_292;
reg   [8:0] bucket_1_addr_reg_297;
reg   [8:0] bucket_0_addr_4_reg_302;
reg   [8:0] bucket_1_addr_4_reg_307;
wire   [63:0] zext_ln46_fu_140_p1;
wire   [63:0] zext_ln46_2_fu_160_p1;
reg   [11:0] i_fu_50;
wire   [11:0] add_ln45_fu_254_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_i_1;
wire   [0:0] tmp_30_fu_124_p3;
wire   [8:0] trunc_ln45_fu_120_p1;
wire   [8:0] or_ln46_fu_154_p2;
wire   [63:0] zext_ln46_3_fu_166_p1;
wire   [63:0] shl_ln46_1_fu_169_p2;
wire   [63:0] xor_ln46_1_fu_175_p2;
wire   [63:0] zext_ln46_1_fu_188_p1;
wire   [63:0] shl_ln46_fu_191_p2;
wire   [63:0] xor_ln46_fu_197_p2;
wire   [63:0] zext_ln46_5_fu_210_p1;
wire   [63:0] shl_ln46_3_fu_213_p2;
wire   [63:0] xor_ln46_3_fu_219_p2;
wire   [63:0] zext_ln46_4_fu_232_p1;
wire   [63:0] shl_ln46_2_fu_235_p2;
wire   [63:0] xor_ln46_2_fu_241_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

ss_sort_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_50 <= 12'd0;
    end else if (((tmp_reg_276 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_50 <= add_ln45_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_112_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        and_ln_reg_280[5] <= and_ln_fu_132_p3[5];
        tmp_31_reg_288 <= ap_sig_allocacmp_i_1[32'd10];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_31_fu_146_p3 == 1'd0) & (tmp_fu_112_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bucket_0_addr_4_reg_302[8 : 1] <= zext_ln46_2_fu_160_p1[8 : 1];
        bucket_0_addr_reg_292 <= zext_ln46_fu_140_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_31_fu_146_p3 == 1'd1) & (tmp_fu_112_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bucket_1_addr_4_reg_307[8 : 1] <= zext_ln46_2_fu_160_p1[8 : 1];
        bucket_1_addr_reg_297 <= zext_ln46_fu_140_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_reg_271 <= ap_sig_allocacmp_i_1;
        tmp_reg_276 <= ap_sig_allocacmp_i_1[32'd11];
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((tmp_fu_112_p3 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_1 = 12'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_50;
    end
end

always @ (*) begin
    if (((tmp_31_reg_288 == 1'd0) & (tmp_reg_276 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bucket_0_address0 = bucket_0_addr_4_reg_302;
    end else if (((tmp_31_fu_146_p3 == 1'd0) & (tmp_fu_112_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        bucket_0_address0 = zext_ln46_2_fu_160_p1;
    end else begin
        bucket_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_31_reg_288 == 1'd0) & (tmp_reg_276 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bucket_0_address1 = bucket_0_addr_reg_292;
    end else if (((tmp_31_fu_146_p3 == 1'd0) & (tmp_fu_112_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        bucket_0_address1 = zext_ln46_fu_140_p1;
    end else begin
        bucket_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_31_fu_146_p3 == 1'd0) & (tmp_fu_112_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_31_reg_288 == 1'd0) & (tmp_reg_276 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        bucket_0_ce0 = 1'b1;
    end else begin
        bucket_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_31_fu_146_p3 == 1'd0) & (tmp_fu_112_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_31_reg_288 == 1'd0) & (tmp_reg_276 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        bucket_0_ce1 = 1'b1;
    end else begin
        bucket_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_31_reg_288 == 1'd0) & (tmp_reg_276 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bucket_0_we0 = 1'b1;
    end else begin
        bucket_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_31_reg_288 == 1'd0) & (tmp_reg_276 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bucket_0_we1 = 1'b1;
    end else begin
        bucket_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_31_reg_288 == 1'd1) & (tmp_reg_276 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bucket_1_address0 = bucket_1_addr_4_reg_307;
    end else if (((tmp_31_fu_146_p3 == 1'd1) & (tmp_fu_112_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        bucket_1_address0 = zext_ln46_2_fu_160_p1;
    end else begin
        bucket_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_31_reg_288 == 1'd1) & (tmp_reg_276 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bucket_1_address1 = bucket_1_addr_reg_297;
    end else if (((tmp_31_fu_146_p3 == 1'd1) & (tmp_fu_112_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        bucket_1_address1 = zext_ln46_fu_140_p1;
    end else begin
        bucket_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_31_fu_146_p3 == 1'd1) & (tmp_fu_112_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_31_reg_288 == 1'd1) & (tmp_reg_276 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        bucket_1_ce0 = 1'b1;
    end else begin
        bucket_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_31_fu_146_p3 == 1'd1) & (tmp_fu_112_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_31_reg_288 == 1'd1) & (tmp_reg_276 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        bucket_1_ce1 = 1'b1;
    end else begin
        bucket_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_31_reg_288 == 1'd1) & (tmp_reg_276 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bucket_1_we0 = 1'b1;
    end else begin
        bucket_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_31_reg_288 == 1'd1) & (tmp_reg_276 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bucket_1_we1 = 1'b1;
    end else begin
        bucket_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((tmp_fu_112_p3 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_254_p2 = (i_1_reg_271 + 12'd2);

assign and_ln_fu_132_p3 = {{tmp_30_fu_124_p3}, {5'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bucket_0_d0 = (xor_ln46_3_fu_219_p2 & bucket_0_q0);

assign bucket_0_d1 = (xor_ln46_1_fu_175_p2 & bucket_0_q1);

assign bucket_1_d0 = (xor_ln46_2_fu_241_p2 & bucket_1_q0);

assign bucket_1_d1 = (xor_ln46_fu_197_p2 & bucket_1_q1);

assign or_ln46_fu_154_p2 = (trunc_ln45_fu_120_p1 | 9'd1);

assign shl_ln46_1_fu_169_p2 = 64'd4294967295 << zext_ln46_3_fu_166_p1;

assign shl_ln46_2_fu_235_p2 = 64'd4294967295 << zext_ln46_4_fu_232_p1;

assign shl_ln46_3_fu_213_p2 = 64'd4294967295 << zext_ln46_5_fu_210_p1;

assign shl_ln46_fu_191_p2 = 64'd4294967295 << zext_ln46_1_fu_188_p1;

assign tmp_30_fu_124_p3 = ap_sig_allocacmp_i_1[32'd9];

assign tmp_31_fu_146_p3 = ap_sig_allocacmp_i_1[32'd10];

assign tmp_fu_112_p3 = ap_sig_allocacmp_i_1[32'd11];

assign trunc_ln45_fu_120_p1 = ap_sig_allocacmp_i_1[8:0];

assign xor_ln46_1_fu_175_p2 = (shl_ln46_1_fu_169_p2 ^ 64'd18446744073709551615);

assign xor_ln46_2_fu_241_p2 = (shl_ln46_2_fu_235_p2 ^ 64'd18446744073709551615);

assign xor_ln46_3_fu_219_p2 = (shl_ln46_3_fu_213_p2 ^ 64'd18446744073709551615);

assign xor_ln46_fu_197_p2 = (shl_ln46_fu_191_p2 ^ 64'd18446744073709551615);

assign zext_ln46_1_fu_188_p1 = and_ln_reg_280;

assign zext_ln46_2_fu_160_p1 = or_ln46_fu_154_p2;

assign zext_ln46_3_fu_166_p1 = and_ln_reg_280;

assign zext_ln46_4_fu_232_p1 = and_ln_reg_280;

assign zext_ln46_5_fu_210_p1 = and_ln_reg_280;

assign zext_ln46_fu_140_p1 = trunc_ln45_fu_120_p1;

always @ (posedge ap_clk) begin
    and_ln_reg_280[4:0] <= 5'b00000;
    bucket_0_addr_4_reg_302[0] <= 1'b1;
    bucket_1_addr_4_reg_307[0] <= 1'b1;
end

endmodule //ss_sort_init_1
