-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ss_sort_hist_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bucket_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_0_ce0 : OUT STD_LOGIC;
    bucket_0_we0 : OUT STD_LOGIC;
    bucket_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    bucket_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_1_ce0 : OUT STD_LOGIC;
    bucket_1_we0 : OUT STD_LOGIC;
    bucket_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    b_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    b_0_ce0 : OUT STD_LOGIC;
    b_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    b_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    b_1_ce0 : OUT STD_LOGIC;
    b_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    exp : IN STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of ss_sort_hist_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln54_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal exp_cast_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exp_cast_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln54_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_fu_212_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_reg_603 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_fu_226_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln54_1_reg_610 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_25_fu_234_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_25_reg_615 : STD_LOGIC_VECTOR (8 downto 0);
    signal bucket_0_addr_reg_633 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal bucket_1_addr_reg_638 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_369_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_445_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln1_reg_648 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal bucket_0_load_reg_653 : STD_LOGIC_VECTOR (63 downto 0);
    signal bucket_1_load_reg_658 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_481_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_reg_668 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln57_1_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln58_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_fu_96 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln55_fu_499_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (2 downto 0);
    signal blockID_fu_100 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_blockID_load : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_fu_104 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln54_fu_194_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln55_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_1_fu_220_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln56_fu_238_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln56_1_fu_250_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln56_1_fu_242_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_fu_254_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln52_fu_291_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln55_1_fu_276_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_279_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln56_fu_302_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln56_fu_286_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln56_fu_305_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln57_1_fu_311_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_33_fu_325_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_333_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln57_2_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln57_fu_345_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_4_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln57_1_fu_359_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_369_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ashr_ln57_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln57_2_fu_389_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_393_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln57_fu_401_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln57_3_fu_407_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln55_fu_379_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln57_3_fu_411_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln57_fu_382_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal bucket_indx_fu_415_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln52_1_fu_421_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_fu_437_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln58_1_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln58_fu_457_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_2_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln58_1_fu_471_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_481_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln58_3_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln58_fu_517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln58_fu_523_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln58_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln58_5_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln58_1_fu_529_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln58_2_fu_538_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_4_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln58_fu_551_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln58_1_fu_560_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ss_sort_mux_21_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ss_sort_mux_22_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ss_sort_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_21_32_1_1_U3 : component ss_sort_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_19_fu_369_p1,
        din1 => tmp_19_fu_369_p2,
        din2 => tmp_19_fu_369_p3,
        dout => tmp_19_fu_369_p4);

    mux_22_32_1_1_U4 : component ss_sort_mux_22_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_20_fu_481_p1,
        din1 => tmp_20_fu_481_p2,
        din2 => tmp_20_fu_481_p3,
        dout => tmp_20_fu_481_p4);

    flow_control_loop_pipe_sequential_init_U : component ss_sort_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    blockID_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln54_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    blockID_fu_100 <= select_ln54_1_fu_226_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    blockID_fu_100 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_96 <= ap_const_lv3_0;
            elsif (((icmp_ln54_reg_599 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                i_fu_96 <= add_ln55_fu_499_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln54_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_104 <= add_ln54_fu_194_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_104 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_599 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                bucket_0_addr_reg_633 <= zext_ln58_fu_296_p1(9 - 1 downto 0);
                bucket_1_addr_reg_638 <= zext_ln58_fu_296_p1(9 - 1 downto 0);
                tmp_19_reg_643 <= tmp_19_fu_369_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_599 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                bucket_0_load_reg_653 <= bucket_0_q0;
                bucket_1_load_reg_658 <= bucket_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_25_reg_615 <= empty_25_fu_234_p1;
                select_ln54_1_reg_610 <= select_ln54_1_fu_226_p3;
                select_ln54_reg_603 <= select_ln54_fu_212_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    exp_cast_reg_594(4 downto 0) <= exp_cast_fu_166_p1(4 downto 0);
                icmp_ln54_reg_599 <= icmp_ln54_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_599 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    shl_ln1_reg_648(5) <= shl_ln1_fu_445_p3(5);
                tmp_20_reg_663 <= tmp_20_fu_481_p4;
                tmp_35_reg_668 <= bucket_indx_fu_415_p2(10 downto 10);
            end if;
        end if;
    end process;
    exp_cast_reg_594(31 downto 5) <= "000000000000000000000000000";
    shl_ln1_reg_648(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage2_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln52_1_fu_421_p2 <= std_logic_vector(unsigned(trunc_ln57_3_fu_411_p1) + unsigned(zext_ln57_fu_382_p1));
    add_ln52_fu_291_p2 <= std_logic_vector(unsigned(empty_25_reg_615) + unsigned(ap_const_lv9_1));
    add_ln54_1_fu_220_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_blockID_load) + unsigned(ap_const_lv10_1));
    add_ln54_fu_194_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv12_1));
    add_ln55_fu_499_p2 <= std_logic_vector(unsigned(select_ln54_reg_603) + unsigned(ap_const_lv3_1));
    add_ln56_fu_305_p2 <= std_logic_vector(unsigned(zext_ln55_1_fu_276_p1) + unsigned(tmp_s_fu_279_p3));
    add_ln57_1_fu_311_p2 <= std_logic_vector(unsigned(zext_ln56_fu_302_p1) + unsigned(shl_ln56_fu_286_p2));
    add_ln57_fu_254_p2 <= std_logic_vector(unsigned(zext_ln56_1_fu_250_p1) + unsigned(trunc_ln56_1_fu_242_p3));
    add_ln58_fu_509_p2 <= std_logic_vector(unsigned(tmp_20_reg_663) + unsigned(ap_const_lv32_1));
    and_ln58_1_fu_529_p2 <= (xor_ln58_fu_523_p2 and bucket_0_load_reg_653);
    and_ln58_fu_551_p2 <= (xor_ln58_fu_523_p2 and bucket_1_load_reg_658);
    and_ln_fu_333_p3 <= (tmp_33_fu_325_p3 & ap_const_lv5_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln54_fu_188_p2)
    begin
        if (((icmp_ln54_fu_188_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_blockID_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, blockID_fu_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_blockID_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_blockID_load <= blockID_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_96, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_104)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_104;
        end if; 
    end process;

    ashr_ln57_fu_385_p2 <= std_logic_vector(shift_right(signed(tmp_19_reg_643),to_integer(unsigned('0' & exp_cast_reg_594(31-1 downto 0)))));
    b_0_address0 <= zext_ln57_1_fu_260_p1(9 - 1 downto 0);

    b_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_0_ce0 <= ap_const_logic_1;
        else 
            b_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_1_address0 <= zext_ln57_1_fu_260_p1(9 - 1 downto 0);

    b_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_1_ce0 <= ap_const_logic_1;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, bucket_0_addr_reg_633, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln58_fu_296_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_0_address0 <= bucket_0_addr_reg_633;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bucket_0_address0 <= zext_ln58_fu_296_p1(9 - 1 downto 0);
        else 
            bucket_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bucket_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            bucket_0_ce0 <= ap_const_logic_1;
        else 
            bucket_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bucket_0_d0 <= (shl_ln58_2_fu_538_p2 or and_ln58_1_fu_529_p2);

    bucket_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, tmp_35_reg_668)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_35_reg_668 = ap_const_lv1_0))) then 
            bucket_0_we0 <= ap_const_logic_1;
        else 
            bucket_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, bucket_1_addr_reg_638, ap_block_pp0_stage0, zext_ln58_fu_296_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bucket_1_address0 <= bucket_1_addr_reg_638;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bucket_1_address0 <= zext_ln58_fu_296_p1(9 - 1 downto 0);
        else 
            bucket_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bucket_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            bucket_1_ce0 <= ap_const_logic_1;
        else 
            bucket_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bucket_1_d0 <= (shl_ln58_1_fu_560_p2 or and_ln58_fu_551_p2);

    bucket_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, tmp_35_reg_668)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_35_reg_668 = ap_const_lv1_1))) then 
            bucket_1_we0 <= ap_const_logic_1;
        else 
            bucket_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bucket_indx_fu_415_p2 <= std_logic_vector(unsigned(zext_ln57_3_fu_407_p1) + unsigned(zext_ln55_fu_379_p1));
    empty_25_fu_234_p1 <= select_ln54_1_fu_226_p3(9 - 1 downto 0);
    exp_cast_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp),32));
    icmp_ln54_fu_188_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv12_800) else "0";
    icmp_ln55_fu_206_p2 <= "1" when (ap_sig_allocacmp_i_load = ap_const_lv3_4) else "0";
    lshr_ln57_1_fu_359_p2 <= std_logic_vector(shift_right(unsigned(b_1_q0),to_integer(unsigned('0' & zext_ln57_4_fu_355_p1(31-1 downto 0)))));
    lshr_ln57_fu_345_p2 <= std_logic_vector(shift_right(unsigned(b_0_q0),to_integer(unsigned('0' & zext_ln57_2_fu_341_p1(31-1 downto 0)))));
    lshr_ln58_1_fu_471_p2 <= std_logic_vector(shift_right(unsigned(bucket_1_q0),to_integer(unsigned('0' & zext_ln58_2_fu_467_p1(31-1 downto 0)))));
    lshr_ln58_fu_457_p2 <= std_logic_vector(shift_right(unsigned(bucket_0_q0),to_integer(unsigned('0' & zext_ln58_1_fu_453_p1(31-1 downto 0)))));
    or_ln57_fu_401_p2 <= (shl_ln_fu_393_p3 or ap_const_lv11_1);
    select_ln54_1_fu_226_p3 <= 
        add_ln54_1_fu_220_p2 when (icmp_ln55_fu_206_p2(0) = '1') else 
        ap_sig_allocacmp_blockID_load;
    select_ln54_fu_212_p3 <= 
        ap_const_lv3_0 when (icmp_ln55_fu_206_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    shl_ln1_fu_445_p3 <= (tmp_34_fu_437_p3 & ap_const_lv5_0);
    shl_ln56_fu_286_p2 <= std_logic_vector(shift_left(unsigned(select_ln54_1_reg_610),to_integer(unsigned('0' & ap_const_lv10_2(10-1 downto 0)))));
    shl_ln58_1_fu_560_p2 <= std_logic_vector(shift_left(unsigned(zext_ln58_4_fu_556_p1),to_integer(unsigned('0' & zext_ln58_3_fu_514_p1(31-1 downto 0)))));
    shl_ln58_2_fu_538_p2 <= std_logic_vector(shift_left(unsigned(zext_ln58_5_fu_534_p1),to_integer(unsigned('0' & zext_ln58_3_fu_514_p1(31-1 downto 0)))));
    shl_ln58_fu_517_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln58_3_fu_514_p1(31-1 downto 0)))));
    shl_ln_fu_393_p3 <= (trunc_ln57_2_fu_389_p1 & ap_const_lv9_0);
    tmp_19_fu_369_p1 <= lshr_ln57_fu_345_p2(32 - 1 downto 0);
    tmp_19_fu_369_p2 <= lshr_ln57_1_fu_359_p2(32 - 1 downto 0);
    tmp_19_fu_369_p3 <= add_ln56_fu_305_p2(10 downto 10);
    tmp_20_fu_481_p1 <= lshr_ln58_fu_457_p2(32 - 1 downto 0);
    tmp_20_fu_481_p2 <= lshr_ln58_1_fu_471_p2(32 - 1 downto 0);
    tmp_20_fu_481_p3 <= bucket_indx_fu_415_p2(11 downto 10);
    tmp_33_fu_325_p3 <= add_ln57_1_fu_311_p2(9 downto 9);
    tmp_34_fu_437_p3 <= add_ln52_1_fu_421_p2(9 downto 9);
    tmp_s_fu_279_p3 <= (empty_25_reg_615 & ap_const_lv2_0);
    trunc_ln56_1_fu_242_p3 <= (trunc_ln56_fu_238_p1 & ap_const_lv2_0);
    trunc_ln56_fu_238_p1 <= select_ln54_1_fu_226_p3(7 - 1 downto 0);
    trunc_ln57_2_fu_389_p1 <= ashr_ln57_fu_385_p2(2 - 1 downto 0);
    trunc_ln57_3_fu_411_p1 <= or_ln57_fu_401_p2(10 - 1 downto 0);
    xor_ln58_fu_523_p2 <= (shl_ln58_fu_517_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    zext_ln55_1_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_reg_603),11));
    zext_ln55_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_25_reg_615),12));
    zext_ln56_1_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_fu_212_p3),9));
    zext_ln56_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_reg_603),10));
    zext_ln57_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_254_p2),64));
    zext_ln57_2_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_333_p3),64));
    zext_ln57_3_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln57_fu_401_p2),12));
    zext_ln57_4_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_333_p3),64));
    zext_ln57_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_25_reg_615),10));
    zext_ln58_1_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_445_p3),64));
    zext_ln58_2_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_445_p3),64));
    zext_ln58_3_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_reg_648),64));
    zext_ln58_4_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_fu_509_p2),64));
    zext_ln58_5_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_fu_509_p2),64));
    zext_ln58_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_fu_291_p2),64));
end behav;
