-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ss_sort_sum_scan_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sum_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_0_ce0 : OUT STD_LOGIC;
    sum_0_we0 : OUT STD_LOGIC;
    sum_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sum_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_0_ce1 : OUT STD_LOGIC;
    sum_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_1_ce0 : OUT STD_LOGIC;
    sum_1_we0 : OUT STD_LOGIC;
    sum_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sum_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_1_ce1 : OUT STD_LOGIC;
    sum_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_0_ce0 : OUT STD_LOGIC;
    bucket_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_0_ce1 : OUT STD_LOGIC;
    bucket_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_1_ce0 : OUT STD_LOGIC;
    bucket_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_1_ce1 : OUT STD_LOGIC;
    bucket_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of ss_sort_sum_scan_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sum_0_addr_reg_65 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_start : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_done : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_idle : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_ready : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_ce0 : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_we0 : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_ce1 : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_ce0 : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_we0 : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_ce1 : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_0_ce0 : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_0_ce1 : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_1_ce0 : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_1_ce1 : STD_LOGIC;
    signal grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp1_fu_52_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ss_sort_sum_scan_1_Pipeline_sum_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sum_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sum_0_ce0 : OUT STD_LOGIC;
        sum_0_we0 : OUT STD_LOGIC;
        sum_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        sum_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sum_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sum_0_ce1 : OUT STD_LOGIC;
        sum_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        sum_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sum_1_ce0 : OUT STD_LOGIC;
        sum_1_we0 : OUT STD_LOGIC;
        sum_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        sum_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sum_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sum_1_ce1 : OUT STD_LOGIC;
        sum_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_0_ce0 : OUT STD_LOGIC;
        bucket_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_0_ce1 : OUT STD_LOGIC;
        bucket_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_1_ce0 : OUT STD_LOGIC;
        bucket_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bucket_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bucket_1_ce1 : OUT STD_LOGIC;
        bucket_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_sum_scan_1_Pipeline_sum_1_fu_40 : component ss_sort_sum_scan_1_Pipeline_sum_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_start,
        ap_done => grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_done,
        ap_idle => grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_idle,
        ap_ready => grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_ready,
        sum_0_address0 => grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_address0,
        sum_0_ce0 => grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_ce0,
        sum_0_we0 => grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_we0,
        sum_0_d0 => grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_d0,
        sum_0_q0 => sum_0_q0,
        sum_0_address1 => grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_address1,
        sum_0_ce1 => grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_ce1,
        sum_0_q1 => sum_0_q1,
        sum_1_address0 => grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_address0,
        sum_1_ce0 => grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_ce0,
        sum_1_we0 => grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_we0,
        sum_1_d0 => grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_d0,
        sum_1_q0 => sum_1_q0,
        sum_1_address1 => grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_address1,
        sum_1_ce1 => grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_ce1,
        sum_1_q1 => sum_1_q1,
        bucket_0_address0 => grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_0_address0,
        bucket_0_ce0 => grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_0_ce0,
        bucket_0_q0 => bucket_0_q0,
        bucket_0_address1 => grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_0_address1,
        bucket_0_ce1 => grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_0_ce1,
        bucket_0_q1 => bucket_0_q1,
        bucket_1_address0 => grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_1_address0,
        bucket_1_ce0 => grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_1_ce0,
        bucket_1_q0 => bucket_1_q0,
        bucket_1_address1 => grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_1_address1,
        bucket_1_ce1 => grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_1_ce1,
        bucket_1_q1 => bucket_1_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_ready = ap_const_logic_1)) then 
                    grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_done)
    begin
        if ((grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_done, ap_CS_fsm_state4)
    begin
        if ((((grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bucket_0_address0 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_0_address0;
    bucket_0_address1 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_0_address1;
    bucket_0_ce0 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_0_ce0;
    bucket_0_ce1 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_0_ce1;
    bucket_1_address0 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_1_address0;
    bucket_1_address1 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_1_address1;
    bucket_1_ce0 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_1_ce0;
    bucket_1_ce1 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_bucket_1_ce1;
    grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_start <= grp_sum_scan_1_Pipeline_sum_1_fu_40_ap_start_reg;
    sum_0_addr_reg_65 <= ap_const_lv64_0(5 - 1 downto 0);

    sum_0_address0_assign_proc : process(ap_CS_fsm_state1, sum_0_addr_reg_65, grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_0_address0 <= sum_0_addr_reg_65;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            sum_0_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sum_0_address0 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_address0;
        else 
            sum_0_address0 <= "XXXXX";
        end if; 
    end process;

    sum_0_address1 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_address1;

    sum_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            sum_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sum_0_ce0 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_ce0;
        else 
            sum_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_0_ce1_assign_proc : process(grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sum_0_ce1 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_ce1;
        else 
            sum_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_0_d0_assign_proc : process(grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_d0, ap_CS_fsm_state2, ap_CS_fsm_state4, tmp1_fu_52_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_0_d0 <= tmp1_fu_52_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sum_0_d0 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_d0;
        else 
            sum_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_0_we0_assign_proc : process(grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_we0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sum_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sum_0_we0 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_0_we0;
        else 
            sum_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_1_address0 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_address0;
    sum_1_address1 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_address1;
    sum_1_ce0 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_ce0;
    sum_1_ce1 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_ce1;
    sum_1_d0 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_d0;
    sum_1_we0 <= grp_sum_scan_1_Pipeline_sum_1_fu_40_sum_1_we0;
    tmp1_fu_52_p5 <= (sum_0_q0(63 downto 32) & ap_const_lv32_0);
end behav;
