-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ss_sort_sum_scan_1_Pipeline_sum_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sum_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_0_ce0 : OUT STD_LOGIC;
    sum_0_we0 : OUT STD_LOGIC;
    sum_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sum_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_0_ce1 : OUT STD_LOGIC;
    sum_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_1_ce0 : OUT STD_LOGIC;
    sum_1_we0 : OUT STD_LOGIC;
    sum_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sum_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sum_1_ce1 : OUT STD_LOGIC;
    sum_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_0_ce0 : OUT STD_LOGIC;
    bucket_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_0_ce1 : OUT STD_LOGIC;
    bucket_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_1_ce0 : OUT STD_LOGIC;
    bucket_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bucket_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bucket_1_ce1 : OUT STD_LOGIC;
    bucket_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of ss_sort_sum_scan_1_Pipeline_sum_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv10_3F0 : STD_LOGIC_VECTOR (9 downto 0) := "1111110000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv64_80 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln25_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal reg_230 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_17_reg_933 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_20_reg_981 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_235 : STD_LOGIC_VECTOR (63 downto 0);
    signal radixID_0_load_reg_880 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_reg_887 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln27_3_reg_917 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_16_reg_922 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln27_5_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_5_reg_927 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_348_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_0_addr_1_reg_937 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_1_addr_1_reg_942 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln25_2_fu_366_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln25_2_reg_947 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln25_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln27_4_reg_956 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_18_reg_961 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_1_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_1_reg_985 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_0_load_1_reg_991 : STD_LOGIC_VECTOR (63 downto 0);
    signal bucket_1_load_1_reg_996 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_0_addr_3_reg_1001 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_1_addr_3_reg_1007 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln27_2_fu_615_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln27_2_reg_1013 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_23_1_fu_731_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_1_reg_1019 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal add_ln27_2_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_2_reg_1034 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln27_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln27_3_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_7_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_9_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal radixID_0_fu_94 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln25_1_fu_863_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal or_ln27_1_fu_653_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal or_ln27_3_fu_818_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_ln27_fu_691_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln27_2_fu_856_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_21_fu_252_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_248_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln26_1_fu_264_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln27_5_fu_284_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_4_fu_278_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln_fu_256_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_2_fu_304_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln27_3_fu_272_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln25_fu_356_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_fu_360_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln26_fu_396_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln26_4_fu_408_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln26_1_fu_390_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln26_3_fu_412_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_1_fu_420_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln26_2_fu_400_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_3_fu_442_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln27_6_fu_426_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln25_3_fu_372_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln25_4_fu_378_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln26_fu_478_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln27_fu_489_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln_fu_504_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln27_1_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln27_fu_515_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_2_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln27_2_fu_529_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_539_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal add_ln26_fu_483_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln27_1_fu_559_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln27_4_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln27_5_fu_570_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_6_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln27_6_fu_584_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_594_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_13_fu_594_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_539_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln27_11_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln27_2_fu_626_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln27_1_fu_632_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_12_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln27_5_fu_638_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln27_3_fu_647_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_8_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln27_fu_664_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln27_fu_670_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_10_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln27_fu_676_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln27_1_fu_685_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln27_3_fu_698_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln27_15_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln27_9_fu_709_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_16_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln27_10_fu_722_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_1_fu_731_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_1_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln27_13_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln27_7_fu_743_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_14_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln27_8_fu_756_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_1_fu_766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_1_fu_766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_1_fu_766_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln27_4_fu_780_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln27_19_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln27_6_fu_791_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln27_3_fu_797_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_20_fu_809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln27_7_fu_803_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln27_7_fu_812_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_17_fu_825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln27_4_fu_829_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln27_2_fu_835_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_18_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln27_6_fu_841_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln27_5_fu_850_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_744 : BOOLEAN;
    signal ap_condition_748 : BOOLEAN;
    signal ap_condition_751 : BOOLEAN;
    signal ap_condition_754 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component ss_sort_mux_258_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (57 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ss_sort_mux_254_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (53 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ss_sort_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_258_32_1_1_U24 : component ss_sort_mux_258_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 58,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_s_fu_539_p1,
        din1 => tmp_s_fu_539_p2,
        din2 => tmp_s_fu_539_p3,
        dout => tmp_s_fu_539_p4);

    mux_254_32_1_1_U25 : component ss_sort_mux_254_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 54,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_13_fu_594_p1,
        din1 => tmp_13_fu_594_p2,
        din2 => tmp_13_fu_594_p3,
        dout => tmp_13_fu_594_p4);

    mux_254_32_1_1_U26 : component ss_sort_mux_254_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 54,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_23_1_fu_731_p1,
        din1 => tmp_23_1_fu_731_p2,
        din2 => lshr_ln27_4_reg_956,
        dout => tmp_23_1_fu_731_p4);

    mux_258_32_1_1_U27 : component ss_sort_mux_258_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 58,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_20_1_fu_766_p1,
        din1 => tmp_20_1_fu_766_p2,
        din2 => lshr_ln27_3_reg_917,
        dout => tmp_20_1_fu_766_p4);

    flow_control_loop_pipe_sequential_init_U : component ss_sort_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    radixID_0_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    radixID_0_fu_94 <= ap_const_lv64_1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    radixID_0_fu_94 <= add_ln25_1_fu_863_p2;
                end if;
            end if; 
        end if;
    end process;

    reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_748)) then 
                    reg_230 <= sum_0_q1;
                elsif ((ap_const_boolean_1 = ap_condition_744)) then 
                    reg_230 <= sum_0_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_754)) then 
                    reg_235 <= sum_1_q1;
                elsif ((ap_const_boolean_1 = ap_condition_751)) then 
                    reg_235 <= sum_1_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln25_2_reg_947 <= add_ln25_2_fu_366_p2;
                icmp_ln25_reg_952 <= icmp_ln25_fu_384_p2;
                lshr_ln27_3_reg_917 <= radixID_0_fu_94(63 downto 6);
                radixID_0_load_reg_880 <= radixID_0_fu_94;
                tmp_15_reg_902 <= add_ln26_2_fu_304_p2(9 downto 9);
                tmp_16_reg_922 <= radixID_0_fu_94(5 downto 5);
                tmp_17_reg_933 <= radixID_0_fu_94(6 downto 6);
                tmp_reg_887 <= add_ln27_5_fu_284_p2(5 downto 5);
                    zext_ln27_5_reg_927(4 downto 0) <= zext_ln27_5_fu_342_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln27_1_reg_985 <= add_ln27_1_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                add_ln27_2_reg_1034 <= add_ln27_2_fu_775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    and_ln27_2_reg_1013(5) <= and_ln27_2_fu_615_p3(5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_952 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                bucket_0_load_1_reg_991 <= bucket_0_q0;
                bucket_1_load_1_reg_996 <= bucket_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln25_fu_384_p2 = ap_const_lv1_0))) then
                lshr_ln27_4_reg_956 <= add_ln26_1_fu_420_p2(63 downto 10);
                tmp_18_reg_961 <= add_ln26_3_fu_442_p2(9 downto 9);
                tmp_19_reg_976 <= add_ln25_3_fu_372_p2(5 downto 5);
                tmp_20_reg_981 <= add_ln25_4_fu_378_p2(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_17_fu_348_p3 = ap_const_lv1_0))) then
                sum_0_addr_1_reg_937 <= zext_ln27_5_fu_342_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_952 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_20_reg_981 = ap_const_lv1_0))) then
                sum_0_addr_3_reg_1001 <= zext_ln27_9_fu_610_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_17_fu_348_p3 = ap_const_lv1_1))) then
                sum_1_addr_1_reg_942 <= zext_ln27_5_fu_342_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_952 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_20_reg_981 = ap_const_lv1_1))) then
                sum_1_addr_3_reg_1007 <= zext_ln27_9_fu_610_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_952 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_23_1_reg_1019 <= tmp_23_1_fu_731_p4;
            end if;
        end if;
    end process;
    zext_ln27_5_reg_927(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    and_ln27_2_reg_1013(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_condition_exit_pp0_iter0_stage3, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln25_1_fu_863_p2 <= std_logic_vector(unsigned(radixID_0_load_reg_880) + unsigned(ap_const_lv64_2));
    add_ln25_2_fu_366_p2 <= std_logic_vector(unsigned(empty_fu_248_p1) + unsigned(ap_const_lv5_1));
    add_ln25_3_fu_372_p2 <= std_logic_vector(unsigned(empty_21_fu_252_p1) + unsigned(ap_const_lv6_1));
    add_ln25_4_fu_378_p2 <= std_logic_vector(unsigned(trunc_ln25_fu_356_p1) + unsigned(ap_const_lv7_1));
    add_ln25_fu_360_p2 <= std_logic_vector(unsigned(radixID_0_fu_94) + unsigned(ap_const_lv64_1));
    add_ln26_1_fu_420_p2 <= std_logic_vector(unsigned(shl_ln26_1_fu_390_p2) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    add_ln26_2_fu_304_p2 <= std_logic_vector(unsigned(trunc_ln_fu_256_p3) + unsigned(ap_const_lv10_3F0));
    add_ln26_3_fu_442_p2 <= std_logic_vector(unsigned(trunc_ln26_2_fu_400_p3) + unsigned(ap_const_lv10_3F0));
    add_ln26_fu_483_p2 <= std_logic_vector(unsigned(shl_ln26_fu_478_p2) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    add_ln27_1_fu_604_p2 <= std_logic_vector(unsigned(tmp_13_fu_594_p4) + unsigned(tmp_s_fu_539_p4));
    add_ln27_2_fu_775_p2 <= std_logic_vector(unsigned(tmp_23_1_reg_1019) + unsigned(tmp_20_1_fu_766_p4));
    add_ln27_3_fu_272_p2 <= std_logic_vector(unsigned(trunc_ln26_1_fu_264_p3) + unsigned(ap_const_lv9_1FF));
    add_ln27_4_fu_278_p2 <= std_logic_vector(unsigned(empty_fu_248_p1) + unsigned(ap_const_lv5_1F));
    add_ln27_5_fu_284_p2 <= std_logic_vector(unsigned(empty_21_fu_252_p1) + unsigned(ap_const_lv6_3F));
    add_ln27_6_fu_426_p2 <= std_logic_vector(unsigned(trunc_ln26_3_fu_412_p3) + unsigned(ap_const_lv9_1FF));
    add_ln27_fu_489_p2 <= std_logic_vector(unsigned(radixID_0_load_reg_880) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    and_ln27_1_fu_559_p3 <= (tmp_15_reg_902 & ap_const_lv5_0);
    and_ln27_2_fu_615_p3 <= (tmp_16_reg_922 & ap_const_lv5_0);
    and_ln27_3_fu_698_p3 <= (tmp_18_reg_961 & ap_const_lv5_0);
    and_ln27_4_fu_780_p3 <= (tmp_19_reg_976 & ap_const_lv5_0);
    and_ln27_5_fu_638_p2 <= (xor_ln27_1_fu_632_p2 and reg_230);
    and_ln27_6_fu_841_p2 <= (xor_ln27_2_fu_835_p2 and reg_235);
    and_ln27_7_fu_803_p2 <= (xor_ln27_3_fu_797_p2 and reg_230);
    and_ln27_fu_676_p2 <= (xor_ln27_fu_670_p2 and reg_235);
    and_ln_fu_504_p3 <= (tmp_reg_887 & ap_const_lv5_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_744_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, tmp_17_reg_933)
    begin
                ap_condition_744 <= ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_17_reg_933 = ap_const_lv1_0));
    end process;


    ap_condition_748_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln25_reg_952, ap_block_pp0_stage3_11001, tmp_20_reg_981)
    begin
                ap_condition_748 <= ((icmp_ln25_reg_952 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_20_reg_981 = ap_const_lv1_0));
    end process;


    ap_condition_751_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, tmp_17_reg_933)
    begin
                ap_condition_751 <= ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_17_reg_933 = ap_const_lv1_1));
    end process;


    ap_condition_754_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln25_reg_952, ap_block_pp0_stage3_11001, tmp_20_reg_981)
    begin
                ap_condition_754 <= ((icmp_ln25_reg_952 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_20_reg_981 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln25_reg_952)
    begin
        if (((icmp_ln25_reg_952 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bucket_0_address0 <= zext_ln27_7_fu_456_p1(9 - 1 downto 0);
    bucket_0_address1 <= zext_ln27_3_fu_318_p1(9 - 1 downto 0);

    bucket_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bucket_0_ce0 <= ap_const_logic_1;
        else 
            bucket_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bucket_0_ce1 <= ap_const_logic_1;
        else 
            bucket_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bucket_1_address0 <= zext_ln27_7_fu_456_p1(9 - 1 downto 0);
    bucket_1_address1 <= zext_ln27_3_fu_318_p1(9 - 1 downto 0);

    bucket_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bucket_1_ce0 <= ap_const_logic_1;
        else 
            bucket_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bucket_1_ce1 <= ap_const_logic_1;
        else 
            bucket_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_21_fu_252_p1 <= radixID_0_fu_94(6 - 1 downto 0);
    empty_fu_248_p1 <= radixID_0_fu_94(5 - 1 downto 0);
    icmp_ln25_fu_384_p2 <= "1" when (add_ln25_fu_360_p2 = ap_const_lv64_80) else "0";
    lshr_ln27_10_fu_722_p2 <= std_logic_vector(shift_right(unsigned(bucket_1_load_1_reg_996),to_integer(unsigned('0' & zext_ln27_16_fu_718_p1(31-1 downto 0)))));
    lshr_ln27_2_fu_529_p2 <= std_logic_vector(shift_right(unsigned(sum_1_q1),to_integer(unsigned('0' & zext_ln27_2_fu_525_p1(31-1 downto 0)))));
    lshr_ln27_5_fu_570_p2 <= std_logic_vector(shift_right(unsigned(bucket_0_q1),to_integer(unsigned('0' & zext_ln27_4_fu_566_p1(31-1 downto 0)))));
    lshr_ln27_6_fu_584_p2 <= std_logic_vector(shift_right(unsigned(bucket_1_q1),to_integer(unsigned('0' & zext_ln27_6_fu_580_p1(31-1 downto 0)))));
    lshr_ln27_7_fu_743_p2 <= std_logic_vector(shift_right(unsigned(sum_0_q1),to_integer(unsigned('0' & zext_ln27_13_fu_740_p1(31-1 downto 0)))));
    lshr_ln27_8_fu_756_p2 <= std_logic_vector(shift_right(unsigned(sum_1_q1),to_integer(unsigned('0' & zext_ln27_14_fu_753_p1(31-1 downto 0)))));
    lshr_ln27_9_fu_709_p2 <= std_logic_vector(shift_right(unsigned(bucket_0_load_1_reg_991),to_integer(unsigned('0' & zext_ln27_15_fu_705_p1(31-1 downto 0)))));
    lshr_ln27_fu_515_p2 <= std_logic_vector(shift_right(unsigned(sum_0_q1),to_integer(unsigned('0' & zext_ln27_1_fu_511_p1(31-1 downto 0)))));
    or_ln27_1_fu_653_p2 <= (shl_ln27_3_fu_647_p2 or and_ln27_5_fu_638_p2);
    or_ln27_2_fu_856_p2 <= (shl_ln27_5_fu_850_p2 or and_ln27_6_fu_841_p2);
    or_ln27_3_fu_818_p2 <= (shl_ln27_7_fu_812_p2 or and_ln27_7_fu_803_p2);
    or_ln27_fu_691_p2 <= (shl_ln27_1_fu_685_p2 or and_ln27_fu_676_p2);
    shl_ln26_1_fu_390_p2 <= std_logic_vector(shift_left(unsigned(add_ln25_fu_360_p2),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    shl_ln26_fu_478_p2 <= std_logic_vector(shift_left(unsigned(radixID_0_load_reg_880),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    shl_ln27_1_fu_685_p2 <= std_logic_vector(shift_left(unsigned(zext_ln27_10_fu_682_p1),to_integer(unsigned('0' & zext_ln27_8_fu_660_p1(31-1 downto 0)))));
    shl_ln27_2_fu_626_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln27_11_fu_622_p1(31-1 downto 0)))));
    shl_ln27_3_fu_647_p2 <= std_logic_vector(shift_left(unsigned(zext_ln27_12_fu_644_p1),to_integer(unsigned('0' & zext_ln27_11_fu_622_p1(31-1 downto 0)))));
    shl_ln27_4_fu_829_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln27_17_fu_825_p1(31-1 downto 0)))));
    shl_ln27_5_fu_850_p2 <= std_logic_vector(shift_left(unsigned(zext_ln27_18_fu_847_p1),to_integer(unsigned('0' & zext_ln27_17_fu_825_p1(31-1 downto 0)))));
    shl_ln27_6_fu_791_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln27_19_fu_787_p1(31-1 downto 0)))));
    shl_ln27_7_fu_812_p2 <= std_logic_vector(shift_left(unsigned(zext_ln27_20_fu_809_p1),to_integer(unsigned('0' & zext_ln27_19_fu_787_p1(31-1 downto 0)))));
    shl_ln27_fu_664_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln27_8_fu_660_p1(31-1 downto 0)))));

    sum_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, zext_ln27_5_fu_342_p1, sum_0_addr_1_reg_937, sum_0_addr_3_reg_1001, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_0_address0 <= sum_0_addr_3_reg_1001;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            sum_0_address0 <= sum_0_addr_1_reg_937;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sum_0_address0 <= zext_ln27_5_fu_342_p1(5 - 1 downto 0);
        else 
            sum_0_address0 <= "XXXXX";
        end if; 
    end process;


    sum_0_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, zext_ln27_5_reg_927, ap_CS_fsm_pp0_stage4, zext_ln27_fu_298_p1, ap_block_pp0_stage1, zext_ln27_9_fu_610_p1, ap_block_pp0_stage2, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                sum_0_address1 <= zext_ln27_5_reg_927(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                sum_0_address1 <= zext_ln27_9_fu_610_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                sum_0_address1 <= zext_ln27_fu_298_p1(5 - 1 downto 0);
            else 
                sum_0_address1 <= "XXXXX";
            end if;
        else 
            sum_0_address1 <= "XXXXX";
        end if; 
    end process;


    sum_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            sum_0_ce0 <= ap_const_logic_1;
        else 
            sum_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            sum_0_ce1 <= ap_const_logic_1;
        else 
            sum_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_0_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, or_ln27_1_fu_653_p2, ap_block_pp0_stage3, or_ln27_3_fu_818_p2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_0_d0 <= or_ln27_3_fu_818_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            sum_0_d0 <= or_ln27_1_fu_653_p2;
        else 
            sum_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_17_reg_933, ap_block_pp0_stage3_11001, tmp_20_reg_981, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_20_reg_981 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_17_reg_933 = ap_const_lv1_0)))) then 
            sum_0_we0 <= ap_const_logic_1;
        else 
            sum_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, zext_ln27_5_fu_342_p1, sum_1_addr_1_reg_942, sum_1_addr_3_reg_1007, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_1_address0 <= sum_1_addr_3_reg_1007;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            sum_1_address0 <= sum_1_addr_1_reg_942;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sum_1_address0 <= zext_ln27_5_fu_342_p1(5 - 1 downto 0);
        else 
            sum_1_address0 <= "XXXXX";
        end if; 
    end process;


    sum_1_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, zext_ln27_5_reg_927, ap_CS_fsm_pp0_stage4, zext_ln27_fu_298_p1, ap_block_pp0_stage1, zext_ln27_9_fu_610_p1, ap_block_pp0_stage2, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                sum_1_address1 <= zext_ln27_5_reg_927(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                sum_1_address1 <= zext_ln27_9_fu_610_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                sum_1_address1 <= zext_ln27_fu_298_p1(5 - 1 downto 0);
            else 
                sum_1_address1 <= "XXXXX";
            end if;
        else 
            sum_1_address1 <= "XXXXX";
        end if; 
    end process;


    sum_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            sum_1_ce0 <= ap_const_logic_1;
        else 
            sum_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            sum_1_ce1 <= ap_const_logic_1;
        else 
            sum_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_1_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage0, or_ln27_fu_691_p2, or_ln27_2_fu_856_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_1_d0 <= or_ln27_2_fu_856_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            sum_1_d0 <= or_ln27_fu_691_p2;
        else 
            sum_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_17_reg_933, ap_block_pp0_stage3_11001, tmp_20_reg_981, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_20_reg_981 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_17_reg_933 = ap_const_lv1_1)))) then 
            sum_1_we0 <= ap_const_logic_1;
        else 
            sum_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_13_fu_594_p1 <= lshr_ln27_5_fu_570_p2(32 - 1 downto 0);
    tmp_13_fu_594_p2 <= lshr_ln27_6_fu_584_p2(32 - 1 downto 0);
    tmp_13_fu_594_p3 <= add_ln26_fu_483_p2(63 downto 10);
    tmp_17_fu_348_p3 <= radixID_0_fu_94(6 downto 6);
    tmp_20_1_fu_766_p1 <= lshr_ln27_7_fu_743_p2(32 - 1 downto 0);
    tmp_20_1_fu_766_p2 <= lshr_ln27_8_fu_756_p2(32 - 1 downto 0);
    tmp_23_1_fu_731_p1 <= lshr_ln27_9_fu_709_p2(32 - 1 downto 0);
    tmp_23_1_fu_731_p2 <= lshr_ln27_10_fu_722_p2(32 - 1 downto 0);
    tmp_s_fu_539_p1 <= lshr_ln27_fu_515_p2(32 - 1 downto 0);
    tmp_s_fu_539_p2 <= lshr_ln27_2_fu_529_p2(32 - 1 downto 0);
    tmp_s_fu_539_p3 <= add_ln27_fu_489_p2(63 downto 6);
    trunc_ln25_fu_356_p1 <= radixID_0_fu_94(7 - 1 downto 0);
    trunc_ln26_1_fu_264_p3 <= (empty_fu_248_p1 & ap_const_lv4_0);
    trunc_ln26_2_fu_400_p3 <= (trunc_ln26_fu_396_p1 & ap_const_lv4_0);
    trunc_ln26_3_fu_412_p3 <= (trunc_ln26_4_fu_408_p1 & ap_const_lv4_0);
    trunc_ln26_4_fu_408_p1 <= add_ln25_fu_360_p2(5 - 1 downto 0);
    trunc_ln26_fu_396_p1 <= add_ln25_fu_360_p2(6 - 1 downto 0);
    trunc_ln_fu_256_p3 <= (empty_21_fu_252_p1 & ap_const_lv4_0);
    xor_ln27_1_fu_632_p2 <= (shl_ln27_2_fu_626_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln27_2_fu_835_p2 <= (shl_ln27_4_fu_829_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln27_3_fu_797_p2 <= (shl_ln27_6_fu_791_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln27_fu_670_p2 <= (shl_ln27_fu_664_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    zext_ln27_10_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_1_reg_985),64));
    zext_ln27_11_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln27_2_fu_615_p3),64));
    zext_ln27_12_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_1_reg_985),64));
    zext_ln27_13_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln27_2_reg_1013),64));
    zext_ln27_14_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln27_2_reg_1013),64));
    zext_ln27_15_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln27_3_fu_698_p3),64));
    zext_ln27_16_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln27_3_fu_698_p3),64));
    zext_ln27_17_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln27_4_fu_780_p3),64));
    zext_ln27_18_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_2_reg_1034),64));
    zext_ln27_19_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln27_4_fu_780_p3),64));
    zext_ln27_1_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_504_p3),64));
    zext_ln27_20_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_2_reg_1034),64));
    zext_ln27_2_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_504_p3),64));
    zext_ln27_3_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_3_fu_272_p2),64));
    zext_ln27_4_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln27_1_fu_559_p3),64));
    zext_ln27_5_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_248_p1),64));
    zext_ln27_6_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln27_1_fu_559_p3),64));
    zext_ln27_7_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_6_fu_426_p2),64));
    zext_ln27_8_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln27_2_fu_615_p3),64));
    zext_ln27_9_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_2_reg_947),64));
    zext_ln27_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_4_fu_278_p2),64));
end behav;
