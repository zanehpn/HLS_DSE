// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ms_mergesort_ms_mergesort_Pipeline_merge_label31 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_11,
        trunc_ln2,
        temp_address0,
        temp_ce0,
        temp_q0,
        temp_1_address0,
        temp_1_ce0,
        temp_1_q0,
        a_address0,
        a_ce0,
        a_we0,
        a_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] i_11;
input  [31:0] trunc_ln2;
output  [8:0] temp_address0;
output   temp_ce0;
input  [63:0] temp_q0;
output  [8:0] temp_1_address0;
output   temp_1_ce0;
input  [63:0] temp_1_q0;
output  [10:0] a_address0;
output   a_ce0;
output   a_we0;
output  [31:0] a_d0;

reg ap_idle;
reg[8:0] temp_address0;
reg temp_ce0;
reg[8:0] temp_1_address0;
reg temp_1_ce0;
reg a_ce0;
reg a_we0;
reg[31:0] a_d0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln18_fu_167_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
reg   [63:0] k_1_reg_409;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] i_1_reg_415;
reg   [31:0] j_1_reg_424;
wire   [31:0] tmp_j_fu_250_p4;
reg   [31:0] tmp_j_reg_445;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] tmp_i_fu_336_p4;
reg   [31:0] tmp_i_reg_461;
wire    ap_block_pp0_stage3_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln19_fu_183_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln20_fu_269_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln25_fu_353_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] k_fu_64;
wire   [63:0] add_ln18_fu_378_p2;
wire    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
reg   [31:0] i_fu_68;
wire   [31:0] i_2_fu_358_p2;
wire   [0:0] icmp_ln21_fu_346_p2;
reg   [31:0] j_fu_72;
wire   [31:0] j_2_fu_368_p2;
wire   [8:0] trunc_ln19_4_fu_173_p4;
wire   [0:0] tmp_1_fu_196_p3;
wire   [5:0] tmp_2_fu_206_p3;
wire   [63:0] zext_ln19_1_fu_214_p1;
wire   [63:0] lshr_ln19_fu_218_p2;
wire   [0:0] tmp_fu_189_p3;
wire   [5:0] tmp_3_fu_228_p3;
wire   [63:0] zext_ln19_2_fu_236_p1;
wire   [63:0] lshr_ln19_1_fu_240_p2;
wire   [31:0] tmp_j_fu_250_p1;
wire   [31:0] tmp_j_fu_250_p2;
wire   [0:0] tmp_j_fu_250_p3;
wire   [8:0] trunc_ln20_4_fu_260_p4;
wire    ap_block_pp0_stage3;
wire   [0:0] tmp_5_fu_282_p3;
wire   [5:0] tmp_6_fu_292_p3;
wire   [63:0] zext_ln20_1_fu_300_p1;
wire   [63:0] lshr_ln20_fu_304_p2;
wire   [0:0] tmp_4_fu_275_p3;
wire   [5:0] tmp_7_fu_314_p3;
wire   [63:0] zext_ln20_2_fu_322_p1;
wire   [63:0] lshr_ln20_1_fu_326_p2;
wire   [31:0] tmp_i_fu_336_p1;
wire   [31:0] tmp_i_fu_336_p2;
wire   [0:0] tmp_i_fu_336_p3;
wire   [10:0] trunc_ln25_fu_350_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_150;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

ms_mergesort_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U1(
    .din0(tmp_j_fu_250_p1),
    .din1(tmp_j_fu_250_p2),
    .din2(tmp_j_fu_250_p3),
    .dout(tmp_j_fu_250_p4)
);

ms_mergesort_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U2(
    .din0(tmp_i_fu_336_p1),
    .din1(tmp_i_fu_336_p2),
    .din2(tmp_i_fu_336_p3),
    .dout(tmp_i_fu_336_p4)
);

ms_mergesort_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= trunc_ln2;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln21_fu_346_p2 == 1'd0))) begin
            i_fu_68 <= i_2_fu_358_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_72 <= 32'd2048;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln21_fu_346_p2 == 1'd1))) begin
            j_fu_72 <= j_2_fu_368_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_64 <= i_11;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            k_fu_64 <= add_ln18_fu_378_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_1_reg_415 <= i_fu_68;
        j_1_reg_424 <= j_fu_72;
        k_1_reg_409 <= k_fu_64;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_i_reg_461 <= tmp_i_fu_336_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_j_reg_445 <= tmp_j_fu_250_p4;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln21_fu_346_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln21_fu_346_p2 == 1'd0)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_150)) begin
        if ((icmp_ln21_fu_346_p2 == 1'd1)) begin
            a_d0 = tmp_j_reg_445;
        end else if ((icmp_ln21_fu_346_p2 == 1'd0)) begin
            a_d0 = tmp_i_reg_461;
        end else begin
            a_d0 = 'bx;
        end
    end else begin
        a_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln21_fu_346_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln21_fu_346_p2 == 1'd0)))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_167_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            temp_1_address0 = zext_ln20_fu_269_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            temp_1_address0 = zext_ln19_fu_183_p1;
        end else begin
            temp_1_address0 = 'bx;
        end
    end else begin
        temp_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        temp_1_ce0 = 1'b1;
    end else begin
        temp_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            temp_address0 = zext_ln20_fu_269_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            temp_address0 = zext_ln19_fu_183_p1;
        end else begin
            temp_address0 = 'bx;
        end
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln25_fu_353_p1;

assign add_ln18_fu_378_p2 = (k_1_reg_409 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_150 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign i_2_fu_358_p2 = (i_1_reg_415 + 32'd1);

assign icmp_ln18_fu_167_p2 = (($signed(k_fu_64) < $signed(64'd2049)) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_346_p2 = (($signed(tmp_j_reg_445) < $signed(tmp_i_reg_461)) ? 1'b1 : 1'b0);

assign j_2_fu_368_p2 = ($signed(j_1_reg_424) + $signed(32'd4294967295));

assign lshr_ln19_1_fu_240_p2 = temp_1_q0 >> zext_ln19_2_fu_236_p1;

assign lshr_ln19_fu_218_p2 = temp_q0 >> zext_ln19_1_fu_214_p1;

assign lshr_ln20_1_fu_326_p2 = temp_1_q0 >> zext_ln20_2_fu_322_p1;

assign lshr_ln20_fu_304_p2 = temp_q0 >> zext_ln20_1_fu_300_p1;

assign tmp_1_fu_196_p3 = j_1_reg_424[32'd10];

assign tmp_2_fu_206_p3 = {{tmp_1_fu_196_p3}, {5'd0}};

assign tmp_3_fu_228_p3 = {{tmp_fu_189_p3}, {5'd0}};

assign tmp_4_fu_275_p3 = i_1_reg_415[32'd10];

assign tmp_5_fu_282_p3 = i_1_reg_415[32'd10];

assign tmp_6_fu_292_p3 = {{tmp_5_fu_282_p3}, {5'd0}};

assign tmp_7_fu_314_p3 = {{tmp_4_fu_275_p3}, {5'd0}};

assign tmp_fu_189_p3 = j_1_reg_424[32'd10];

assign tmp_i_fu_336_p1 = lshr_ln20_fu_304_p2[31:0];

assign tmp_i_fu_336_p2 = lshr_ln20_1_fu_326_p2[31:0];

assign tmp_i_fu_336_p3 = i_1_reg_415[0:0];

assign tmp_j_fu_250_p1 = lshr_ln19_fu_218_p2[31:0];

assign tmp_j_fu_250_p2 = lshr_ln19_1_fu_240_p2[31:0];

assign tmp_j_fu_250_p3 = j_1_reg_424[0:0];

assign trunc_ln19_4_fu_173_p4 = {{j_fu_72[9:1]}};

assign trunc_ln20_4_fu_260_p4 = {{i_1_reg_415[9:1]}};

assign trunc_ln25_fu_350_p1 = k_1_reg_409[10:0];

assign zext_ln19_1_fu_214_p1 = tmp_2_fu_206_p3;

assign zext_ln19_2_fu_236_p1 = tmp_3_fu_228_p3;

assign zext_ln19_fu_183_p1 = trunc_ln19_4_fu_173_p4;

assign zext_ln20_1_fu_300_p1 = tmp_6_fu_292_p3;

assign zext_ln20_2_fu_322_p1 = tmp_7_fu_314_p3;

assign zext_ln20_fu_269_p1 = trunc_ln20_4_fu_260_p4;

assign zext_ln25_fu_353_p1 = trunc_ln25_fu_350_p1;

endmodule //ms_mergesort_ms_mergesort_Pipeline_merge_label31
