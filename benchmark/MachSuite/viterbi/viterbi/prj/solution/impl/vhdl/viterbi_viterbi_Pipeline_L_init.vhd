-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity viterbi_viterbi_Pipeline_L_init is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    llike_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    llike_ce0 : OUT STD_LOGIC;
    llike_we0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    llike_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    init_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    init_0_ce0 : OUT STD_LOGIC;
    init_0_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    init_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    init_1_ce0 : OUT STD_LOGIC;
    init_1_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    zext_ln13 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln14_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln14_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    emission_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    emission_0_ce0 : OUT STD_LOGIC;
    emission_0_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    emission_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    emission_1_ce0 : OUT STD_LOGIC;
    emission_1_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    grp_fu_249_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_249_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_249_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_249_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_249_p_ce : OUT STD_LOGIC );
end;


architecture behav of viterbi_viterbi_Pipeline_L_init is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln13_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln13_cast_fu_190_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln13_cast_reg_445 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal s_1_reg_450 : STD_LOGIC_VECTOR (6 downto 0);
    signal s_1_reg_450_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal s_1_reg_450_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal s_1_reg_450_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal s_1_reg_450_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal s_1_reg_450_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal s_1_reg_450_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_reg_472 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_333_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_487 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_416_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal add6_reg_497 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln14_1_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_1_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_fu_92 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln13_fu_208_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_s_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln13_fu_214_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln14_5_fu_224_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln14_2_fu_236_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln14_5_cast_fu_186_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln14_1_fu_228_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln14_3_cast_fu_182_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_2_fu_250_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_1_fu_244_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_282_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_289_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln14_2_fu_297_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln14_fu_301_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln14_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_6_fu_315_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln14_2_fu_319_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln14_3_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_333_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_333_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln14_4_fu_343_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln14_1_fu_346_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_4_fu_354_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln14_fu_358_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln14_2_fu_373_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln14_7_fu_380_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln14_3_fu_384_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln14_6_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_8_fu_398_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln14_4_fu_402_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln14_7_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_416_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_416_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal bitcast_ln14_4_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component viterbi_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component viterbi_mux_21_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component viterbi_mux_22_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component viterbi_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_21_64_1_1_U2 : component viterbi_mux_21_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 1,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_2_fu_333_p1,
        din1 => tmp_2_fu_333_p2,
        din2 => tmp_2_fu_333_p3,
        dout => tmp_2_fu_333_p4);

    mux_22_64_1_1_U3 : component viterbi_mux_22_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_5_fu_416_p1,
        din1 => tmp_5_fu_416_p2,
        din2 => tmp_5_fu_416_p3,
        dout => tmp_5_fu_416_p4);

    flow_control_loop_pipe_sequential_init_U : component viterbi_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    s_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln13_fu_202_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    s_fu_92 <= add_ln13_fu_208_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    s_fu_92 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add6_reg_497 <= grp_fu_249_p_dout0;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                s_1_reg_450_pp0_iter2_reg <= s_1_reg_450_pp0_iter1_reg;
                s_1_reg_450_pp0_iter3_reg <= s_1_reg_450_pp0_iter2_reg;
                s_1_reg_450_pp0_iter4_reg <= s_1_reg_450_pp0_iter3_reg;
                s_1_reg_450_pp0_iter5_reg <= s_1_reg_450_pp0_iter4_reg;
                s_1_reg_450_pp0_iter6_reg <= s_1_reg_450_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                s_1_reg_450 <= ap_sig_allocacmp_s_1;
                s_1_reg_450_pp0_iter1_reg <= s_1_reg_450;
                tmp_2_reg_487 <= tmp_2_fu_333_p4;
                tmp_5_reg_492 <= tmp_5_fu_416_p4;
                    zext_ln13_cast_reg_445(7 downto 0) <= zext_ln13_cast_fu_190_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_202_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_11_reg_472 <= add_ln14_2_fu_250_p2(10 downto 10);
            end if;
        end if;
    end process;
    zext_ln13_cast_reg_445(12 downto 8) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln13_fu_208_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_s_1) + unsigned(ap_const_lv7_1));
    add_ln14_1_fu_244_p2 <= std_logic_vector(unsigned(trunc_ln14_2_fu_236_p3) + unsigned(zext_ln14_5_cast_fu_186_p1));
    add_ln14_2_fu_250_p2 <= std_logic_vector(unsigned(trunc_ln14_1_fu_228_p3) + unsigned(zext_ln14_3_cast_fu_182_p1));
    add_ln14_fu_358_p2 <= std_logic_vector(unsigned(zext_ln14_4_fu_354_p1) + unsigned(zext_ln13_cast_reg_445));
    and_ln_fu_289_p3 <= (tmp_10_fu_282_p3 & ap_const_lv6_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln13_fu_202_p2)
    begin
        if (((icmp_ln13_fu_202_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_s_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, s_fu_92, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_s_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_s_1 <= s_fu_92;
        end if; 
    end process;

    bitcast_ln14_4_fu_430_p1 <= add6_reg_497;
    emission_0_address0 <= zext_ln14_1_fu_264_p1(10 - 1 downto 0);

    emission_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            emission_0_ce0 <= ap_const_logic_1;
        else 
            emission_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    emission_1_address0 <= zext_ln14_1_fu_264_p1(10 - 1 downto 0);

    emission_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            emission_1_ce0 <= ap_const_logic_1;
        else 
            emission_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_249_p_ce <= ap_const_logic_1;
    grp_fu_249_p_din0 <= tmp_2_reg_487;
    grp_fu_249_p_din1 <= tmp_5_reg_492;
    grp_fu_249_p_opcode <= ap_const_lv2_0;
    icmp_ln13_fu_202_p2 <= "1" when (ap_sig_allocacmp_s_1 = ap_const_lv7_40) else "0";
    init_0_address0 <= zext_ln14_fu_218_p1(4 - 1 downto 0);

    init_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            init_0_ce0 <= ap_const_logic_1;
        else 
            init_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    init_1_address0 <= zext_ln14_fu_218_p1(4 - 1 downto 0);

    init_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            init_1_ce0 <= ap_const_logic_1;
        else 
            init_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    llike_address0 <= zext_ln13_1_fu_426_p1(12 - 1 downto 0);

    llike_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            llike_ce0 <= ap_const_logic_1;
        else 
            llike_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    llike_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bitcast_ln14_4_fu_430_p1),128));

    llike_we0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            llike_we0 <= ap_const_lv16_FF;
        else 
            llike_we0 <= ap_const_lv16_0;
        end if; 
    end process;

    lshr_ln14_2_fu_319_p2 <= std_logic_vector(shift_right(unsigned(init_1_q0),to_integer(unsigned('0' & zext_ln14_6_fu_315_p1(31-1 downto 0)))));
    lshr_ln14_3_fu_384_p2 <= std_logic_vector(shift_right(unsigned(emission_0_q0),to_integer(unsigned('0' & zext_ln14_7_fu_380_p1(31-1 downto 0)))));
    lshr_ln14_4_fu_402_p2 <= std_logic_vector(shift_right(unsigned(emission_1_q0),to_integer(unsigned('0' & zext_ln14_8_fu_398_p1(31-1 downto 0)))));
    lshr_ln14_fu_301_p2 <= std_logic_vector(shift_right(unsigned(init_0_q0),to_integer(unsigned('0' & zext_ln14_2_fu_297_p1(31-1 downto 0)))));
    shl_ln14_1_fu_346_p3 <= (trunc_ln14_4_fu_343_p1 & ap_const_lv6_0);
    shl_ln14_2_fu_373_p3 <= (tmp_11_reg_472 & ap_const_lv6_0);
    tmp_10_fu_282_p3 <= s_1_reg_450(4 downto 4);
    tmp_2_fu_333_p1 <= trunc_ln14_fu_307_p1;
    tmp_2_fu_333_p2 <= trunc_ln14_3_fu_325_p1;
    tmp_2_fu_333_p3 <= s_1_reg_450(5 downto 5);
    tmp_5_fu_416_p1 <= trunc_ln14_6_fu_390_p1;
    tmp_5_fu_416_p2 <= trunc_ln14_7_fu_408_p1;
    tmp_5_fu_416_p3 <= add_ln14_fu_358_p2(12 downto 11);
    trunc_ln13_fu_214_p1 <= ap_sig_allocacmp_s_1(4 - 1 downto 0);
    trunc_ln14_1_fu_228_p3 <= (trunc_ln14_5_fu_224_p1 & ap_const_lv6_0);
    trunc_ln14_2_fu_236_p3 <= (trunc_ln13_fu_214_p1 & ap_const_lv6_0);
    trunc_ln14_3_fu_325_p1 <= lshr_ln14_2_fu_319_p2(64 - 1 downto 0);
    trunc_ln14_4_fu_343_p1 <= s_1_reg_450(6 - 1 downto 0);
    trunc_ln14_5_fu_224_p1 <= ap_sig_allocacmp_s_1(5 - 1 downto 0);
    trunc_ln14_6_fu_390_p1 <= lshr_ln14_3_fu_384_p2(64 - 1 downto 0);
    trunc_ln14_7_fu_408_p1 <= lshr_ln14_4_fu_402_p2(64 - 1 downto 0);
    trunc_ln14_fu_307_p1 <= lshr_ln14_fu_301_p2(64 - 1 downto 0);
    zext_ln13_1_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_1_reg_450_pp0_iter6_reg),64));
    zext_ln13_cast_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln13),13));
    zext_ln14_1_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_1_fu_244_p2),64));
    zext_ln14_2_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_289_p3),128));
    zext_ln14_3_cast_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln14_3),11));
    zext_ln14_4_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln14_1_fu_346_p3),13));
    zext_ln14_5_cast_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln14_5),10));
    zext_ln14_6_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_289_p3),128));
    zext_ln14_7_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln14_2_fu_373_p3),128));
    zext_ln14_8_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln14_2_fu_373_p3),128));
    zext_ln14_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln13_fu_214_p1),64));
end behav;
