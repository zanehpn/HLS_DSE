// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module viterbi_viterbi_Pipeline_L_end (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        min_p,
        llike_1_address0,
        llike_1_ce0,
        llike_1_q0,
        min_s_out,
        min_s_out_ap_vld,
        grp_fu_257_p_din0,
        grp_fu_257_p_din1,
        grp_fu_257_p_opcode,
        grp_fu_257_p_dout0,
        grp_fu_257_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] min_p;
output  [11:0] llike_1_address0;
output   llike_1_ce0;
input  [127:0] llike_1_q0;
output  [7:0] min_s_out;
output   min_s_out_ap_vld;
output  [63:0] grp_fu_257_p_din0;
output  [63:0] grp_fu_257_p_din1;
output  [4:0] grp_fu_257_p_opcode;
input  [0:0] grp_fu_257_p_dout0;
output   grp_fu_257_p_ce;

reg ap_idle;
reg llike_1_ce0;
reg min_s_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln40_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln40_reg_328;
wire   [5:0] trunc_ln42_1_fu_155_p1;
reg   [5:0] trunc_ln42_1_reg_337;
reg   [5:0] trunc_ln42_1_reg_337_pp0_iter1_reg;
reg   [63:0] min_p_1_load_reg_342;
wire   [63:0] p_fu_184_p1;
reg   [63:0] p_reg_349;
wire   [0:0] icmp_ln42_fu_209_p2;
reg   [0:0] icmp_ln42_reg_355;
wire   [0:0] icmp_ln42_1_fu_215_p2;
reg   [0:0] icmp_ln42_1_reg_360;
wire   [63:0] zext_ln41_fu_150_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] min_p_1_fu_76;
wire   [63:0] min_p_128_fu_275_p3;
reg   [63:0] ap_sig_allocacmp_min_p_1_load;
wire    ap_loop_init;
reg   [7:0] min_s_fu_80;
wire   [7:0] min_s_4_fu_284_p3;
reg   [6:0] min_s_1_fu_84;
wire   [6:0] add_ln40_fu_159_p2;
reg   [6:0] ap_sig_allocacmp_s;
wire    ap_block_pp0_stage0_01001;
wire   [11:0] tmp_998_cast_fu_142_p3;
wire   [63:0] tmp_92_fu_174_p4;
wire   [10:0] tmp_s_fu_189_p4;
wire   [51:0] tmp_295_fu_199_p4;
wire   [63:0] bitcast_ln42_fu_224_p1;
wire   [10:0] tmp_296_fu_227_p4;
wire   [51:0] trunc_ln42_fu_237_p1;
wire   [0:0] icmp_ln42_3_fu_251_p2;
wire   [0:0] icmp_ln42_2_fu_245_p2;
wire   [0:0] or_ln42_fu_241_p2;
wire   [0:0] and_ln42_fu_263_p2;
wire   [0:0] or_ln42_1_fu_257_p2;
wire   [0:0] and_ln42_1_fu_269_p2;
wire   [7:0] zext_ln42_fu_281_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

viterbi_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            min_p_1_fu_76 <= min_p;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            min_p_1_fu_76 <= min_p_128_fu_275_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln40_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            min_s_1_fu_84 <= add_ln40_fu_159_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            min_s_1_fu_84 <= 7'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            min_s_fu_80 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            min_s_fu_80 <= min_s_4_fu_284_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln40_reg_328 <= icmp_ln40_fu_136_p2;
        icmp_ln42_1_reg_360 <= icmp_ln42_1_fu_215_p2;
        icmp_ln42_reg_355 <= icmp_ln42_fu_209_p2;
        min_p_1_load_reg_342 <= ap_sig_allocacmp_min_p_1_load;
        p_reg_349 <= p_fu_184_p1;
        trunc_ln42_1_reg_337_pp0_iter1_reg <= trunc_ln42_1_reg_337;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_136_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln42_1_reg_337 <= trunc_ln42_1_fu_155_p1;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_min_p_1_load = min_p_128_fu_275_p3;
    end else begin
        ap_sig_allocacmp_min_p_1_load = min_p_1_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_s = 7'd1;
    end else begin
        ap_sig_allocacmp_s = min_s_1_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        llike_1_ce0 = 1'b1;
    end else begin
        llike_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_reg_328 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        min_s_out_ap_vld = 1'b1;
    end else begin
        min_s_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_fu_159_p2 = (ap_sig_allocacmp_s + 7'd1);

assign and_ln42_1_fu_269_p2 = (or_ln42_1_fu_257_p2 & and_ln42_fu_263_p2);

assign and_ln42_fu_263_p2 = (or_ln42_fu_241_p2 & grp_fu_257_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln42_fu_224_p1 = min_p_1_load_reg_342;

assign grp_fu_257_p_ce = 1'b1;

assign grp_fu_257_p_din0 = p_fu_184_p1;

assign grp_fu_257_p_din1 = ap_sig_allocacmp_min_p_1_load;

assign grp_fu_257_p_opcode = 5'd4;

assign icmp_ln40_fu_136_p2 = ((ap_sig_allocacmp_s == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln42_1_fu_215_p2 = ((tmp_295_fu_199_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_2_fu_245_p2 = ((tmp_296_fu_227_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln42_3_fu_251_p2 = ((trunc_ln42_fu_237_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_209_p2 = ((tmp_s_fu_189_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign llike_1_address0 = zext_ln41_fu_150_p1;

assign min_p_128_fu_275_p3 = ((and_ln42_1_fu_269_p2[0:0] == 1'b1) ? p_reg_349 : min_p_1_load_reg_342);

assign min_s_4_fu_284_p3 = ((and_ln42_1_fu_269_p2[0:0] == 1'b1) ? zext_ln42_fu_281_p1 : min_s_fu_80);

assign min_s_out = min_s_fu_80;

assign or_ln42_1_fu_257_p2 = (icmp_ln42_3_fu_251_p2 | icmp_ln42_2_fu_245_p2);

assign or_ln42_fu_241_p2 = (icmp_ln42_reg_355 | icmp_ln42_1_reg_360);

assign p_fu_184_p1 = tmp_92_fu_174_p4;

assign tmp_295_fu_199_p4 = {{llike_1_q0[115:64]}};

assign tmp_296_fu_227_p4 = {{bitcast_ln42_fu_224_p1[62:52]}};

assign tmp_92_fu_174_p4 = {{llike_1_q0[127:64]}};

assign tmp_998_cast_fu_142_p3 = {{5'd17}, {ap_sig_allocacmp_s}};

assign tmp_s_fu_189_p4 = {{llike_1_q0[126:116]}};

assign trunc_ln42_1_fu_155_p1 = ap_sig_allocacmp_s[5:0];

assign trunc_ln42_fu_237_p1 = bitcast_ln42_fu_224_p1[51:0];

assign zext_ln41_fu_150_p1 = tmp_998_cast_fu_142_p3;

assign zext_ln42_fu_281_p1 = trunc_ln42_1_reg_337_pp0_iter1_reg;

endmodule //viterbi_viterbi_Pipeline_L_end
