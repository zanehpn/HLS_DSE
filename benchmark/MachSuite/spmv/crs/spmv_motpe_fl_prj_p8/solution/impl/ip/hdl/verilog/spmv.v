// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="spmv_spmv,hls_ip_2022_2_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.148000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=10319,HLS_SYN_LUT=8714,HLS_VERSION=2022_2_2}" *)

module spmv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        val_r_address0,
        val_r_ce0,
        val_r_q0,
        cols_0_address0,
        cols_0_ce0,
        cols_0_q0,
        cols_1_address0,
        cols_1_ce0,
        cols_1_q0,
        rowDelimiters_address0,
        rowDelimiters_ce0,
        rowDelimiters_q0,
        rowDelimiters_address1,
        rowDelimiters_ce1,
        rowDelimiters_q1,
        vec_address0,
        vec_ce0,
        vec_q0,
        out_0_address0,
        out_0_ce0,
        out_0_we0,
        out_0_d0,
        out_1_address0,
        out_1_ce0,
        out_1_we0,
        out_1_d0
);

parameter    ap_ST_fsm_state1 = 84'd1;
parameter    ap_ST_fsm_state2 = 84'd2;
parameter    ap_ST_fsm_state3 = 84'd4;
parameter    ap_ST_fsm_state4 = 84'd8;
parameter    ap_ST_fsm_state5 = 84'd16;
parameter    ap_ST_fsm_state6 = 84'd32;
parameter    ap_ST_fsm_state7 = 84'd64;
parameter    ap_ST_fsm_state8 = 84'd128;
parameter    ap_ST_fsm_state9 = 84'd256;
parameter    ap_ST_fsm_state10 = 84'd512;
parameter    ap_ST_fsm_state11 = 84'd1024;
parameter    ap_ST_fsm_state12 = 84'd2048;
parameter    ap_ST_fsm_state13 = 84'd4096;
parameter    ap_ST_fsm_state14 = 84'd8192;
parameter    ap_ST_fsm_state15 = 84'd16384;
parameter    ap_ST_fsm_state16 = 84'd32768;
parameter    ap_ST_fsm_state17 = 84'd65536;
parameter    ap_ST_fsm_state18 = 84'd131072;
parameter    ap_ST_fsm_state19 = 84'd262144;
parameter    ap_ST_fsm_state20 = 84'd524288;
parameter    ap_ST_fsm_state21 = 84'd1048576;
parameter    ap_ST_fsm_state22 = 84'd2097152;
parameter    ap_ST_fsm_state23 = 84'd4194304;
parameter    ap_ST_fsm_state24 = 84'd8388608;
parameter    ap_ST_fsm_state25 = 84'd16777216;
parameter    ap_ST_fsm_state26 = 84'd33554432;
parameter    ap_ST_fsm_state27 = 84'd67108864;
parameter    ap_ST_fsm_state28 = 84'd134217728;
parameter    ap_ST_fsm_state29 = 84'd268435456;
parameter    ap_ST_fsm_state30 = 84'd536870912;
parameter    ap_ST_fsm_state31 = 84'd1073741824;
parameter    ap_ST_fsm_state32 = 84'd2147483648;
parameter    ap_ST_fsm_state33 = 84'd4294967296;
parameter    ap_ST_fsm_state34 = 84'd8589934592;
parameter    ap_ST_fsm_state35 = 84'd17179869184;
parameter    ap_ST_fsm_state36 = 84'd34359738368;
parameter    ap_ST_fsm_state37 = 84'd68719476736;
parameter    ap_ST_fsm_state38 = 84'd137438953472;
parameter    ap_ST_fsm_state39 = 84'd274877906944;
parameter    ap_ST_fsm_state40 = 84'd549755813888;
parameter    ap_ST_fsm_state41 = 84'd1099511627776;
parameter    ap_ST_fsm_state42 = 84'd2199023255552;
parameter    ap_ST_fsm_state43 = 84'd4398046511104;
parameter    ap_ST_fsm_state44 = 84'd8796093022208;
parameter    ap_ST_fsm_state45 = 84'd17592186044416;
parameter    ap_ST_fsm_state46 = 84'd35184372088832;
parameter    ap_ST_fsm_state47 = 84'd70368744177664;
parameter    ap_ST_fsm_state48 = 84'd140737488355328;
parameter    ap_ST_fsm_state49 = 84'd281474976710656;
parameter    ap_ST_fsm_state50 = 84'd562949953421312;
parameter    ap_ST_fsm_state51 = 84'd1125899906842624;
parameter    ap_ST_fsm_state52 = 84'd2251799813685248;
parameter    ap_ST_fsm_state53 = 84'd4503599627370496;
parameter    ap_ST_fsm_state54 = 84'd9007199254740992;
parameter    ap_ST_fsm_state55 = 84'd18014398509481984;
parameter    ap_ST_fsm_state56 = 84'd36028797018963968;
parameter    ap_ST_fsm_state57 = 84'd72057594037927936;
parameter    ap_ST_fsm_state58 = 84'd144115188075855872;
parameter    ap_ST_fsm_state59 = 84'd288230376151711744;
parameter    ap_ST_fsm_state60 = 84'd576460752303423488;
parameter    ap_ST_fsm_state61 = 84'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 84'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 84'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 84'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 84'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 84'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 84'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 84'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 84'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 84'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 84'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 84'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 84'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 84'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 84'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 84'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 84'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 84'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 84'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 84'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 84'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 84'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 84'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 84'd9671406556917033397649408;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] val_r_address0;
output   val_r_ce0;
input  [63:0] val_r_q0;
output  [8:0] cols_0_address0;
output   cols_0_ce0;
input  [63:0] cols_0_q0;
output  [8:0] cols_1_address0;
output   cols_1_ce0;
input  [63:0] cols_1_q0;
output  [8:0] rowDelimiters_address0;
output   rowDelimiters_ce0;
input  [31:0] rowDelimiters_q0;
output  [8:0] rowDelimiters_address1;
output   rowDelimiters_ce1;
input  [31:0] rowDelimiters_q1;
output  [8:0] vec_address0;
output   vec_ce0;
input  [63:0] vec_q0;
output  [7:0] out_0_address0;
output   out_0_ce0;
output   out_0_we0;
output  [63:0] out_0_d0;
output  [7:0] out_1_address0;
output   out_1_ce0;
output   out_1_we0;
output  [63:0] out_1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg val_r_ce0;
reg cols_0_ce0;
reg cols_1_ce0;
reg rowDelimiters_ce0;
reg rowDelimiters_ce1;
reg vec_ce0;
reg out_0_ce0;
reg out_0_we0;
reg out_1_ce0;
reg out_1_we0;

(* fsm_encoding = "none" *) reg   [83:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] add_ln15_fu_242_p2;
reg   [8:0] add_ln15_reg_450;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln12_fu_236_p2;
reg   [31:0] tmp_end_reg_465;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln16_fu_282_p1;
wire   [10:0] trunc_ln17_fu_295_p1;
reg   [10:0] trunc_ln17_reg_478;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln16_fu_290_p2;
wire   [63:0] add_ln16_fu_315_p2;
reg   [63:0] add_ln16_reg_488;
reg   [0:0] tmp_reg_496;
wire    ap_CS_fsm_state5;
wire   [0:0] trunc_ln17_1_fu_357_p1;
reg   [0:0] trunc_ln17_1_reg_501;
wire    ap_CS_fsm_state71;
wire   [31:0] tmp_2_fu_412_p4;
reg   [31:0] tmp_2_reg_516;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
reg   [63:0] val_r_load_reg_531;
wire    ap_CS_fsm_state74;
reg   [63:0] vec_load_reg_536;
wire    ap_CS_fsm_state75;
wire   [63:0] grp_fu_224_p2;
reg   [63:0] mul_reg_551;
wire    ap_CS_fsm_state79;
wire   [63:0] grp_fu_219_p2;
wire    ap_CS_fsm_state84;
reg   [63:0] indvars_iv_reg_197;
reg   [63:0] sum_reg_207;
wire   [63:0] zext_ln12_fu_248_p1;
wire   [63:0] zext_ln15_fu_277_p1;
wire   [63:0] zext_ln20_fu_339_p1;
wire   [0:0] trunc_ln20_fu_321_p1;
wire   [63:0] zext_ln17_2_fu_371_p1;
wire   [63:0] zext_ln17_fu_421_p1;
wire   [63:0] zext_ln17_4_fu_425_p1;
reg   [8:0] i_fu_90;
wire   [63:0] bitcast_ln20_fu_324_p1;
wire    ap_CS_fsm_state80;
wire   [63:0] grp_fu_224_p0;
wire   [63:0] grp_fu_224_p1;
wire   [10:0] shl_ln_fu_253_p3;
wire   [10:0] add_ln15_1_fu_261_p2;
wire   [8:0] lshr_ln_fu_267_p4;
wire   [31:0] trunc_ln16_fu_286_p1;
wire   [63:0] grp_fu_303_p0;
wire   [65:0] grp_fu_303_p1;
wire   [10:0] grp_fu_309_p1;
wire   [7:0] lshr_ln2_fu_330_p4;
wire   [74:0] grp_fu_303_p2;
wire   [63:0] grp_fu_309_p2;
wire   [8:0] lshr_ln1_fu_361_p4;
wire   [5:0] shl_ln1_fu_377_p3;
wire   [63:0] zext_ln17_3_fu_384_p1;
wire   [63:0] lshr_ln17_fu_388_p2;
wire   [63:0] zext_ln17_5_fu_398_p1;
wire   [63:0] lshr_ln17_1_fu_402_p2;
wire   [31:0] tmp_2_fu_412_p1;
wire   [31:0] tmp_2_fu_412_p2;
reg   [83:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire   [74:0] grp_fu_303_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 84'd1;
end

spmv_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_207),
    .din1(mul_reg_551),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

spmv_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_224_p0),
    .din1(grp_fu_224_p1),
    .ce(1'b1),
    .dout(grp_fu_224_p2)
);

spmv_mul_64ns_66ns_75_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 75 ))
mul_64ns_66ns_75_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_303_p0),
    .din1(grp_fu_303_p1),
    .ce(1'b1),
    .dout(grp_fu_303_p2)
);

spmv_urem_64ns_11ns_64_68_1 #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 64 ))
urem_64ns_11ns_64_68_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(indvars_iv_reg_197),
    .din1(grp_fu_309_p1),
    .ce(1'b1),
    .dout(grp_fu_309_p2)
);

spmv_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U5(
    .din0(tmp_2_fu_412_p1),
    .din1(tmp_2_fu_412_p2),
    .din2(tmp_reg_496),
    .dout(tmp_2_fu_412_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_90 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_290_p2 == 1'd0))) begin
        i_fu_90 <= add_ln15_reg_450;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvars_iv_reg_197 <= sext_ln16_fu_282_p1;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        indvars_iv_reg_197 <= add_ln16_reg_488;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_reg_207 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        sum_reg_207 <= grp_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln15_reg_450 <= add_ln15_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_290_p2 == 1'd1))) begin
        add_ln16_reg_488 <= add_ln16_fu_315_p2;
        trunc_ln17_reg_478 <= trunc_ln17_fu_295_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        mul_reg_551 <= grp_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        tmp_2_reg_516 <= tmp_2_fu_412_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_end_reg_465 <= rowDelimiters_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_reg_496 <= grp_fu_303_p2[32'd74];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        trunc_ln17_1_reg_501 <= trunc_ln17_1_fu_357_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        val_r_load_reg_531 <= val_r_q0;
        vec_load_reg_536 <= vec_q0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_236_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_236_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        cols_0_ce0 = 1'b1;
    end else begin
        cols_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        cols_1_ce0 = 1'b1;
    end else begin
        cols_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_0_ce0 = 1'b1;
    end else begin
        out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln20_fu_321_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_290_p2 == 1'd0))) begin
        out_0_we0 = 1'b1;
    end else begin
        out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_1_ce0 = 1'b1;
    end else begin
        out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln20_fu_321_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_290_p2 == 1'd0))) begin
        out_1_we0 = 1'b1;
    end else begin
        out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rowDelimiters_ce0 = 1'b1;
    end else begin
        rowDelimiters_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rowDelimiters_ce1 = 1'b1;
    end else begin
        rowDelimiters_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        val_r_ce0 = 1'b1;
    end else begin
        val_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        vec_ce0 = 1'b1;
    end else begin
        vec_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_236_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_290_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_1_fu_261_p2 = (shl_ln_fu_253_p3 + 11'd4);

assign add_ln15_fu_242_p2 = (i_fu_90 + 9'd1);

assign add_ln16_fu_315_p2 = (indvars_iv_reg_197 + 64'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign bitcast_ln20_fu_324_p1 = sum_reg_207;

assign cols_0_address0 = zext_ln17_2_fu_371_p1;

assign cols_1_address0 = zext_ln17_2_fu_371_p1;

assign grp_fu_224_p0 = val_r_load_reg_531;

assign grp_fu_224_p1 = vec_load_reg_536;

assign grp_fu_303_p0 = grp_fu_303_p00;

assign grp_fu_303_p00 = indvars_iv_reg_197;

assign grp_fu_303_p1 = 75'd22676429689650157089;

assign grp_fu_309_p1 = 64'd833;

assign icmp_ln12_fu_236_p2 = ((i_fu_90 == 9'd494) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_290_p2 = (($signed(trunc_ln16_fu_286_p1) < $signed(tmp_end_reg_465)) ? 1'b1 : 1'b0);

assign lshr_ln17_1_fu_402_p2 = cols_1_q0 >> zext_ln17_5_fu_398_p1;

assign lshr_ln17_fu_388_p2 = cols_0_q0 >> zext_ln17_3_fu_384_p1;

assign lshr_ln1_fu_361_p4 = {{grp_fu_309_p2[9:1]}};

assign lshr_ln2_fu_330_p4 = {{i_fu_90[8:1]}};

assign lshr_ln_fu_267_p4 = {{add_ln15_1_fu_261_p2[10:2]}};

assign out_0_address0 = zext_ln20_fu_339_p1;

assign out_0_d0 = bitcast_ln20_fu_324_p1;

assign out_1_address0 = zext_ln20_fu_339_p1;

assign out_1_d0 = bitcast_ln20_fu_324_p1;

assign rowDelimiters_address0 = zext_ln15_fu_277_p1;

assign rowDelimiters_address1 = zext_ln12_fu_248_p1;

assign sext_ln16_fu_282_p1 = $signed(rowDelimiters_q1);

assign shl_ln1_fu_377_p3 = {{trunc_ln17_1_reg_501}, {5'd0}};

assign shl_ln_fu_253_p3 = {{i_fu_90}, {2'd0}};

assign tmp_2_fu_412_p1 = lshr_ln17_fu_388_p2[31:0];

assign tmp_2_fu_412_p2 = lshr_ln17_1_fu_402_p2[31:0];

assign trunc_ln16_fu_286_p1 = indvars_iv_reg_197[31:0];

assign trunc_ln17_1_fu_357_p1 = grp_fu_309_p2[0:0];

assign trunc_ln17_fu_295_p1 = indvars_iv_reg_197[10:0];

assign trunc_ln20_fu_321_p1 = i_fu_90[0:0];

assign val_r_address0 = zext_ln17_fu_421_p1;

assign vec_address0 = zext_ln17_4_fu_425_p1;

assign zext_ln12_fu_248_p1 = i_fu_90;

assign zext_ln15_fu_277_p1 = lshr_ln_fu_267_p4;

assign zext_ln17_2_fu_371_p1 = lshr_ln1_fu_361_p4;

assign zext_ln17_3_fu_384_p1 = shl_ln1_fu_377_p3;

assign zext_ln17_4_fu_425_p1 = tmp_2_reg_516;

assign zext_ln17_5_fu_398_p1 = shl_ln1_fu_377_p3;

assign zext_ln17_fu_421_p1 = trunc_ln17_reg_478;

assign zext_ln20_fu_339_p1 = lshr_ln2_fu_330_p4;

endmodule //spmv
