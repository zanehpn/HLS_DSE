// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bfs_bfs,hls_ip_2022_2_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.903000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=743,HLS_SYN_LUT=3778,HLS_VERSION=2022_2_2}" *)

module bfs (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        nodes_address0,
        nodes_ce0,
        nodes_q0,
        edges_0_address0,
        edges_0_ce0,
        edges_0_q0,
        edges_1_address0,
        edges_1_ce0,
        edges_1_q0,
        starting_node,
        level_address0,
        level_ce0,
        level_we0,
        level_d0,
        level_q0,
        level_counts_0_address0,
        level_counts_0_ce0,
        level_counts_0_we0,
        level_counts_0_d0,
        level_counts_0_q0,
        level_counts_1_address0,
        level_counts_1_ce0,
        level_counts_1_we0,
        level_counts_1_d0,
        level_counts_1_q0
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] nodes_address0;
output   nodes_ce0;
input  [127:0] nodes_q0;
output  [10:0] edges_0_address0;
output   edges_0_ce0;
input  [63:0] edges_0_q0;
output  [10:0] edges_1_address0;
output   edges_1_ce0;
input  [63:0] edges_1_q0;
input  [63:0] starting_node;
output  [6:0] level_address0;
output   level_ce0;
output   level_we0;
output  [15:0] level_d0;
input  [15:0] level_q0;
output  [1:0] level_counts_0_address0;
output   level_counts_0_ce0;
output   level_counts_0_we0;
output  [127:0] level_counts_0_d0;
input  [127:0] level_counts_0_q0;
output  [1:0] level_counts_1_address0;
output   level_counts_1_ce0;
output   level_counts_1_we0;
output  [127:0] level_counts_1_d0;
input  [127:0] level_counts_1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg nodes_ce0;
reg edges_0_ce0;
reg edges_1_ce0;
reg[6:0] level_address0;
reg level_ce0;
reg level_we0;
reg[15:0] level_d0;
reg[1:0] level_counts_0_address0;
reg level_counts_0_ce0;
reg level_counts_0_we0;
reg[127:0] level_counts_0_d0;
reg[1:0] level_counts_1_address0;
reg level_counts_1_ce0;
reg level_counts_1_we0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] level_addr_reg_964;
wire   [1:0] level_counts_0_addr_reg_969;
wire   [8:0] dummy_2_fu_421_p2;
reg   [8:0] dummy_2_reg_977;
wire    ap_CS_fsm_state3;
wire   [7:0] q_out_1_fu_454_p2;
reg   [7:0] q_out_1_reg_985;
wire   [0:0] tmp_fu_413_p3;
wire   [0:0] icmp_ln35_fu_434_p2;
wire   [0:0] icmp_ln35_1_fu_472_p2;
wire   [0:0] and_ln35_fu_466_p2;
reg   [0:0] tmp_1_reg_1006;
wire    ap_CS_fsm_state4;
wire   [0:0] empty_20_fu_517_p1;
reg   [0:0] empty_20_reg_1016;
reg   [6:0] lshr_ln1_reg_1021;
wire   [63:0] tmp_begin_fu_531_p1;
wire    ap_CS_fsm_state5;
reg   [63:0] tmp_end_reg_1031;
wire   [3:0] tmp_2_fu_545_p3;
reg   [3:0] tmp_2_reg_1036;
reg   [6:0] level_addr_1_reg_1041;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln41_fu_556_p2;
wire   [63:0] tmp_dst_fu_587_p4;
reg   [63:0] tmp_dst_reg_1059;
wire    ap_CS_fsm_state7;
wire   [0:0] trunc_ln43_fu_597_p1;
reg   [0:0] trunc_ln43_reg_1065;
reg   [6:0] level_addr_2_reg_1070;
wire   [3:0] shl_ln1_fu_616_p3;
reg   [3:0] shl_ln1_reg_1075;
wire    ap_CS_fsm_state8;
reg   [15:0] level_load_1_reg_1080;
wire   [0:0] icmp_ln45_fu_637_p2;
reg   [0:0] icmp_ln45_reg_1085;
wire   [15:0] or_ln47_fu_692_p2;
reg   [15:0] or_ln47_reg_1089;
wire    ap_CS_fsm_state9;
wire   [6:0] trunc_ln48_1_fu_698_p4;
reg   [0:0] tmp_4_reg_1099;
reg   [0:0] tmp_5_reg_1104;
reg   [0:0] tmp_6_reg_1109;
wire   [0:0] trunc_ln48_fu_748_p1;
reg   [0:0] trunc_ln48_reg_1114;
reg   [1:0] level_counts_0_addr_1_reg_1119;
wire    ap_CS_fsm_state19;
reg   [1:0] level_counts_1_addr_reg_1124;
reg   [127:0] level_counts_0_load_1_reg_1129;
wire    ap_CS_fsm_state20;
reg   [127:0] level_counts_1_load_reg_1134;
wire   [63:0] add_ln48_fu_809_p2;
reg   [63:0] add_ln48_reg_1139;
wire   [63:0] e_2_fu_931_p2;
wire    ap_CS_fsm_state21;
reg   [6:0] queue_address0;
reg    queue_ce0;
reg    queue_we0;
reg   [63:0] queue_d0;
wire   [63:0] queue_q0;
reg   [6:0] queue_1_address0;
reg    queue_1_ce0;
reg    queue_1_we0;
wire   [63:0] queue_1_q0;
reg   [63:0] e_1_reg_314;
wire   [63:0] zext_ln30_fu_343_p1;
wire   [63:0] zext_ln37_fu_485_p1;
wire   [63:0] zext_ln39_fu_512_p1;
wire   [63:0] zext_ln46_fu_552_p1;
wire   [63:0] zext_ln42_fu_565_p1;
wire   [63:0] zext_ln43_fu_611_p1;
wire   [63:0] zext_ln48_1_fu_752_p1;
wire   [63:0] zext_ln49_fu_902_p1;
reg   [7:0] q_out_fu_138;
reg   [8:0] dummy_fu_142;
reg   [63:0] q_in_fu_146;
wire   [63:0] zext_ln18_fu_922_p1;
wire    ap_CS_fsm_state2;
wire   [15:0] and_ln30_fu_390_p2;
wire    ap_CS_fsm_state10;
wire   [127:0] tmp_s_fu_397_p5;
wire   [127:0] or_ln48_1_fu_852_p2;
wire   [0:0] tmp_11_fu_908_p3;
wire   [6:0] lshr_ln_fu_333_p4;
wire   [0:0] trunc_ln30_fu_363_p1;
wire   [3:0] shl_ln_fu_366_p3;
wire   [15:0] zext_ln30_1_fu_374_p1;
wire   [15:0] shl_ln30_fu_378_p2;
wire   [15:0] xor_ln30_fu_384_p2;
wire   [63:0] zext_ln34_fu_430_p1;
wire   [8:0] zext_ln34_1_fu_440_p1;
wire   [8:0] add_ln35_fu_444_p2;
wire   [0:0] grp_fu_327_p2;
wire   [0:0] icmp_ln35_3_fu_460_p2;
wire   [63:0] zext_ln35_fu_450_p1;
wire   [6:0] trunc_ln34_fu_481_p1;
wire   [63:0] n_fu_499_p4;
wire   [7:0] trunc_ln20_fu_508_p1;
wire   [10:0] trunc_ln41_fu_561_p1;
wire   [0:0] tmp_dst_fu_587_p3;
wire   [6:0] lshr_ln2_fu_601_p4;
wire   [15:0] zext_ln43_1_fu_623_p1;
wire   [15:0] lshr_ln43_fu_627_p2;
wire   [7:0] tmp_level_fu_633_p1;
wire   [15:0] zext_ln46_1_fu_643_p1;
wire   [15:0] lshr_ln46_fu_646_p2;
wire   [7:0] trunc_ln46_fu_652_p1;
wire   [15:0] zext_ln47_fu_662_p1;
wire   [15:0] shl_ln47_fu_665_p2;
wire   [15:0] xor_ln47_fu_671_p2;
wire   [7:0] tmp_level_1_fu_656_p2;
wire   [15:0] zext_ln47_1_fu_682_p1;
wire   [15:0] and_ln47_fu_677_p2;
wire   [15:0] shl_ln47_1_fu_686_p2;
wire   [6:0] mul_ln48_fu_712_p0;
wire   [8:0] mul_ln48_fu_712_p1;
wire   [14:0] mul_ln48_fu_712_p2;
wire   [6:0] grp_fu_742_p0;
wire   [2:0] grp_fu_742_p1;
wire   [6:0] grp_fu_742_p2;
wire   [6:0] tmp_7_fu_758_p3;
wire   [127:0] zext_ln48_2_fu_765_p1;
wire   [127:0] lshr_ln48_fu_769_p2;
wire   [6:0] tmp_8_fu_779_p3;
wire   [127:0] zext_ln48_3_fu_786_p1;
wire   [127:0] lshr_ln48_1_fu_790_p2;
wire   [63:0] tmp_9_fu_800_p1;
wire   [63:0] tmp_9_fu_800_p2;
wire   [63:0] tmp_9_fu_800_p4;
wire   [6:0] tmp_10_fu_815_p3;
wire   [127:0] zext_ln48_4_fu_822_p1;
wire   [127:0] shl_ln48_fu_826_p2;
wire   [127:0] xor_ln48_fu_832_p2;
wire   [127:0] zext_ln48_6_fu_843_p1;
wire   [127:0] and_ln48_1_fu_838_p2;
wire   [127:0] shl_ln48_2_fu_846_p2;
wire   [127:0] zext_ln48_5_fu_864_p1;
wire   [127:0] and_ln48_fu_859_p2;
wire   [127:0] shl_ln48_1_fu_867_p2;
wire   [7:0] trunc_ln41_1_fu_880_p1;
wire   [7:0] add_ln49_fu_884_p2;
wire   [7:0] select_ln49_fu_890_p3;
wire   [6:0] trunc_ln49_fu_898_p1;
wire   [7:0] q_in_1_fu_916_p2;
reg    grp_fu_742_ap_start;
wire    grp_fu_742_ap_done;
reg   [20:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire   [14:0] mul_ln48_fu_712_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

bfs_queue_RAM_1WNR_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
queue_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(queue_address0),
    .ce0(queue_ce0),
    .we0(queue_we0),
    .d0(queue_d0),
    .q0(queue_q0)
);

bfs_queue_RAM_1WNR_BRAM_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
queue_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(queue_1_address0),
    .ce0(queue_1_ce0),
    .we0(queue_1_we0),
    .d0(tmp_dst_reg_1059),
    .q0(queue_1_q0)
);

bfs_mux_21_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 64 ))
mux_21_64_1_1_U1(
    .din0(queue_q0),
    .din1(queue_1_q0),
    .din2(tmp_1_reg_1006),
    .dout(n_fu_499_p4)
);

bfs_mux_21_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 64 ))
mux_21_64_1_1_U2(
    .din0(edges_0_q0),
    .din1(edges_1_q0),
    .din2(tmp_dst_fu_587_p3),
    .dout(tmp_dst_fu_587_p4)
);

bfs_mul_7ns_9ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 15 ))
mul_7ns_9ns_15_1_1_U3(
    .din0(mul_ln48_fu_712_p0),
    .din1(mul_ln48_fu_712_p1),
    .dout(mul_ln48_fu_712_p2)
);

bfs_urem_7ns_3ns_7_11_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 7 ))
urem_7ns_3ns_7_11_seq_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_742_ap_start),
    .done(grp_fu_742_ap_done),
    .din0(grp_fu_742_p0),
    .din1(grp_fu_742_p1),
    .ce(1'b1),
    .dout(grp_fu_742_p2)
);

bfs_mux_21_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 64 ))
mux_21_64_1_1_U5(
    .din0(tmp_9_fu_800_p1),
    .din1(tmp_9_fu_800_p2),
    .din2(trunc_ln48_reg_1114),
    .dout(tmp_9_fu_800_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dummy_fu_142 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln41_fu_556_p2 == 1'd0))) begin
        dummy_fu_142 <= dummy_2_reg_977;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        e_1_reg_314 <= e_2_fu_931_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        e_1_reg_314 <= tmp_begin_fu_531_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                q_in_fu_146[0] <= 1'b0;
        q_in_fu_146[1] <= 1'b1;
        q_in_fu_146[2] <= 1'b0;
        q_in_fu_146[3] <= 1'b0;
        q_in_fu_146[4] <= 1'b0;
        q_in_fu_146[5] <= 1'b0;
        q_in_fu_146[6] <= 1'b0;
        q_in_fu_146[7] <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln45_reg_1085 == 1'd1))) begin
                q_in_fu_146[7 : 0] <= zext_ln18_fu_922_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q_out_fu_138 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln41_fu_556_p2 == 1'd0))) begin
        q_out_fu_138 <= q_out_1_reg_985;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln48_reg_1139 <= add_ln48_fu_809_p2;
        level_counts_0_load_1_reg_1129 <= level_counts_0_q0;
        level_counts_1_load_reg_1134 <= level_counts_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dummy_2_reg_977 <= dummy_2_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_20_reg_1016 <= empty_20_fu_517_p1;
        lshr_ln1_reg_1021 <= {{n_fu_499_p4[7:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln45_reg_1085 <= icmp_ln45_fu_637_p2;
        level_load_1_reg_1080 <= level_q0;
        shl_ln1_reg_1075[3] <= shl_ln1_fu_616_p3[3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        level_addr_1_reg_1041 <= zext_ln46_fu_552_p1;
        tmp_2_reg_1036[3] <= tmp_2_fu_545_p3[3];
        tmp_end_reg_1031 <= {{nodes_q0[127:64]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        level_addr_2_reg_1070 <= zext_ln43_fu_611_p1;
        tmp_dst_reg_1059 <= tmp_dst_fu_587_p4;
        trunc_ln43_reg_1065 <= trunc_ln43_fu_597_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        level_addr_reg_964 <= zext_ln30_fu_343_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        level_counts_0_addr_1_reg_1119 <= zext_ln48_1_fu_752_p1;
        level_counts_1_addr_reg_1124 <= zext_ln48_1_fu_752_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        or_ln47_reg_1089 <= or_ln47_fu_692_p2;
        tmp_4_reg_1099 <= mul_ln48_fu_712_p2[32'd9];
        tmp_5_reg_1104 <= mul_ln48_fu_712_p2[32'd9];
        tmp_6_reg_1109 <= mul_ln48_fu_712_p2[32'd9];
        trunc_ln48_reg_1114 <= trunc_ln48_fu_748_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_413_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        q_out_1_reg_985 <= q_out_1_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (((tmp_fu_413_p3 == 1'd0) & (icmp_ln35_fu_434_p2 == 1'd0) & (1'd0 == and_ln35_fu_466_p2)) | ((tmp_fu_413_p3 == 1'd0) & (icmp_ln35_1_fu_472_p2 == 1'd0) & (icmp_ln35_fu_434_p2 == 1'd1))))) begin
        tmp_1_reg_1006 <= q_out_fu_138[32'd7];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((tmp_fu_413_p3 == 1'd1) | (((1'd1 == and_ln35_fu_466_p2) & (icmp_ln35_fu_434_p2 == 1'd0)) | ((icmp_ln35_1_fu_472_p2 == 1'd1) & (icmp_ln35_fu_434_p2 == 1'd1)))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((tmp_fu_413_p3 == 1'd1) | (((1'd1 == and_ln35_fu_466_p2) & (icmp_ln35_fu_434_p2 == 1'd0)) | ((icmp_ln35_1_fu_472_p2 == 1'd1) & (icmp_ln35_fu_434_p2 == 1'd1)))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        edges_0_ce0 = 1'b1;
    end else begin
        edges_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        edges_1_ce0 = 1'b1;
    end else begin
        edges_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_742_ap_start = 1'b1;
    end else begin
        grp_fu_742_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        level_address0 = level_addr_2_reg_1070;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        level_address0 = level_addr_1_reg_1041;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        level_address0 = zext_ln43_fu_611_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        level_address0 = level_addr_reg_964;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        level_address0 = zext_ln30_fu_343_p1;
    end else begin
        level_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        level_ce0 = 1'b1;
    end else begin
        level_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        level_counts_0_address0 = level_counts_0_addr_1_reg_1119;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        level_counts_0_address0 = zext_ln48_1_fu_752_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        level_counts_0_address0 = level_counts_0_addr_reg_969;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        level_counts_0_address0 = 64'd0;
    end else begin
        level_counts_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        level_counts_0_ce0 = 1'b1;
    end else begin
        level_counts_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        level_counts_0_d0 = or_ln48_1_fu_852_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        level_counts_0_d0 = tmp_s_fu_397_p5;
    end else begin
        level_counts_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state21) & (trunc_ln48_reg_1114 == 1'd0) & (icmp_ln45_reg_1085 == 1'd1)))) begin
        level_counts_0_we0 = 1'b1;
    end else begin
        level_counts_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        level_counts_1_address0 = level_counts_1_addr_reg_1124;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        level_counts_1_address0 = zext_ln48_1_fu_752_p1;
    end else begin
        level_counts_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        level_counts_1_ce0 = 1'b1;
    end else begin
        level_counts_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (trunc_ln48_reg_1114 == 1'd1) & (icmp_ln45_reg_1085 == 1'd1))) begin
        level_counts_1_we0 = 1'b1;
    end else begin
        level_counts_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        level_d0 = or_ln47_reg_1089;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        level_d0 = and_ln30_fu_390_p2;
    end else begin
        level_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2))) begin
        level_we0 = 1'b1;
    end else begin
        level_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        nodes_ce0 = 1'b1;
    end else begin
        nodes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        queue_1_address0 = zext_ln49_fu_902_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        queue_1_address0 = zext_ln37_fu_485_p1;
    end else begin
        queue_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state21))) begin
        queue_1_ce0 = 1'b1;
    end else begin
        queue_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_11_fu_908_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln45_reg_1085 == 1'd1))) begin
        queue_1_we0 = 1'b1;
    end else begin
        queue_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        queue_address0 = zext_ln49_fu_902_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        queue_address0 = zext_ln37_fu_485_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        queue_address0 = 64'd0;
    end else begin
        queue_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state21) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        queue_ce0 = 1'b1;
    end else begin
        queue_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        queue_d0 = tmp_dst_reg_1059;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        queue_d0 = starting_node;
    end else begin
        queue_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_11_fu_908_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln45_reg_1085 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        queue_we0 = 1'b1;
    end else begin
        queue_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((tmp_fu_413_p3 == 1'd1) | (((1'd1 == and_ln35_fu_466_p2) & (icmp_ln35_fu_434_p2 == 1'd0)) | ((icmp_ln35_1_fu_472_p2 == 1'd1) & (icmp_ln35_fu_434_p2 == 1'd1)))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln41_fu_556_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln45_fu_637_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_444_p2 = (zext_ln34_1_fu_440_p1 + 9'd1);

assign add_ln48_fu_809_p2 = (tmp_9_fu_800_p4 + 64'd1);

assign add_ln49_fu_884_p2 = ($signed(trunc_ln41_1_fu_880_p1) + $signed(8'd255));

assign and_ln30_fu_390_p2 = (xor_ln30_fu_384_p2 & level_q0);

assign and_ln35_fu_466_p2 = (icmp_ln35_3_fu_460_p2 & grp_fu_327_p2);

assign and_ln47_fu_677_p2 = (xor_ln47_fu_671_p2 & level_load_1_reg_1080);

assign and_ln48_1_fu_838_p2 = (xor_ln48_fu_832_p2 & level_counts_0_load_1_reg_1129);

assign and_ln48_fu_859_p2 = (xor_ln48_fu_832_p2 & level_counts_1_load_reg_1134);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign dummy_2_fu_421_p2 = (dummy_fu_142 + 9'd1);

assign e_2_fu_931_p2 = (e_1_reg_314 + 64'd1);

assign edges_0_address0 = zext_ln42_fu_565_p1;

assign edges_1_address0 = zext_ln42_fu_565_p1;

assign empty_20_fu_517_p1 = n_fu_499_p4[0:0];

assign grp_fu_327_p2 = ((q_in_fu_146 == 64'd0) ? 1'b1 : 1'b0);

assign grp_fu_742_p0 = {{tmp_level_1_fu_656_p2[7:1]}};

assign grp_fu_742_p1 = 7'd3;

assign icmp_ln35_1_fu_472_p2 = ((q_in_fu_146 == zext_ln35_fu_450_p1) ? 1'b1 : 1'b0);

assign icmp_ln35_3_fu_460_p2 = ((q_out_fu_138 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_434_p2 = ((q_in_fu_146 > zext_ln34_fu_430_p1) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_556_p2 = ((e_1_reg_314 < tmp_end_reg_1031) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_637_p2 = ((tmp_level_fu_633_p1 == 8'd127) ? 1'b1 : 1'b0);

assign level_counts_0_addr_reg_969 = 64'd0;

assign level_counts_1_d0 = (shl_ln48_1_fu_867_p2 | and_ln48_fu_859_p2);

assign lshr_ln2_fu_601_p4 = {{tmp_dst_fu_587_p4[7:1]}};

assign lshr_ln43_fu_627_p2 = level_q0 >> zext_ln43_1_fu_623_p1;

assign lshr_ln46_fu_646_p2 = level_q0 >> zext_ln46_1_fu_643_p1;

assign lshr_ln48_1_fu_790_p2 = level_counts_1_q0 >> zext_ln48_3_fu_786_p1;

assign lshr_ln48_fu_769_p2 = level_counts_0_q0 >> zext_ln48_2_fu_765_p1;

assign lshr_ln_fu_333_p4 = {{starting_node[7:1]}};

assign mul_ln48_fu_712_p0 = mul_ln48_fu_712_p00;

assign mul_ln48_fu_712_p00 = trunc_ln48_1_fu_698_p4;

assign mul_ln48_fu_712_p1 = 15'd171;

assign nodes_address0 = zext_ln39_fu_512_p1;

assign or_ln47_fu_692_p2 = (shl_ln47_1_fu_686_p2 | and_ln47_fu_677_p2);

assign or_ln48_1_fu_852_p2 = (shl_ln48_2_fu_846_p2 | and_ln48_1_fu_838_p2);

assign q_in_1_fu_916_p2 = (trunc_ln41_1_fu_880_p1 + 8'd1);

assign q_out_1_fu_454_p2 = (q_out_fu_138 + 8'd1);

assign select_ln49_fu_890_p3 = ((grp_fu_327_p2[0:0] == 1'b1) ? 8'd255 : add_ln49_fu_884_p2);

assign shl_ln1_fu_616_p3 = {{trunc_ln43_reg_1065}, {3'd0}};

assign shl_ln30_fu_378_p2 = 16'd255 << zext_ln30_1_fu_374_p1;

assign shl_ln47_1_fu_686_p2 = zext_ln47_1_fu_682_p1 << zext_ln47_fu_662_p1;

assign shl_ln47_fu_665_p2 = 16'd255 << zext_ln47_fu_662_p1;

assign shl_ln48_1_fu_867_p2 = zext_ln48_5_fu_864_p1 << zext_ln48_4_fu_822_p1;

assign shl_ln48_2_fu_846_p2 = zext_ln48_6_fu_843_p1 << zext_ln48_4_fu_822_p1;

assign shl_ln48_fu_826_p2 = 128'd18446744073709551615 << zext_ln48_4_fu_822_p1;

assign shl_ln_fu_366_p3 = {{trunc_ln30_fu_363_p1}, {3'd0}};

assign tmp_10_fu_815_p3 = {{tmp_4_reg_1099}, {6'd0}};

assign tmp_11_fu_908_p3 = select_ln49_fu_890_p3[32'd7];

assign tmp_2_fu_545_p3 = {{empty_20_reg_1016}, {3'd0}};

assign tmp_7_fu_758_p3 = {{tmp_6_reg_1109}, {6'd0}};

assign tmp_8_fu_779_p3 = {{tmp_5_reg_1104}, {6'd0}};

assign tmp_9_fu_800_p1 = lshr_ln48_fu_769_p2[63:0];

assign tmp_9_fu_800_p2 = lshr_ln48_1_fu_790_p2[63:0];

assign tmp_begin_fu_531_p1 = nodes_q0[63:0];

assign tmp_dst_fu_587_p3 = e_1_reg_314[32'd11];

assign tmp_fu_413_p3 = dummy_fu_142[32'd8];

assign tmp_level_1_fu_656_p2 = (trunc_ln46_fu_652_p1 + 8'd1);

assign tmp_level_fu_633_p1 = lshr_ln43_fu_627_p2[7:0];

assign tmp_s_fu_397_p5 = {{level_counts_0_q0[127:64]}, {64'd1}};

assign trunc_ln20_fu_508_p1 = n_fu_499_p4[7:0];

assign trunc_ln30_fu_363_p1 = starting_node[0:0];

assign trunc_ln34_fu_481_p1 = q_out_fu_138[6:0];

assign trunc_ln41_1_fu_880_p1 = q_in_fu_146[7:0];

assign trunc_ln41_fu_561_p1 = e_1_reg_314[10:0];

assign trunc_ln43_fu_597_p1 = tmp_dst_fu_587_p4[0:0];

assign trunc_ln46_fu_652_p1 = lshr_ln46_fu_646_p2[7:0];

assign trunc_ln48_1_fu_698_p4 = {{tmp_level_1_fu_656_p2[7:1]}};

assign trunc_ln48_fu_748_p1 = tmp_level_1_fu_656_p2[0:0];

assign trunc_ln49_fu_898_p1 = select_ln49_fu_890_p3[6:0];

assign xor_ln30_fu_384_p2 = (shl_ln30_fu_378_p2 ^ 16'd65535);

assign xor_ln47_fu_671_p2 = (shl_ln47_fu_665_p2 ^ 16'd65535);

assign xor_ln48_fu_832_p2 = (shl_ln48_fu_826_p2 ^ 128'd340282366920938463463374607431768211455);

assign zext_ln18_fu_922_p1 = q_in_1_fu_916_p2;

assign zext_ln30_1_fu_374_p1 = shl_ln_fu_366_p3;

assign zext_ln30_fu_343_p1 = lshr_ln_fu_333_p4;

assign zext_ln34_1_fu_440_p1 = q_out_fu_138;

assign zext_ln34_fu_430_p1 = q_out_fu_138;

assign zext_ln35_fu_450_p1 = add_ln35_fu_444_p2;

assign zext_ln37_fu_485_p1 = trunc_ln34_fu_481_p1;

assign zext_ln39_fu_512_p1 = trunc_ln20_fu_508_p1;

assign zext_ln42_fu_565_p1 = trunc_ln41_fu_561_p1;

assign zext_ln43_1_fu_623_p1 = shl_ln1_fu_616_p3;

assign zext_ln43_fu_611_p1 = lshr_ln2_fu_601_p4;

assign zext_ln46_1_fu_643_p1 = tmp_2_reg_1036;

assign zext_ln46_fu_552_p1 = lshr_ln1_reg_1021;

assign zext_ln47_1_fu_682_p1 = tmp_level_1_fu_656_p2;

assign zext_ln47_fu_662_p1 = shl_ln1_reg_1075;

assign zext_ln48_1_fu_752_p1 = grp_fu_742_p2;

assign zext_ln48_2_fu_765_p1 = tmp_7_fu_758_p3;

assign zext_ln48_3_fu_786_p1 = tmp_8_fu_779_p3;

assign zext_ln48_4_fu_822_p1 = tmp_10_fu_815_p3;

assign zext_ln48_5_fu_864_p1 = add_ln48_reg_1139;

assign zext_ln48_6_fu_843_p1 = add_ln48_reg_1139;

assign zext_ln49_fu_902_p1 = trunc_ln49_fu_898_p1;

always @ (posedge ap_clk) begin
    tmp_2_reg_1036[2:0] <= 3'b000;
    shl_ln1_reg_1075[2:0] <= 3'b000;
    q_in_fu_146[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //bfs
