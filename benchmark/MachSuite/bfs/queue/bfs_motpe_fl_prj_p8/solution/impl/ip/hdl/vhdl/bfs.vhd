-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bfs is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nodes_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    nodes_ce0 : OUT STD_LOGIC;
    nodes_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    edges_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    edges_0_ce0 : OUT STD_LOGIC;
    edges_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    edges_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    edges_1_ce0 : OUT STD_LOGIC;
    edges_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    starting_node : IN STD_LOGIC_VECTOR (63 downto 0);
    level_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    level_ce0 : OUT STD_LOGIC;
    level_we0 : OUT STD_LOGIC;
    level_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    level_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    level_counts_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    level_counts_0_ce0 : OUT STD_LOGIC;
    level_counts_0_we0 : OUT STD_LOGIC;
    level_counts_0_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    level_counts_0_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    level_counts_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    level_counts_1_ce0 : OUT STD_LOGIC;
    level_counts_1_we0 : OUT STD_LOGIC;
    level_counts_1_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    level_counts_1_q0 : IN STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of bfs is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bfs_bfs,hls_ip_2022_2_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.903000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=743,HLS_SYN_LUT=3778,HLS_VERSION=2022_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal level_addr_reg_964 : STD_LOGIC_VECTOR (6 downto 0);
    signal level_counts_0_addr_reg_969 : STD_LOGIC_VECTOR (1 downto 0);
    signal dummy_2_fu_421_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal dummy_2_reg_977 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal q_out_1_fu_454_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_out_1_reg_985 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_413_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_1_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1006 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal empty_20_fu_517_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_reg_1016 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln1_reg_1021 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_begin_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_end_reg_1031 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_545_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_reg_1036 : STD_LOGIC_VECTOR (3 downto 0);
    signal level_addr_1_reg_1041 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln41_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dst_fu_587_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_dst_reg_1059 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln43_fu_597_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln43_reg_1065 : STD_LOGIC_VECTOR (0 downto 0);
    signal level_addr_2_reg_1070 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1_fu_616_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_reg_1075 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal level_load_1_reg_1080 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln45_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1085 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln47_fu_692_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln47_reg_1089 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln48_1_fu_698_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_1099 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1104 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1109 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln48_fu_748_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln48_reg_1114 : STD_LOGIC_VECTOR (0 downto 0);
    signal level_counts_0_addr_1_reg_1119 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal level_counts_1_addr_reg_1124 : STD_LOGIC_VECTOR (1 downto 0);
    signal level_counts_0_load_1_reg_1129 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal level_counts_1_load_reg_1134 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln48_fu_809_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln48_reg_1139 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_2_fu_931_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal queue_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal queue_ce0 : STD_LOGIC;
    signal queue_we0 : STD_LOGIC;
    signal queue_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal queue_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal queue_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal queue_1_ce0 : STD_LOGIC;
    signal queue_1_we0 : STD_LOGIC;
    signal queue_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_1_reg_314 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_fu_902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal q_out_fu_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal dummy_fu_142 : STD_LOGIC_VECTOR (8 downto 0);
    signal q_in_fu_146 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_fu_922_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal and_ln30_fu_390_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_s_fu_397_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln48_1_fu_852_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_11_fu_908_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_fu_333_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln30_fu_363_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_366_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln30_1_fu_374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln30_fu_378_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln30_fu_384_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_1_fu_440_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_fu_444_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_3_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln34_fu_481_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_fu_499_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln20_fu_508_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_fu_561_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_dst_fu_587_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln2_fu_601_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln43_1_fu_623_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln43_fu_627_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_level_fu_633_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln46_1_fu_643_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln46_fu_646_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_fu_652_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln47_fu_662_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln47_fu_665_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln47_fu_671_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_level_1_fu_656_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln47_1_fu_682_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln47_fu_677_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln47_1_fu_686_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln48_fu_712_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln48_fu_712_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln48_fu_712_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_742_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_742_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_742_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_758_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_2_fu_765_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln48_fu_769_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_8_fu_779_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_3_fu_786_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln48_1_fu_790_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_9_fu_800_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_800_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_800_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_815_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_4_fu_822_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln48_fu_826_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln48_fu_832_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln48_6_fu_843_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln48_1_fu_838_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln48_2_fu_846_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln48_5_fu_864_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln48_fu_859_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln48_1_fu_867_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln41_1_fu_880_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln49_fu_884_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln49_fu_890_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_fu_898_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal q_in_1_fu_916_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_742_ap_start : STD_LOGIC;
    signal grp_fu_742_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal mul_ln48_fu_712_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component bfs_mux_21_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component bfs_mul_7ns_9ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component bfs_urem_7ns_3ns_7_11_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component bfs_queue_RAM_1WNR_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    queue_U : component bfs_queue_RAM_1WNR_BRAM_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => queue_address0,
        ce0 => queue_ce0,
        we0 => queue_we0,
        d0 => queue_d0,
        q0 => queue_q0);

    queue_1_U : component bfs_queue_RAM_1WNR_BRAM_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => queue_1_address0,
        ce0 => queue_1_ce0,
        we0 => queue_1_we0,
        d0 => tmp_dst_reg_1059,
        q0 => queue_1_q0);

    mux_21_64_1_1_U1 : component bfs_mux_21_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 1,
        dout_WIDTH => 64)
    port map (
        din0 => queue_q0,
        din1 => queue_1_q0,
        din2 => tmp_1_reg_1006,
        dout => n_fu_499_p4);

    mux_21_64_1_1_U2 : component bfs_mux_21_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 1,
        dout_WIDTH => 64)
    port map (
        din0 => edges_0_q0,
        din1 => edges_1_q0,
        din2 => tmp_dst_fu_587_p3,
        dout => tmp_dst_fu_587_p4);

    mul_7ns_9ns_15_1_1_U3 : component bfs_mul_7ns_9ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln48_fu_712_p0,
        din1 => mul_ln48_fu_712_p1,
        dout => mul_ln48_fu_712_p2);

    urem_7ns_3ns_7_11_seq_1_U4 : component bfs_urem_7ns_3ns_7_11_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 3,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_742_ap_start,
        done => grp_fu_742_ap_done,
        din0 => grp_fu_742_p0,
        din1 => grp_fu_742_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_742_p2);

    mux_21_64_1_1_U5 : component bfs_mux_21_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 1,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_9_fu_800_p1,
        din1 => tmp_9_fu_800_p2,
        din2 => trunc_ln48_reg_1114,
        dout => tmp_9_fu_800_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    dummy_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                dummy_fu_142 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln41_fu_556_p2 = ap_const_lv1_0))) then 
                dummy_fu_142 <= dummy_2_reg_977;
            end if; 
        end if;
    end process;

    e_1_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                e_1_reg_314 <= e_2_fu_931_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                e_1_reg_314 <= tmp_begin_fu_531_p1;
            end if; 
        end if;
    end process;

    q_in_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                q_in_fu_146(0) <= '0';
                q_in_fu_146(1) <= '1';
                q_in_fu_146(2) <= '0';
                q_in_fu_146(3) <= '0';
                q_in_fu_146(4) <= '0';
                q_in_fu_146(5) <= '0';
                q_in_fu_146(6) <= '0';
                q_in_fu_146(7) <= '0';
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln45_reg_1085 = ap_const_lv1_1))) then 
                                q_in_fu_146(7 downto 0) <= zext_ln18_fu_922_p1(7 downto 0);
            end if; 
        end if;
    end process;

    q_out_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                q_out_fu_138 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln41_fu_556_p2 = ap_const_lv1_0))) then 
                q_out_fu_138 <= q_out_1_reg_985;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln48_reg_1139 <= add_ln48_fu_809_p2;
                level_counts_0_load_1_reg_1129 <= level_counts_0_q0;
                level_counts_1_load_reg_1134 <= level_counts_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                dummy_2_reg_977 <= dummy_2_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                empty_20_reg_1016 <= empty_20_fu_517_p1;
                lshr_ln1_reg_1021 <= n_fu_499_p4(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln45_reg_1085 <= icmp_ln45_fu_637_p2;
                level_load_1_reg_1080 <= level_q0;
                    shl_ln1_reg_1075(3) <= shl_ln1_fu_616_p3(3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                level_addr_1_reg_1041 <= zext_ln46_fu_552_p1(7 - 1 downto 0);
                    tmp_2_reg_1036(3) <= tmp_2_fu_545_p3(3);
                tmp_end_reg_1031 <= nodes_q0(127 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                level_addr_2_reg_1070 <= zext_ln43_fu_611_p1(7 - 1 downto 0);
                tmp_dst_reg_1059 <= tmp_dst_fu_587_p4;
                trunc_ln43_reg_1065 <= trunc_ln43_fu_597_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                level_addr_reg_964 <= zext_ln30_fu_343_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                level_counts_0_addr_1_reg_1119 <= zext_ln48_1_fu_752_p1(2 - 1 downto 0);
                level_counts_1_addr_reg_1124 <= zext_ln48_1_fu_752_p1(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                or_ln47_reg_1089 <= or_ln47_fu_692_p2;
                tmp_4_reg_1099 <= mul_ln48_fu_712_p2(9 downto 9);
                tmp_5_reg_1104 <= mul_ln48_fu_712_p2(9 downto 9);
                tmp_6_reg_1109 <= mul_ln48_fu_712_p2(9 downto 9);
                trunc_ln48_reg_1114 <= trunc_ln48_fu_748_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_413_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                q_out_1_reg_985 <= q_out_1_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((tmp_fu_413_p3 = ap_const_lv1_0) and (icmp_ln35_fu_434_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln35_fu_466_p2)) or ((tmp_fu_413_p3 = ap_const_lv1_0) and (icmp_ln35_1_fu_472_p2 = ap_const_lv1_0) and (icmp_ln35_fu_434_p2 = ap_const_lv1_1))))) then
                tmp_1_reg_1006 <= q_out_fu_138(7 downto 7);
            end if;
        end if;
    end process;
    tmp_2_reg_1036(2 downto 0) <= "000";
    shl_ln1_reg_1075(2 downto 0) <= "000";
    q_in_fu_146(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, tmp_fu_413_p3, icmp_ln35_fu_434_p2, icmp_ln35_1_fu_472_p2, and_ln35_fu_466_p2, ap_CS_fsm_state6, icmp_ln41_fu_556_p2, ap_CS_fsm_state8, icmp_ln45_fu_637_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_fu_413_p3 = ap_const_lv1_1) or (((ap_const_lv1_1 = and_ln35_fu_466_p2) and (icmp_ln35_fu_434_p2 = ap_const_lv1_0)) or ((icmp_ln35_1_fu_472_p2 = ap_const_lv1_1) and (icmp_ln35_fu_434_p2 = ap_const_lv1_1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln41_fu_556_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln45_fu_637_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln35_fu_444_p2 <= std_logic_vector(unsigned(zext_ln34_1_fu_440_p1) + unsigned(ap_const_lv9_1));
    add_ln48_fu_809_p2 <= std_logic_vector(unsigned(tmp_9_fu_800_p4) + unsigned(ap_const_lv64_1));
    add_ln49_fu_884_p2 <= std_logic_vector(unsigned(trunc_ln41_1_fu_880_p1) + unsigned(ap_const_lv8_FF));
    and_ln30_fu_390_p2 <= (xor_ln30_fu_384_p2 and level_q0);
    and_ln35_fu_466_p2 <= (icmp_ln35_3_fu_460_p2 and grp_fu_327_p2);
    and_ln47_fu_677_p2 <= (xor_ln47_fu_671_p2 and level_load_1_reg_1080);
    and_ln48_1_fu_838_p2 <= (xor_ln48_fu_832_p2 and level_counts_0_load_1_reg_1129);
    and_ln48_fu_859_p2 <= (xor_ln48_fu_832_p2 and level_counts_1_load_reg_1134);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state3, tmp_fu_413_p3, icmp_ln35_fu_434_p2, icmp_ln35_1_fu_472_p2, and_ln35_fu_466_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_fu_413_p3 = ap_const_lv1_1) or (((ap_const_lv1_1 = and_ln35_fu_466_p2) and (icmp_ln35_fu_434_p2 = ap_const_lv1_0)) or ((icmp_ln35_1_fu_472_p2 = ap_const_lv1_1) and (icmp_ln35_fu_434_p2 = ap_const_lv1_1)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, tmp_fu_413_p3, icmp_ln35_fu_434_p2, icmp_ln35_1_fu_472_p2, and_ln35_fu_466_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_fu_413_p3 = ap_const_lv1_1) or (((ap_const_lv1_1 = and_ln35_fu_466_p2) and (icmp_ln35_fu_434_p2 = ap_const_lv1_0)) or ((icmp_ln35_1_fu_472_p2 = ap_const_lv1_1) and (icmp_ln35_fu_434_p2 = ap_const_lv1_1)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dummy_2_fu_421_p2 <= std_logic_vector(unsigned(dummy_fu_142) + unsigned(ap_const_lv9_1));
    e_2_fu_931_p2 <= std_logic_vector(unsigned(e_1_reg_314) + unsigned(ap_const_lv64_1));
    edges_0_address0 <= zext_ln42_fu_565_p1(11 - 1 downto 0);

    edges_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            edges_0_ce0 <= ap_const_logic_1;
        else 
            edges_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edges_1_address0 <= zext_ln42_fu_565_p1(11 - 1 downto 0);

    edges_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            edges_1_ce0 <= ap_const_logic_1;
        else 
            edges_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_20_fu_517_p1 <= n_fu_499_p4(1 - 1 downto 0);
    grp_fu_327_p2 <= "1" when (q_in_fu_146 = ap_const_lv64_0) else "0";

    grp_fu_742_ap_start_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_742_ap_start <= ap_const_logic_1;
        else 
            grp_fu_742_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_742_p0 <= tmp_level_1_fu_656_p2(7 downto 1);
    grp_fu_742_p1 <= ap_const_lv7_3(3 - 1 downto 0);
    icmp_ln35_1_fu_472_p2 <= "1" when (q_in_fu_146 = zext_ln35_fu_450_p1) else "0";
    icmp_ln35_3_fu_460_p2 <= "1" when (q_out_fu_138 = ap_const_lv8_FF) else "0";
    icmp_ln35_fu_434_p2 <= "1" when (unsigned(q_in_fu_146) > unsigned(zext_ln34_fu_430_p1)) else "0";
    icmp_ln41_fu_556_p2 <= "1" when (unsigned(e_1_reg_314) < unsigned(tmp_end_reg_1031)) else "0";
    icmp_ln45_fu_637_p2 <= "1" when (tmp_level_fu_633_p1 = ap_const_lv8_7F) else "0";

    level_address0_assign_proc : process(ap_CS_fsm_state1, level_addr_reg_964, level_addr_1_reg_1041, ap_CS_fsm_state7, level_addr_2_reg_1070, ap_CS_fsm_state8, zext_ln30_fu_343_p1, zext_ln43_fu_611_p1, ap_CS_fsm_state2, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            level_address0 <= level_addr_2_reg_1070;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            level_address0 <= level_addr_1_reg_1041;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            level_address0 <= zext_ln43_fu_611_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            level_address0 <= level_addr_reg_964;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_address0 <= zext_ln30_fu_343_p1(7 - 1 downto 0);
        else 
            level_address0 <= "XXXXXXX";
        end if; 
    end process;


    level_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            level_ce0 <= ap_const_logic_1;
        else 
            level_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    level_counts_0_addr_reg_969 <= ap_const_lv64_0(2 - 1 downto 0);

    level_counts_0_address0_assign_proc : process(ap_CS_fsm_state1, level_counts_0_addr_reg_969, level_counts_0_addr_1_reg_1119, ap_CS_fsm_state19, ap_CS_fsm_state21, zext_ln48_1_fu_752_p1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            level_counts_0_address0 <= level_counts_0_addr_1_reg_1119;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            level_counts_0_address0 <= zext_ln48_1_fu_752_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            level_counts_0_address0 <= level_counts_0_addr_reg_969;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_counts_0_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            level_counts_0_address0 <= "XX";
        end if; 
    end process;


    level_counts_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            level_counts_0_ce0 <= ap_const_logic_1;
        else 
            level_counts_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    level_counts_0_d0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state2, tmp_s_fu_397_p5, or_ln48_1_fu_852_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            level_counts_0_d0 <= or_ln48_1_fu_852_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            level_counts_0_d0 <= tmp_s_fu_397_p5;
        else 
            level_counts_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    level_counts_0_we0_assign_proc : process(icmp_ln45_reg_1085, trunc_ln48_reg_1114, ap_CS_fsm_state21, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (trunc_ln48_reg_1114 = ap_const_lv1_0) and (icmp_ln45_reg_1085 = ap_const_lv1_1)))) then 
            level_counts_0_we0 <= ap_const_logic_1;
        else 
            level_counts_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    level_counts_1_address0_assign_proc : process(ap_CS_fsm_state19, level_counts_1_addr_reg_1124, ap_CS_fsm_state21, zext_ln48_1_fu_752_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            level_counts_1_address0 <= level_counts_1_addr_reg_1124;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            level_counts_1_address0 <= zext_ln48_1_fu_752_p1(2 - 1 downto 0);
        else 
            level_counts_1_address0 <= "XX";
        end if; 
    end process;


    level_counts_1_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            level_counts_1_ce0 <= ap_const_logic_1;
        else 
            level_counts_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    level_counts_1_d0 <= (shl_ln48_1_fu_867_p2 or and_ln48_fu_859_p2);

    level_counts_1_we0_assign_proc : process(icmp_ln45_reg_1085, trunc_ln48_reg_1114, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (trunc_ln48_reg_1114 = ap_const_lv1_1) and (icmp_ln45_reg_1085 = ap_const_lv1_1))) then 
            level_counts_1_we0 <= ap_const_logic_1;
        else 
            level_counts_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    level_d0_assign_proc : process(or_ln47_reg_1089, ap_CS_fsm_state2, and_ln30_fu_390_p2, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            level_d0 <= or_ln47_reg_1089;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            level_d0 <= and_ln30_fu_390_p2;
        else 
            level_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    level_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            level_we0 <= ap_const_logic_1;
        else 
            level_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln2_fu_601_p4 <= tmp_dst_fu_587_p4(7 downto 1);
    lshr_ln43_fu_627_p2 <= std_logic_vector(shift_right(unsigned(level_q0),to_integer(unsigned('0' & zext_ln43_1_fu_623_p1(16-1 downto 0)))));
    lshr_ln46_fu_646_p2 <= std_logic_vector(shift_right(unsigned(level_q0),to_integer(unsigned('0' & zext_ln46_1_fu_643_p1(16-1 downto 0)))));
    lshr_ln48_1_fu_790_p2 <= std_logic_vector(shift_right(unsigned(level_counts_1_q0),to_integer(unsigned('0' & zext_ln48_3_fu_786_p1(31-1 downto 0)))));
    lshr_ln48_fu_769_p2 <= std_logic_vector(shift_right(unsigned(level_counts_0_q0),to_integer(unsigned('0' & zext_ln48_2_fu_765_p1(31-1 downto 0)))));
    lshr_ln_fu_333_p4 <= starting_node(7 downto 1);
    mul_ln48_fu_712_p0 <= mul_ln48_fu_712_p00(7 - 1 downto 0);
    mul_ln48_fu_712_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln48_1_fu_698_p4),15));
    mul_ln48_fu_712_p1 <= ap_const_lv15_AB(9 - 1 downto 0);
    nodes_address0 <= zext_ln39_fu_512_p1(8 - 1 downto 0);

    nodes_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            nodes_ce0 <= ap_const_logic_1;
        else 
            nodes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln47_fu_692_p2 <= (shl_ln47_1_fu_686_p2 or and_ln47_fu_677_p2);
    or_ln48_1_fu_852_p2 <= (shl_ln48_2_fu_846_p2 or and_ln48_1_fu_838_p2);
    q_in_1_fu_916_p2 <= std_logic_vector(unsigned(trunc_ln41_1_fu_880_p1) + unsigned(ap_const_lv8_1));
    q_out_1_fu_454_p2 <= std_logic_vector(unsigned(q_out_fu_138) + unsigned(ap_const_lv8_1));

    queue_1_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state21, zext_ln37_fu_485_p1, zext_ln49_fu_902_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            queue_1_address0 <= zext_ln49_fu_902_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            queue_1_address0 <= zext_ln37_fu_485_p1(7 - 1 downto 0);
        else 
            queue_1_address0 <= "XXXXXXX";
        end if; 
    end process;


    queue_1_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            queue_1_ce0 <= ap_const_logic_1;
        else 
            queue_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_1_we0_assign_proc : process(icmp_ln45_reg_1085, ap_CS_fsm_state21, tmp_11_fu_908_p3)
    begin
        if (((tmp_11_fu_908_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln45_reg_1085 = ap_const_lv1_1))) then 
            queue_1_we0 <= ap_const_logic_1;
        else 
            queue_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state21, zext_ln37_fu_485_p1, zext_ln49_fu_902_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            queue_address0 <= zext_ln49_fu_902_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            queue_address0 <= zext_ln37_fu_485_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            queue_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            queue_address0 <= "XXXXXXX";
        end if; 
    end process;


    queue_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            queue_ce0 <= ap_const_logic_1;
        else 
            queue_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_d0_assign_proc : process(ap_CS_fsm_state1, starting_node, tmp_dst_reg_1059, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            queue_d0 <= tmp_dst_reg_1059;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            queue_d0 <= starting_node;
        else 
            queue_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    queue_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln45_reg_1085, ap_CS_fsm_state21, tmp_11_fu_908_p3)
    begin
        if ((((tmp_11_fu_908_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln45_reg_1085 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            queue_we0 <= ap_const_logic_1;
        else 
            queue_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln49_fu_890_p3 <= 
        ap_const_lv8_FF when (grp_fu_327_p2(0) = '1') else 
        add_ln49_fu_884_p2;
    shl_ln1_fu_616_p3 <= (trunc_ln43_reg_1065 & ap_const_lv3_0);
    shl_ln30_fu_378_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_FF),to_integer(unsigned('0' & zext_ln30_1_fu_374_p1(16-1 downto 0)))));
    shl_ln47_1_fu_686_p2 <= std_logic_vector(shift_left(unsigned(zext_ln47_1_fu_682_p1),to_integer(unsigned('0' & zext_ln47_fu_662_p1(16-1 downto 0)))));
    shl_ln47_fu_665_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_FF),to_integer(unsigned('0' & zext_ln47_fu_662_p1(16-1 downto 0)))));
    shl_ln48_1_fu_867_p2 <= std_logic_vector(shift_left(unsigned(zext_ln48_5_fu_864_p1),to_integer(unsigned('0' & zext_ln48_4_fu_822_p1(31-1 downto 0)))));
    shl_ln48_2_fu_846_p2 <= std_logic_vector(shift_left(unsigned(zext_ln48_6_fu_843_p1),to_integer(unsigned('0' & zext_ln48_4_fu_822_p1(31-1 downto 0)))));
    shl_ln48_fu_826_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln48_4_fu_822_p1(31-1 downto 0)))));
    shl_ln_fu_366_p3 <= (trunc_ln30_fu_363_p1 & ap_const_lv3_0);
    tmp_10_fu_815_p3 <= (tmp_4_reg_1099 & ap_const_lv6_0);
    tmp_11_fu_908_p3 <= select_ln49_fu_890_p3(7 downto 7);
    tmp_2_fu_545_p3 <= (empty_20_reg_1016 & ap_const_lv3_0);
    tmp_7_fu_758_p3 <= (tmp_6_reg_1109 & ap_const_lv6_0);
    tmp_8_fu_779_p3 <= (tmp_5_reg_1104 & ap_const_lv6_0);
    tmp_9_fu_800_p1 <= lshr_ln48_fu_769_p2(64 - 1 downto 0);
    tmp_9_fu_800_p2 <= lshr_ln48_1_fu_790_p2(64 - 1 downto 0);
    tmp_begin_fu_531_p1 <= nodes_q0(64 - 1 downto 0);
    tmp_dst_fu_587_p3 <= e_1_reg_314(11 downto 11);
    tmp_fu_413_p3 <= dummy_fu_142(8 downto 8);
    tmp_level_1_fu_656_p2 <= std_logic_vector(unsigned(trunc_ln46_fu_652_p1) + unsigned(ap_const_lv8_1));
    tmp_level_fu_633_p1 <= lshr_ln43_fu_627_p2(8 - 1 downto 0);
    tmp_s_fu_397_p5 <= (level_counts_0_q0(127 downto 64) & ap_const_lv64_1);
    trunc_ln20_fu_508_p1 <= n_fu_499_p4(8 - 1 downto 0);
    trunc_ln30_fu_363_p1 <= starting_node(1 - 1 downto 0);
    trunc_ln34_fu_481_p1 <= q_out_fu_138(7 - 1 downto 0);
    trunc_ln41_1_fu_880_p1 <= q_in_fu_146(8 - 1 downto 0);
    trunc_ln41_fu_561_p1 <= e_1_reg_314(11 - 1 downto 0);
    trunc_ln43_fu_597_p1 <= tmp_dst_fu_587_p4(1 - 1 downto 0);
    trunc_ln46_fu_652_p1 <= lshr_ln46_fu_646_p2(8 - 1 downto 0);
    trunc_ln48_1_fu_698_p4 <= tmp_level_1_fu_656_p2(7 downto 1);
    trunc_ln48_fu_748_p1 <= tmp_level_1_fu_656_p2(1 - 1 downto 0);
    trunc_ln49_fu_898_p1 <= select_ln49_fu_890_p3(7 - 1 downto 0);
    xor_ln30_fu_384_p2 <= (shl_ln30_fu_378_p2 xor ap_const_lv16_FFFF);
    xor_ln47_fu_671_p2 <= (shl_ln47_fu_665_p2 xor ap_const_lv16_FFFF);
    xor_ln48_fu_832_p2 <= (shl_ln48_fu_826_p2 xor ap_const_lv128_lc_2);
    zext_ln18_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_in_1_fu_916_p2),64));
    zext_ln30_1_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_366_p3),16));
    zext_ln30_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_333_p4),64));
    zext_ln34_1_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_out_fu_138),9));
    zext_ln34_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_out_fu_138),64));
    zext_ln35_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_444_p2),64));
    zext_ln37_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln34_fu_481_p1),64));
    zext_ln39_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln20_fu_508_p1),64));
    zext_ln42_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln41_fu_561_p1),64));
    zext_ln43_1_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_616_p3),16));
    zext_ln43_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_601_p4),64));
    zext_ln46_1_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1036),16));
    zext_ln46_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_reg_1021),64));
    zext_ln47_1_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_level_1_fu_656_p2),16));
    zext_ln47_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_reg_1075),16));
    zext_ln48_1_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_742_p2),64));
    zext_ln48_2_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_758_p3),128));
    zext_ln48_3_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_779_p3),128));
    zext_ln48_4_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_815_p3),128));
    zext_ln48_5_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_reg_1139),128));
    zext_ln48_6_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_reg_1139),128));
    zext_ln49_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln49_fu_898_p1),64));
end behav;
