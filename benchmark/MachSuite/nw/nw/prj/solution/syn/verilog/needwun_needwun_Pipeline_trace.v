// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module needwun_needwun_Pipeline_trace (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        SEQA_0_address0,
        SEQA_0_ce0,
        SEQA_0_q0,
        SEQA_1_address0,
        SEQA_1_ce0,
        SEQA_1_q0,
        SEQB_address0,
        SEQB_ce0,
        SEQB_q0,
        ptr_address0,
        ptr_ce0,
        ptr_q0,
        alignedA_address0,
        alignedA_ce0,
        alignedA_we0,
        alignedA_d0,
        alignedB_address0,
        alignedB_ce0,
        alignedB_we0,
        alignedB_d0,
        b_str_idx_out,
        b_str_idx_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 38'd1;
parameter    ap_ST_fsm_pp0_stage1 = 38'd2;
parameter    ap_ST_fsm_pp0_stage2 = 38'd4;
parameter    ap_ST_fsm_pp0_stage3 = 38'd8;
parameter    ap_ST_fsm_pp0_stage4 = 38'd16;
parameter    ap_ST_fsm_pp0_stage5 = 38'd32;
parameter    ap_ST_fsm_pp0_stage6 = 38'd64;
parameter    ap_ST_fsm_pp0_stage7 = 38'd128;
parameter    ap_ST_fsm_pp0_stage8 = 38'd256;
parameter    ap_ST_fsm_pp0_stage9 = 38'd512;
parameter    ap_ST_fsm_pp0_stage10 = 38'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 38'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 38'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 38'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 38'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 38'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 38'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 38'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 38'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 38'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 38'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 38'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 38'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 38'd8388608;
parameter    ap_ST_fsm_pp0_stage24 = 38'd16777216;
parameter    ap_ST_fsm_pp0_stage25 = 38'd33554432;
parameter    ap_ST_fsm_pp0_stage26 = 38'd67108864;
parameter    ap_ST_fsm_pp0_stage27 = 38'd134217728;
parameter    ap_ST_fsm_pp0_stage28 = 38'd268435456;
parameter    ap_ST_fsm_pp0_stage29 = 38'd536870912;
parameter    ap_ST_fsm_pp0_stage30 = 38'd1073741824;
parameter    ap_ST_fsm_pp0_stage31 = 38'd2147483648;
parameter    ap_ST_fsm_pp0_stage32 = 38'd4294967296;
parameter    ap_ST_fsm_pp0_stage33 = 38'd8589934592;
parameter    ap_ST_fsm_pp0_stage34 = 38'd17179869184;
parameter    ap_ST_fsm_pp0_stage35 = 38'd34359738368;
parameter    ap_ST_fsm_pp0_stage36 = 38'd68719476736;
parameter    ap_ST_fsm_pp0_stage37 = 38'd137438953472;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] SEQA_0_address0;
output   SEQA_0_ce0;
input  [15:0] SEQA_0_q0;
output  [4:0] SEQA_1_address0;
output   SEQA_1_ce0;
input  [15:0] SEQA_1_q0;
output  [5:0] SEQB_address0;
output   SEQB_ce0;
input  [15:0] SEQB_q0;
output  [13:0] ptr_address0;
output   ptr_ce0;
input  [15:0] ptr_q0;
output  [7:0] alignedA_address0;
output   alignedA_ce0;
output   alignedA_we0;
output  [7:0] alignedA_d0;
output  [7:0] alignedB_address0;
output   alignedB_ce0;
output   alignedB_we0;
output  [7:0] alignedB_d0;
output  [31:0] b_str_idx_out;
output   b_str_idx_out_ap_vld;

reg ap_idle;
reg[4:0] SEQA_0_address0;
reg SEQA_0_ce0;
reg[4:0] SEQA_1_address0;
reg SEQA_1_ce0;
reg[5:0] SEQB_address0;
reg SEQB_ce0;
reg ptr_ce0;
reg[7:0] alignedA_address0;
reg alignedA_ce0;
reg alignedA_we0;
reg[7:0] alignedA_d0;
reg[7:0] alignedB_address0;
reg alignedB_ce0;
reg alignedB_we0;
reg[7:0] alignedB_d0;
reg b_str_idx_out_ap_vld;

(* fsm_encoding = "none" *) reg   [37:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage37;
wire    ap_block_state38_pp0_stage37_iter0;
wire    ap_block_pp0_stage37_subdone;
reg   [0:0] or_ln64_reg_654;
reg    ap_condition_exit_pp0_iter0_stage37;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [25:0] reg_243;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state39_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] trunc_ln66_fu_362_p1;
reg   [15:0] reg_247;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state40_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] trunc_ln66_reg_678;
reg  signed [31:0] b_idx_1_reg_637;
reg   [31:0] a_idx_1_reg_644;
wire   [0:0] or_ln64_fu_284_p2;
wire   [31:0] r_fu_290_p2;
reg   [31:0] r_reg_658;
wire   [31:0] add_ln66_fu_296_p2;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state41_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] tmp_reg_668;
wire    ap_block_pp0_stage37_11001;
reg   [7:0] alignedA_addr_reg_682;
reg   [7:0] alignedB_addr_reg_687;
reg   [0:0] tmp_7_reg_692;
reg   [0:0] tmp_4_reg_707;
reg   [0:0] tmp_5_reg_722;
reg   [0:0] tmp_2_reg_732;
wire   [3:0] shl_ln9_fu_483_p3;
reg   [3:0] shl_ln9_reg_742;
wire   [7:0] trunc_ln73_2_fu_500_p1;
reg   [7:0] trunc_ln73_2_reg_747;
wire   [3:0] shl_ln7_fu_504_p3;
reg   [3:0] shl_ln7_reg_752;
wire   [7:0] trunc_ln67_2_fu_521_p1;
reg   [7:0] trunc_ln67_2_reg_757;
reg   [15:0] SEQB_load_1_reg_762;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state42_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
wire   [63:0] zext_ln66_1_fu_324_p1;
wire    ap_block_pp0_stage37;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln73_fu_392_p1;
wire   [63:0] zext_ln67_fu_429_p1;
wire   [63:0] zext_ln68_fu_444_p1;
wire   [63:0] zext_ln79_fu_468_p1;
reg   [63:0] a_str_idx_fu_92;
wire   [63:0] add_ln68_fu_339_p2;
wire    ap_loop_init;
reg  signed [31:0] b_idx_fu_96;
wire   [31:0] grp_fu_230_p2;
wire    ap_block_pp0_stage1;
reg   [31:0] a_idx_fu_100;
wire   [31:0] grp_fu_215_p2;
wire    ap_block_pp0_stage0_01001;
wire   [7:0] trunc_ln79_1_fu_542_p1;
wire    ap_block_pp0_stage3_11001;
wire   [7:0] trunc_ln68_1_fu_609_p1;
wire    ap_block_pp0_stage3;
wire   [7:0] tmp_8_fu_560_p4;
wire    ap_block_pp0_stage2;
wire   [7:0] tmp_s_fu_583_p4;
wire  signed [31:0] icmp_ln64_1_fu_278_p0;
wire   [0:0] icmp_ln64_fu_272_p2;
wire   [0:0] icmp_ln64_1_fu_278_p2;
wire   [8:0] r_fu_290_p1;
wire   [31:0] mul_ln66_fu_304_p0;
wire   [33:0] mul_ln66_fu_304_p1;
wire   [64:0] mul_ln66_fu_304_p2;
wire   [14:0] grp_fu_318_p1;
wire   [31:0] grp_fu_318_p2;
wire   [3:0] tmp_1_fu_345_p3;
wire   [15:0] zext_ln66_2_fu_352_p1;
wire   [15:0] lshr_ln66_fu_356_p2;
wire   [4:0] trunc_ln73_1_fu_369_p1;
wire   [5:0] trunc_ln73_fu_366_p1;
wire   [5:0] add_ln73_2_fu_378_p2;
wire   [4:0] add_ln73_1_fu_372_p2;
wire   [4:0] trunc_ln67_1_fu_406_p1;
wire   [5:0] trunc_ln67_fu_403_p1;
wire   [5:0] add_ln67_2_fu_415_p2;
wire   [4:0] add_ln67_1_fu_409_p2;
wire   [5:0] trunc_ln68_fu_435_p1;
wire   [5:0] add_ln68_2_fu_438_p2;
wire   [5:0] trunc_ln79_fu_459_p1;
wire   [5:0] add_ln79_1_fu_462_p2;
wire   [15:0] zext_ln73_1_fu_490_p1;
wire   [15:0] lshr_ln73_fu_494_p2;
wire   [15:0] zext_ln67_1_fu_511_p1;
wire   [15:0] lshr_ln67_fu_515_p2;
wire   [3:0] tmp_3_fu_525_p3;
wire   [15:0] zext_ln79_1_fu_532_p1;
wire   [15:0] lshr_ln79_fu_536_p2;
wire   [15:0] zext_ln73_2_fu_547_p1;
wire   [15:0] lshr_ln73_1_fu_550_p2;
wire   [7:0] tmp_8_fu_560_p2;
wire   [15:0] zext_ln67_2_fu_570_p1;
wire   [15:0] lshr_ln67_1_fu_573_p2;
wire   [7:0] tmp_s_fu_583_p2;
wire   [3:0] tmp_6_fu_593_p3;
wire   [15:0] zext_ln68_1_fu_600_p1;
wire   [15:0] lshr_ln68_fu_604_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_idle_pp0_0to0;
reg   [37:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_done_pending_pp0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_state20_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_state21_pp0_stage20_iter0;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_state22_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_state23_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_state24_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_state25_pp0_stage24_iter0;
wire    ap_block_pp0_stage24_subdone;
wire    ap_block_state26_pp0_stage25_iter0;
wire    ap_block_pp0_stage25_subdone;
wire    ap_block_state27_pp0_stage26_iter0;
wire    ap_block_pp0_stage26_subdone;
wire    ap_block_state28_pp0_stage27_iter0;
wire    ap_block_pp0_stage27_subdone;
wire    ap_block_state29_pp0_stage28_iter0;
wire    ap_block_pp0_stage28_subdone;
wire    ap_block_state30_pp0_stage29_iter0;
wire    ap_block_pp0_stage29_subdone;
wire    ap_block_state31_pp0_stage30_iter0;
wire    ap_block_pp0_stage30_subdone;
wire    ap_block_state32_pp0_stage31_iter0;
wire    ap_block_pp0_stage31_subdone;
wire    ap_block_state33_pp0_stage32_iter0;
wire    ap_block_pp0_stage32_subdone;
wire    ap_block_state34_pp0_stage33_iter0;
wire    ap_block_pp0_stage33_subdone;
wire    ap_block_state35_pp0_stage34_iter0;
wire    ap_block_pp0_stage34_subdone;
wire    ap_block_state36_pp0_stage35_iter0;
wire    ap_block_pp0_stage35_subdone;
wire    ap_block_state37_pp0_stage36_iter0;
wire    ap_block_pp0_stage36_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [64:0] mul_ln66_fu_304_p00;
reg    ap_condition_278;
reg    ap_condition_814;
reg    ap_condition_817;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 38'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

needwun_mul_32s_9ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 32 ))
mul_32s_9ns_32_1_1_U85(
    .din0(b_idx_fu_96),
    .din1(r_fu_290_p1),
    .dout(r_fu_290_p2)
);

needwun_mul_32ns_34ns_65_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32ns_34ns_65_1_1_U86(
    .din0(mul_ln66_fu_304_p0),
    .din1(mul_ln66_fu_304_p1),
    .dout(mul_ln66_fu_304_p2)
);

needwun_urem_32ns_15ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 32 ))
urem_32ns_15ns_32_36_1_U87(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln66_fu_296_p2),
    .din1(grp_fu_318_p1),
    .ce(1'b1),
    .dout(grp_fu_318_p2)
);

needwun_mux_226_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 8 ))
mux_226_8_1_1_U88(
    .din0(trunc_ln73_2_reg_747),
    .din1(tmp_8_fu_560_p2),
    .din2(reg_243),
    .dout(tmp_8_fu_560_p4)
);

needwun_mux_226_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 8 ))
mux_226_8_1_1_U89(
    .din0(trunc_ln67_2_reg_757),
    .din1(tmp_s_fu_583_p2),
    .din2(reg_243),
    .dout(tmp_s_fu_583_p4)
);

needwun_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage37),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter1_stage0) | ((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage37_subdone) & (1'b1 == ap_CS_fsm_pp0_stage37))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_idx_fu_100 <= 32'd128;
    end else if ((((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd92)) | ((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd60)))) begin
        a_idx_fu_100 <= grp_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            a_str_idx_fu_92 <= 64'd0;
        end else if (((or_ln64_reg_654 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            a_str_idx_fu_92 <= add_ln68_fu_339_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage37_11001) & (1'b1 == ap_CS_fsm_pp0_stage37))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_idx_fu_96 <= 32'd128;
    end else if (((~(trunc_ln66_fu_362_p1 == 8'd92) & ~(trunc_ln66_fu_362_p1 == 8'd60) & (or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd92)))) begin
        b_idx_fu_96 <= grp_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln66_reg_678 == 8'd92))) begin
        SEQB_load_1_reg_762 <= SEQB_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_idx_1_reg_644 <= a_idx_fu_100;
        b_idx_1_reg_637 <= b_idx_fu_96;
        or_ln64_reg_654 <= or_ln64_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        alignedA_addr_reg_682 <= a_str_idx_fu_92;
        alignedB_addr_reg_687 <= a_str_idx_fu_92;
        trunc_ln66_reg_678 <= trunc_ln66_fu_362_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln64_fu_284_p2 == 1'd1))) begin
        r_reg_658 <= r_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd92)) | ((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd60)))) begin
        reg_243 <= {{grp_fu_215_p2[31:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln66_reg_678 == 8'd92)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln66_reg_678 == 8'd60)))) begin
        reg_247 <= SEQA_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln66_reg_678 == 8'd92))) begin
        shl_ln7_reg_752[3] <= shl_ln7_fu_504_p3[3];
        trunc_ln67_2_reg_757 <= trunc_ln67_2_fu_521_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln66_reg_678 == 8'd60))) begin
        shl_ln9_reg_742[3] <= shl_ln9_fu_483_p3[3];
        trunc_ln73_2_reg_747 <= trunc_ln73_2_fu_500_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(trunc_ln66_fu_362_p1 == 8'd92) & ~(trunc_ln66_fu_362_p1 == 8'd60) & (or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_732 <= grp_fu_230_p2[32'd6];
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd92))) begin
        tmp_4_reg_707 <= add_ln67_2_fu_415_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd92))) begin
        tmp_5_reg_722 <= grp_fu_230_p2[32'd6];
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd60))) begin
        tmp_7_reg_692 <= add_ln73_2_fu_378_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_reg_668 <= mul_ln66_fu_304_p2[32'd46];
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_278)) begin
        if ((trunc_ln66_fu_362_p1 == 8'd92)) begin
            SEQA_0_address0 = zext_ln67_fu_429_p1;
        end else if ((trunc_ln66_fu_362_p1 == 8'd60)) begin
            SEQA_0_address0 = zext_ln73_fu_392_p1;
        end else begin
            SEQA_0_address0 = 'bx;
        end
    end else begin
        SEQA_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd92)) | ((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd60)))) begin
        SEQA_0_ce0 = 1'b1;
    end else begin
        SEQA_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_278)) begin
        if ((trunc_ln66_fu_362_p1 == 8'd92)) begin
            SEQA_1_address0 = zext_ln67_fu_429_p1;
        end else if ((trunc_ln66_fu_362_p1 == 8'd60)) begin
            SEQA_1_address0 = zext_ln73_fu_392_p1;
        end else begin
            SEQA_1_address0 = 'bx;
        end
    end else begin
        SEQA_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd92)) | ((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd60)))) begin
        SEQA_1_ce0 = 1'b1;
    end else begin
        SEQA_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_278)) begin
        if ((~(trunc_ln66_fu_362_p1 == 8'd92) & ~(trunc_ln66_fu_362_p1 == 8'd60))) begin
            SEQB_address0 = zext_ln79_fu_468_p1;
        end else if ((trunc_ln66_fu_362_p1 == 8'd92)) begin
            SEQB_address0 = zext_ln68_fu_444_p1;
        end else begin
            SEQB_address0 = 'bx;
        end
    end else begin
        SEQB_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~(trunc_ln66_fu_362_p1 == 8'd92) & ~(trunc_ln66_fu_362_p1 == 8'd60) & (or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd92)))) begin
        SEQB_ce0 = 1'b1;
    end else begin
        SEQB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (trunc_ln66_reg_678 == 8'd92)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (trunc_ln66_reg_678 == 8'd60)))) begin
        alignedA_address0 = alignedA_addr_reg_682;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        alignedA_address0 = a_str_idx_fu_92;
    end else begin
        alignedA_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (trunc_ln66_reg_678 == 8'd92)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (trunc_ln66_reg_678 == 8'd60)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        alignedA_ce0 = 1'b1;
    end else begin
        alignedA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_817)) begin
            alignedA_d0 = tmp_s_fu_583_p4;
        end else if ((1'b1 == ap_condition_814)) begin
            alignedA_d0 = tmp_8_fu_560_p4;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            alignedA_d0 = 8'd45;
        end else begin
            alignedA_d0 = 'bx;
        end
    end else begin
        alignedA_d0 = 'bx;
    end
end

always @ (*) begin
    if (((~(trunc_ln66_fu_362_p1 == 8'd92) & ~(trunc_ln66_fu_362_p1 == 8'd60) & (or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (trunc_ln66_reg_678 == 8'd92)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (trunc_ln66_reg_678 == 8'd60)))) begin
        alignedA_we0 = 1'b1;
    end else begin
        alignedA_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        alignedB_address0 = alignedB_addr_reg_687;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        alignedB_address0 = a_str_idx_fu_92;
    end else begin
        alignedB_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        alignedB_ce0 = 1'b1;
    end else begin
        alignedB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            alignedB_d0 = trunc_ln68_1_fu_609_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            alignedB_d0 = trunc_ln79_1_fu_542_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            alignedB_d0 = 8'd45;
        end else begin
            alignedB_d0 = 'bx;
        end
    end else begin
        alignedB_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (trunc_ln66_reg_678 == 8'd92)) | (~(trunc_ln66_reg_678 == 8'd92) & ~(trunc_ln66_reg_678 == 8'd60) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln66_fu_362_p1 == 8'd60)))) begin
        alignedB_we0 = 1'b1;
    end else begin
        alignedB_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln64_reg_654 == 1'd0) & (1'b0 == ap_block_pp0_stage37_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage37))) begin
        ap_condition_exit_pp0_iter0_stage37 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage37 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln64_reg_654 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage37_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage37))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln64_reg_654 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_str_idx_out_ap_vld = 1'b1;
    end else begin
        b_str_idx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage37_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage37))) begin
        ptr_ce0 = 1'b1;
    end else begin
        ptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((1'b0 == ap_block_pp0_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((1'b0 == ap_block_pp0_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((1'b0 == ap_block_pp0_stage32_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((1'b0 == ap_block_pp0_stage33_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        ap_ST_fsm_pp0_stage34 : begin
            if ((1'b0 == ap_block_pp0_stage34_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end
        end
        ap_ST_fsm_pp0_stage35 : begin
            if ((1'b0 == ap_block_pp0_stage35_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end
        end
        ap_ST_fsm_pp0_stage36 : begin
            if ((1'b0 == ap_block_pp0_stage36_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end
        end
        ap_ST_fsm_pp0_stage37 : begin
            if ((1'b0 == ap_block_pp0_stage37_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln66_fu_296_p2 = (r_reg_658 + a_idx_1_reg_644);

assign add_ln67_1_fu_409_p2 = ($signed(trunc_ln67_1_fu_406_p1) + $signed(5'd31));

assign add_ln67_2_fu_415_p2 = ($signed(trunc_ln67_fu_403_p1) + $signed(6'd63));

assign add_ln68_2_fu_438_p2 = ($signed(trunc_ln68_fu_435_p1) + $signed(6'd63));

assign add_ln68_fu_339_p2 = (a_str_idx_fu_92 + 64'd1);

assign add_ln73_1_fu_372_p2 = ($signed(trunc_ln73_1_fu_369_p1) + $signed(5'd31));

assign add_ln73_2_fu_378_p2 = ($signed(trunc_ln73_fu_366_p1) + $signed(6'd63));

assign add_ln79_1_fu_462_p2 = ($signed(trunc_ln79_fu_459_p1) + $signed(6'd63));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage37 = ap_CS_fsm[32'd37];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage30_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage32_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage33_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage34_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage35_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage36_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage37_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_278 = ((or_ln64_reg_654 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_814 = ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (trunc_ln66_reg_678 == 8'd60));
end

always @ (*) begin
    ap_condition_817 = ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (trunc_ln66_reg_678 == 8'd92));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage37;

assign b_str_idx_out = a_str_idx_fu_92[31:0];

assign grp_fu_215_p2 = ($signed(a_idx_1_reg_644) + $signed(32'd4294967295));

assign grp_fu_230_p2 = ($signed(b_idx_1_reg_637) + $signed(32'd4294967295));

assign grp_fu_318_p1 = 32'd8321;

assign icmp_ln64_1_fu_278_p0 = b_idx_fu_96;

assign icmp_ln64_1_fu_278_p2 = (($signed(icmp_ln64_1_fu_278_p0) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_272_p2 = (($signed(a_idx_fu_100) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign lshr_ln66_fu_356_p2 = ptr_q0 >> zext_ln66_2_fu_352_p1;

assign lshr_ln67_1_fu_573_p2 = reg_247 >> zext_ln67_2_fu_570_p1;

assign lshr_ln67_fu_515_p2 = SEQA_0_q0 >> zext_ln67_1_fu_511_p1;

assign lshr_ln68_fu_604_p2 = SEQB_load_1_reg_762 >> zext_ln68_1_fu_600_p1;

assign lshr_ln73_1_fu_550_p2 = reg_247 >> zext_ln73_2_fu_547_p1;

assign lshr_ln73_fu_494_p2 = SEQA_0_q0 >> zext_ln73_1_fu_490_p1;

assign lshr_ln79_fu_536_p2 = SEQB_q0 >> zext_ln79_1_fu_532_p1;

assign mul_ln66_fu_304_p0 = mul_ln66_fu_304_p00;

assign mul_ln66_fu_304_p00 = add_ln66_fu_296_p2;

assign mul_ln66_fu_304_p1 = 65'd8456765314;

assign or_ln64_fu_284_p2 = (icmp_ln64_fu_272_p2 | icmp_ln64_1_fu_278_p2);

assign ptr_address0 = zext_ln66_1_fu_324_p1;

assign r_fu_290_p1 = 32'd129;

assign shl_ln7_fu_504_p3 = {{tmp_4_reg_707}, {3'd0}};

assign shl_ln9_fu_483_p3 = {{tmp_7_reg_692}, {3'd0}};

assign tmp_1_fu_345_p3 = {{tmp_reg_668}, {3'd0}};

assign tmp_3_fu_525_p3 = {{tmp_2_reg_732}, {3'd0}};

assign tmp_6_fu_593_p3 = {{tmp_5_reg_722}, {3'd0}};

assign tmp_8_fu_560_p2 = lshr_ln73_1_fu_550_p2[7:0];

assign tmp_s_fu_583_p2 = lshr_ln67_1_fu_573_p2[7:0];

assign trunc_ln66_fu_362_p1 = lshr_ln66_fu_356_p2[7:0];

assign trunc_ln67_1_fu_406_p1 = a_idx_1_reg_644[4:0];

assign trunc_ln67_2_fu_521_p1 = lshr_ln67_fu_515_p2[7:0];

assign trunc_ln67_fu_403_p1 = a_idx_1_reg_644[5:0];

assign trunc_ln68_1_fu_609_p1 = lshr_ln68_fu_604_p2[7:0];

assign trunc_ln68_fu_435_p1 = b_idx_1_reg_637[5:0];

assign trunc_ln73_1_fu_369_p1 = a_idx_1_reg_644[4:0];

assign trunc_ln73_2_fu_500_p1 = lshr_ln73_fu_494_p2[7:0];

assign trunc_ln73_fu_366_p1 = a_idx_1_reg_644[5:0];

assign trunc_ln79_1_fu_542_p1 = lshr_ln79_fu_536_p2[7:0];

assign trunc_ln79_fu_459_p1 = b_idx_1_reg_637[5:0];

assign zext_ln66_1_fu_324_p1 = grp_fu_318_p2;

assign zext_ln66_2_fu_352_p1 = tmp_1_fu_345_p3;

assign zext_ln67_1_fu_511_p1 = shl_ln7_fu_504_p3;

assign zext_ln67_2_fu_570_p1 = shl_ln7_reg_752;

assign zext_ln67_fu_429_p1 = add_ln67_1_fu_409_p2;

assign zext_ln68_1_fu_600_p1 = tmp_6_fu_593_p3;

assign zext_ln68_fu_444_p1 = add_ln68_2_fu_438_p2;

assign zext_ln73_1_fu_490_p1 = shl_ln9_fu_483_p3;

assign zext_ln73_2_fu_547_p1 = shl_ln9_reg_742;

assign zext_ln73_fu_392_p1 = add_ln73_1_fu_372_p2;

assign zext_ln79_1_fu_532_p1 = tmp_3_fu_525_p3;

assign zext_ln79_fu_468_p1 = add_ln79_1_fu_462_p2;

always @ (posedge ap_clk) begin
    shl_ln9_reg_742[2:0] <= 3'b000;
    shl_ln7_reg_752[2:0] <= 3'b000;
end

endmodule //needwun_needwun_Pipeline_trace
