-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity needwun_needwun_Pipeline_fill_in is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ptr_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ptr_ce0 : OUT STD_LOGIC;
    ptr_we0 : OUT STD_LOGIC;
    ptr_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ptr_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    M_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    M_0_ce0 : OUT STD_LOGIC;
    M_0_we0 : OUT STD_LOGIC;
    M_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    M_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    M_0_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    M_0_ce1 : OUT STD_LOGIC;
    M_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    SEQA_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    SEQA_0_ce0 : OUT STD_LOGIC;
    SEQA_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    SEQA_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    SEQA_1_ce0 : OUT STD_LOGIC;
    SEQA_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    SEQB_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_cast21 : IN STD_LOGIC_VECTOR (3 downto 0);
    p_cast15 : IN STD_LOGIC_VECTOR (13 downto 0);
    M_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    M_1_ce0 : OUT STD_LOGIC;
    M_1_we0 : OUT STD_LOGIC;
    M_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    M_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    M_1_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    M_1_ce1 : OUT STD_LOGIC;
    M_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    empty : IN STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of needwun_needwun_Pipeline_fill_in is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_81 : STD_LOGIC_VECTOR (7 downto 0) := "10000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv15_2081 : STD_LOGIC_VECTOR (14 downto 0) := "010000010000001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv14_1F7F : STD_LOGIC_VECTOR (13 downto 0) := "01111101111111";
    constant ap_const_lv14_1041 : STD_LOGIC_VECTOR (13 downto 0) := "01000001000001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv7_5E : STD_LOGIC_VECTOR (6 downto 0) := "1011110";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_const_lv7_5C : STD_LOGIC_VECTOR (6 downto 0) := "1011100";
    constant ap_const_lv16_FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv31_FC08 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001111110000001000";
    constant ap_const_lv29_7E01 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000111111000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state25_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state30_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_state35_pp0_stage4_iter6 : BOOLEAN;
    signal ap_block_state40_pp0_stage4_iter7 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal icmp_ln31_reg_1163 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_295 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state37_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_cast15_cast_fu_299_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_cast15_cast_reg_1150 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_idx_reg_1156 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln31_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln31_fu_327_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln31_reg_1167 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln32_fu_341_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln32_reg_1172 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_fu_357_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1187 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1187_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1187_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1187_pp0_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1187_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1187_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1187_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_fu_369_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1193 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1193_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1193_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1193_pp0_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1193_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1193_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1193_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_fu_451_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1199 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1199_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1199_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1199_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1199_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1199_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1199_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1199_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_fu_461_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln41_reg_1204 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln41_reg_1204_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln41_reg_1204_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln41_reg_1204_pp0_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln41_reg_1204_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln41_reg_1204_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln41_fu_481_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln41_reg_1209 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln41_reg_1209_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln41_reg_1209_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln41_reg_1209_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln41_reg_1209_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln41_reg_1209_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln42_fu_495_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_reg_1215 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_reg_1215_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_reg_1215_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_reg_1215_pp0_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_reg_1215_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_reg_1215_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln42_fu_515_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln42_reg_1220 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln42_reg_1220_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln42_reg_1220_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln42_reg_1220_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln42_reg_1220_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln42_reg_1220_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_489_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal urem_ln41_reg_1226 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state24_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state29_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state34_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state39_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal urem_ln41_reg_1226_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal urem_ln41_reg_1226_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal urem_ln41_reg_1226_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_523_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal urem_ln42_reg_1231 : STD_LOGIC_VECTOR (13 downto 0);
    signal urem_ln42_reg_1231_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal urem_ln42_reg_1231_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal urem_ln42_reg_1231_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln43_fu_539_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln43_reg_1236 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln43_reg_1236_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln43_reg_1236_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_375_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal urem_ln47_reg_1242 : STD_LOGIC_VECTOR (14 downto 0);
    signal urem_ln47_reg_1242_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal urem_ln47_reg_1242_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal urem_ln47_reg_1242_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln47_fu_549_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln47_reg_1247 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln47_reg_1247_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln47_reg_1247_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state23_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state28_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state33_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state38_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_27_reg_1283 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_28_reg_1288 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_29_reg_1313 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_reg_1318 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_660_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1333 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln2_fu_669_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln2_reg_1338 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln42_3_fu_686_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln42_3_reg_1343 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_1348 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_33_fu_705_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal M_0_addr_reg_1368 : STD_LOGIC_VECTOR (12 downto 0);
    signal M_1_addr_4_reg_1373 : STD_LOGIC_VECTOR (12 downto 0);
    signal ptr_addr_reg_1378 : STD_LOGIC_VECTOR (13 downto 0);
    signal addr_cmp_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1383 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_749_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1388 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_1393 : STD_LOGIC_VECTOR (0 downto 0);
    signal M_0_load_4_reg_1398 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_reg_1403 : STD_LOGIC_VECTOR (0 downto 0);
    signal M_0_load_reg_1408 : STD_LOGIC_VECTOR (63 downto 0);
    signal M_1_load_4_reg_1413 : STD_LOGIC_VECTOR (63 downto 0);
    signal ptr_load_reg_1418 : STD_LOGIC_VECTOR (15 downto 0);
    signal up_left_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal up_left_reg_1423 : STD_LOGIC_VECTOR (31 downto 0);
    signal up_fu_801_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal up_reg_1429 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_fu_849_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_reg_1435 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1441 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_fu_1012_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln50_reg_1446 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln50_2_fu_1020_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln50_2_reg_1451 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln32_2_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln41_2_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln42_2_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_2_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_4_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_1_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg_fu_138 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_142 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln50_2_fu_1052_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_idx_2_fu_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_fu_529_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_a_idx : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal add_ln32_fu_335_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_7_fu_331_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln32_2_fu_345_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_363_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_375_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal trunc_ln32_6_fu_384_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln32_fu_381_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln32_4_fu_393_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln32_3_fu_387_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_fu_407_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_415_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln32_5_fu_423_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln32_fu_427_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln32_6_fu_437_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln32_3_fu_441_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_451_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_451_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln41_fu_465_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln41_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_1_fu_475_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_489_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln42_fu_499_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln42_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_1_fu_509_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_523_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_363_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_543_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_553_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_27_fu_577_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1063_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_28_fu_586_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1070_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_29_fu_604_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1077_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_30_fu_613_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1084_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1_fu_625_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln41_6_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln41_fu_636_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_7_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln41_2_fu_650_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_660_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln42_6_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln42_fu_680_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_690_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1091_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_543_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_33_fu_705_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1098_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_553_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln42_7_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln42_2_fu_739_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_749_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_757_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1105_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_34_fu_764_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1112_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln32_7_fu_771_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln32_4_fu_774_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln32_10_fu_779_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln32_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal up_left_fu_796_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln3_fu_806_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln43_6_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln43_fu_817_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_7_fu_826_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln43_2_fu_830_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_840_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_840_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_840_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln45_fu_861_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_1_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln4_fu_878_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln47_11_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln47_6_fu_889_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln47_2_fu_895_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_fu_871_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln47_12_fu_906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln47_2_fu_901_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln47_7_fu_910_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_9_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln47_fu_927_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln47_fu_933_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_10_fu_944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln47_fu_939_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln47_5_fu_948_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln48_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln48_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_990_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_966_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln50_1_fu_1004_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln50_2_fu_1016_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln50_fu_1035_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal reuse_select_fu_1029_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln50_fu_1040_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln50_2_fu_1046_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1063_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1063_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1070_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1070_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1077_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1077_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1084_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1084_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1091_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1091_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1098_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1098_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1105_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1105_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1112_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1112_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to7 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_1063_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1070_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1077_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1084_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1091_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1098_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1105_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1112_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component needwun_urem_15ns_15ns_14_19_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component needwun_urem_15ns_15ns_15_19_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component needwun_mux_21_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component needwun_urem_14ns_14ns_14_18_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component needwun_mux_22_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component needwun_add_32ns_32ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component needwun_add_32ns_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component needwun_mul_mul_15ns_16ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component needwun_mul_mul_14ns_15ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component needwun_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_15ns_15ns_14_19_1_U16 : component needwun_urem_15ns_15ns_14_19_1
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_363_p0,
        din1 => ap_const_lv15_2081,
        ce => ap_const_logic_1,
        dout => grp_fu_363_p2);

    urem_15ns_15ns_15_19_1_U17 : component needwun_urem_15ns_15ns_15_19_1
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_375_p0,
        din1 => ap_const_lv15_2081,
        ce => ap_const_logic_1,
        dout => grp_fu_375_p2);

    mux_21_8_1_1_U18 : component needwun_mux_21_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 1,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_5_fu_451_p1,
        din1 => tmp_5_fu_451_p2,
        din2 => tmp_5_fu_451_p3,
        dout => tmp_5_fu_451_p4);

    urem_14ns_14ns_14_18_1_U19 : component needwun_urem_14ns_14ns_14_18_1
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_489_p0,
        din1 => ap_const_lv14_1041,
        ce => ap_const_logic_1,
        dout => grp_fu_489_p2);

    urem_14ns_14ns_14_18_1_U20 : component needwun_urem_14ns_14ns_14_18_1
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_523_p0,
        din1 => ap_const_lv14_1041,
        ce => ap_const_logic_1,
        dout => grp_fu_523_p2);

    urem_14ns_14ns_14_18_1_U21 : component needwun_urem_14ns_14ns_14_18_1
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_543_p0,
        din1 => ap_const_lv14_1041,
        ce => ap_const_logic_1,
        dout => grp_fu_543_p2);

    urem_14ns_14ns_14_18_1_U22 : component needwun_urem_14ns_14ns_14_18_1
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_553_p0,
        din1 => ap_const_lv14_1041,
        ce => ap_const_logic_1,
        dout => grp_fu_553_p2);

    mux_22_32_1_1_U23 : component needwun_mux_22_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_9_fu_660_p1,
        din1 => tmp_9_fu_660_p2,
        din2 => tmp_27_reg_1283,
        dout => tmp_9_fu_660_p4);

    mux_22_32_1_1_U24 : component needwun_mux_22_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => trunc_ln42_3_reg_1343,
        din1 => tmp_11_fu_749_p2,
        din2 => tmp_29_reg_1313,
        dout => tmp_11_fu_749_p4);

    add_32ns_32ns_32_1_1_U25 : component needwun_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_9_reg_1333,
        din1 => up_left_fu_796_p1,
        dout => up_left_fu_796_p2);

    add_32ns_32s_32_1_1_U26 : component needwun_add_32ns_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_11_reg_1388,
        din1 => ap_const_lv32_FFFFFFFF,
        dout => up_fu_801_p2);

    mux_22_32_1_1_U27 : component needwun_mux_22_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_14_fu_840_p1,
        din1 => tmp_14_fu_840_p2,
        din2 => tmp_31_reg_1348,
        dout => tmp_14_fu_840_p4);

    add_32ns_32s_32_1_1_U28 : component needwun_add_32ns_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_14_fu_840_p4,
        din1 => ap_const_lv32_FFFFFFFF,
        dout => left_fu_849_p2);

    mul_mul_15ns_16ns_31_4_1_U29 : component needwun_mul_mul_15ns_16ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1063_p0,
        din1 => grp_fu_1063_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1063_p2);

    mul_mul_14ns_15ns_29_4_1_U30 : component needwun_mul_mul_14ns_15ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1070_p0,
        din1 => grp_fu_1070_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1070_p2);

    mul_mul_15ns_16ns_31_4_1_U31 : component needwun_mul_mul_15ns_16ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1077_p0,
        din1 => grp_fu_1077_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1077_p2);

    mul_mul_14ns_15ns_29_4_1_U32 : component needwun_mul_mul_14ns_15ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1084_p0,
        din1 => grp_fu_1084_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1084_p2);

    mul_mul_15ns_16ns_31_4_1_U33 : component needwun_mul_mul_15ns_16ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1091_p0,
        din1 => grp_fu_1091_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1091_p2);

    mul_mul_15ns_16ns_31_4_1_U34 : component needwun_mul_mul_15ns_16ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1098_p0,
        din1 => grp_fu_1098_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1098_p2);

    mul_mul_14ns_15ns_29_4_1_U35 : component needwun_mul_mul_14ns_15ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1105_p0,
        din1 => grp_fu_1105_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1105_p2);

    mul_mul_14ns_15ns_29_4_1_U36 : component needwun_mul_mul_14ns_15ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1112_p0,
        din1 => grp_fu_1112_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1112_p2);

    flow_control_loop_pipe_sequential_init_U : component needwun_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    a_idx_2_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_idx_2_fu_146 <= ap_const_lv8_1;
            elsif (((icmp_ln31_reg_1163 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                a_idx_2_fu_146 <= add_ln31_fu_529_p2;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_138 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_138 <= zext_ln47_1_fu_712_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reuse_reg_fu_142 <= ap_const_lv16_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                reuse_reg_fu_142 <= or_ln50_2_fu_1052_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_33_fu_705_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                M_0_addr_reg_1368 <= zext_ln47_4_fu_716_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                M_0_load_4_reg_1398 <= M_0_q1;
                ptr_load_reg_1418 <= ptr_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_33_reg_1363 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                M_0_load_reg_1408 <= M_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_33_fu_705_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                M_1_addr_4_reg_1373 <= zext_ln47_4_fu_716_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_33_reg_1363 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                M_1_load_4_reg_1413 <= M_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_idx_reg_1156 <= ap_sig_allocacmp_a_idx;
                add_ln43_reg_1187_pp0_iter1_reg <= add_ln43_reg_1187;
                add_ln43_reg_1187_pp0_iter2_reg <= add_ln43_reg_1187_pp0_iter1_reg;
                add_ln43_reg_1187_pp0_iter3_reg <= add_ln43_reg_1187_pp0_iter2_reg;
                add_ln43_reg_1187_pp0_iter4_reg <= add_ln43_reg_1187_pp0_iter3_reg;
                add_ln43_reg_1187_pp0_iter5_reg <= add_ln43_reg_1187_pp0_iter4_reg;
                add_ln43_reg_1187_pp0_iter6_reg <= add_ln43_reg_1187_pp0_iter5_reg;
                add_ln47_reg_1193_pp0_iter1_reg <= add_ln47_reg_1193;
                add_ln47_reg_1193_pp0_iter2_reg <= add_ln47_reg_1193_pp0_iter1_reg;
                add_ln47_reg_1193_pp0_iter3_reg <= add_ln47_reg_1193_pp0_iter2_reg;
                add_ln47_reg_1193_pp0_iter4_reg <= add_ln47_reg_1193_pp0_iter3_reg;
                add_ln47_reg_1193_pp0_iter5_reg <= add_ln47_reg_1193_pp0_iter4_reg;
                add_ln47_reg_1193_pp0_iter6_reg <= add_ln47_reg_1193_pp0_iter5_reg;
                addr_cmp_reg_1383 <= addr_cmp_fu_725_p2;
                icmp_ln31_reg_1163 <= icmp_ln31_fu_321_p2;
                    p_cast15_cast_reg_1150(13 downto 0) <= p_cast15_cast_fu_299_p1(13 downto 0);
                ptr_addr_reg_1378 <= zext_ln47_1_fu_712_p1(14 - 1 downto 0);
                    shl_ln2_reg_1338(5) <= shl_ln2_fu_669_p3(5);
                tmp_31_reg_1348 <= tmp_31_fu_690_p1(30 downto 29);
                tmp_33_reg_1363 <= tmp_33_fu_705_p1(29 downto 29);
                tmp_9_reg_1333 <= tmp_9_fu_660_p4;
                trunc_ln42_3_reg_1343 <= trunc_ln42_3_fu_686_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_1163 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln41_reg_1204 <= add_ln41_fu_461_p2;
                add_ln42_reg_1215 <= add_ln42_fu_495_p2;
                select_ln41_reg_1209 <= select_ln41_fu_481_p3;
                select_ln42_reg_1220 <= select_ln42_fu_515_p3;
                tmp_5_reg_1199 <= tmp_5_fu_451_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln41_reg_1204_pp0_iter1_reg <= add_ln41_reg_1204;
                add_ln41_reg_1204_pp0_iter2_reg <= add_ln41_reg_1204_pp0_iter1_reg;
                add_ln41_reg_1204_pp0_iter3_reg <= add_ln41_reg_1204_pp0_iter2_reg;
                add_ln41_reg_1204_pp0_iter4_reg <= add_ln41_reg_1204_pp0_iter3_reg;
                add_ln41_reg_1204_pp0_iter5_reg <= add_ln41_reg_1204_pp0_iter4_reg;
                add_ln42_reg_1215_pp0_iter1_reg <= add_ln42_reg_1215;
                add_ln42_reg_1215_pp0_iter2_reg <= add_ln42_reg_1215_pp0_iter1_reg;
                add_ln42_reg_1215_pp0_iter3_reg <= add_ln42_reg_1215_pp0_iter2_reg;
                add_ln42_reg_1215_pp0_iter4_reg <= add_ln42_reg_1215_pp0_iter3_reg;
                add_ln42_reg_1215_pp0_iter5_reg <= add_ln42_reg_1215_pp0_iter4_reg;
                select_ln41_reg_1209_pp0_iter1_reg <= select_ln41_reg_1209;
                select_ln41_reg_1209_pp0_iter2_reg <= select_ln41_reg_1209_pp0_iter1_reg;
                select_ln41_reg_1209_pp0_iter3_reg <= select_ln41_reg_1209_pp0_iter2_reg;
                select_ln41_reg_1209_pp0_iter4_reg <= select_ln41_reg_1209_pp0_iter3_reg;
                select_ln41_reg_1209_pp0_iter5_reg <= select_ln41_reg_1209_pp0_iter4_reg;
                select_ln42_reg_1220_pp0_iter1_reg <= select_ln42_reg_1220;
                select_ln42_reg_1220_pp0_iter2_reg <= select_ln42_reg_1220_pp0_iter1_reg;
                select_ln42_reg_1220_pp0_iter3_reg <= select_ln42_reg_1220_pp0_iter2_reg;
                select_ln42_reg_1220_pp0_iter4_reg <= select_ln42_reg_1220_pp0_iter3_reg;
                select_ln42_reg_1220_pp0_iter5_reg <= select_ln42_reg_1220_pp0_iter4_reg;
                tmp_11_reg_1388 <= tmp_11_fu_749_p4;
                tmp_32_reg_1393 <= tmp_32_fu_757_p1(27 downto 27);
                tmp_34_reg_1403 <= tmp_34_fu_764_p1(27 downto 27);
                tmp_5_reg_1199_pp0_iter1_reg <= tmp_5_reg_1199;
                tmp_5_reg_1199_pp0_iter2_reg <= tmp_5_reg_1199_pp0_iter1_reg;
                tmp_5_reg_1199_pp0_iter3_reg <= tmp_5_reg_1199_pp0_iter2_reg;
                tmp_5_reg_1199_pp0_iter4_reg <= tmp_5_reg_1199_pp0_iter3_reg;
                tmp_5_reg_1199_pp0_iter5_reg <= tmp_5_reg_1199_pp0_iter4_reg;
                tmp_5_reg_1199_pp0_iter6_reg <= tmp_5_reg_1199_pp0_iter5_reg;
                tmp_5_reg_1199_pp0_iter7_reg <= tmp_5_reg_1199_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln31_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln43_reg_1187 <= add_ln43_fu_357_p2;
                add_ln47_reg_1193 <= add_ln47_fu_369_p2;
                    zext_ln31_reg_1167(7 downto 0) <= zext_ln31_fu_327_p1(7 downto 0);
                    zext_ln32_reg_1172(7 downto 0) <= zext_ln32_fu_341_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                tmp_29_reg_1313 <= tmp_29_fu_604_p1(30 downto 29);
                tmp_30_reg_1318 <= tmp_30_fu_613_p1(27 downto 27);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                icmp_ln45_reg_1441 <= icmp_ln45_fu_855_p2;
                left_reg_1435 <= left_fu_849_p2;
                up_left_reg_1423 <= up_left_fu_796_p2;
                up_reg_1429 <= up_fu_801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_295 <= M_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                shl_ln50_2_reg_1451 <= shl_ln50_2_fu_1020_p2;
                tmp_27_reg_1283 <= tmp_27_fu_577_p1(30 downto 29);
                tmp_28_reg_1288 <= tmp_28_fu_586_p1(27 downto 27);
                trunc_ln43_reg_1236 <= trunc_ln43_fu_539_p1;
                trunc_ln43_reg_1236_pp0_iter4_reg <= trunc_ln43_reg_1236;
                trunc_ln43_reg_1236_pp0_iter5_reg <= trunc_ln43_reg_1236_pp0_iter4_reg;
                trunc_ln47_reg_1247 <= trunc_ln47_fu_549_p1;
                trunc_ln47_reg_1247_pp0_iter4_reg <= trunc_ln47_reg_1247;
                trunc_ln47_reg_1247_pp0_iter5_reg <= trunc_ln47_reg_1247_pp0_iter4_reg;
                urem_ln41_reg_1226 <= grp_fu_489_p2;
                urem_ln41_reg_1226_pp0_iter4_reg <= urem_ln41_reg_1226;
                urem_ln41_reg_1226_pp0_iter5_reg <= urem_ln41_reg_1226_pp0_iter4_reg;
                urem_ln41_reg_1226_pp0_iter6_reg <= urem_ln41_reg_1226_pp0_iter5_reg;
                urem_ln42_reg_1231 <= grp_fu_523_p2;
                urem_ln42_reg_1231_pp0_iter4_reg <= urem_ln42_reg_1231;
                urem_ln42_reg_1231_pp0_iter5_reg <= urem_ln42_reg_1231_pp0_iter4_reg;
                urem_ln42_reg_1231_pp0_iter6_reg <= urem_ln42_reg_1231_pp0_iter5_reg;
                urem_ln47_reg_1242 <= grp_fu_375_p2;
                urem_ln47_reg_1242_pp0_iter4_reg <= urem_ln47_reg_1242;
                urem_ln47_reg_1242_pp0_iter5_reg <= urem_ln47_reg_1242_pp0_iter4_reg;
                urem_ln47_reg_1242_pp0_iter6_reg <= urem_ln47_reg_1242_pp0_iter5_reg;
                    zext_ln50_reg_1446(3) <= zext_ln50_fu_1012_p1(3);
            end if;
        end if;
    end process;
    p_cast15_cast_reg_1150(14) <= '0';
    zext_ln31_reg_1167(14 downto 8) <= "0000000";
    zext_ln32_reg_1172(14 downto 8) <= "0000000";
    shl_ln2_reg_1338(4 downto 0) <= "00000";
    zext_ln50_reg_1446(2 downto 0) <= "000";
    zext_ln50_reg_1446(15 downto 4) <= "000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to7, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to7 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    M_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, M_0_addr_reg_1368, ap_block_pp0_stage0, zext_ln41_2_fu_599_p1, ap_block_pp0_stage4, zext_ln47_4_fu_716_p1, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            M_0_address0 <= M_0_addr_reg_1368;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            M_0_address0 <= zext_ln47_4_fu_716_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            M_0_address0 <= zext_ln41_2_fu_599_p1(13 - 1 downto 0);
        else 
            M_0_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    M_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0, ap_block_pp0_stage4, zext_ln42_2_fu_620_p1, zext_ln43_2_fu_699_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            M_0_address1 <= zext_ln43_2_fu_699_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            M_0_address1 <= zext_ln42_2_fu_620_p1(13 - 1 downto 0);
        else 
            M_0_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    M_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            M_0_ce0 <= ap_const_logic_1;
        else 
            M_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    M_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            M_0_ce1 <= ap_const_logic_1;
        else 
            M_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    M_0_d0 <= (shl_ln47_7_fu_910_p2 or and_ln47_2_fu_901_p2);

    M_0_we0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, tmp_33_reg_1363)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_33_reg_1363 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            M_0_we0 <= ap_const_logic_1;
        else 
            M_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    M_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, M_1_addr_4_reg_1373, ap_block_pp0_stage0, zext_ln41_2_fu_599_p1, ap_block_pp0_stage4, zext_ln47_4_fu_716_p1, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            M_1_address0 <= M_1_addr_4_reg_1373;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            M_1_address0 <= zext_ln47_4_fu_716_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            M_1_address0 <= zext_ln41_2_fu_599_p1(13 - 1 downto 0);
        else 
            M_1_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    M_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0, ap_block_pp0_stage4, zext_ln42_2_fu_620_p1, zext_ln43_2_fu_699_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            M_1_address1 <= zext_ln43_2_fu_699_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            M_1_address1 <= zext_ln42_2_fu_620_p1(13 - 1 downto 0);
        else 
            M_1_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    M_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            M_1_ce0 <= ap_const_logic_1;
        else 
            M_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    M_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            M_1_ce1 <= ap_const_logic_1;
        else 
            M_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    M_1_d0 <= (shl_ln47_5_fu_948_p2 or and_ln47_fu_939_p2);

    M_1_we0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, tmp_33_reg_1363)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_33_reg_1363 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            M_1_we0 <= ap_const_logic_1;
        else 
            M_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    SEQA_0_address0 <= zext_ln32_2_fu_351_p1(5 - 1 downto 0);

    SEQA_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SEQA_0_ce0 <= ap_const_logic_1;
        else 
            SEQA_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SEQA_1_address0 <= zext_ln32_2_fu_351_p1(5 - 1 downto 0);

    SEQA_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SEQA_1_ce0 <= ap_const_logic_1;
        else 
            SEQA_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln31_fu_529_p2 <= std_logic_vector(unsigned(a_idx_reg_1156) + unsigned(ap_const_lv8_1));
    add_ln32_2_fu_345_p2 <= std_logic_vector(unsigned(trunc_ln32_7_fu_331_p1) + unsigned(ap_const_lv5_1F));
    add_ln32_3_fu_387_p2 <= std_logic_vector(unsigned(trunc_ln32_6_fu_384_p1) + unsigned(ap_const_lv6_3F));
    add_ln32_4_fu_393_p2 <= std_logic_vector(unsigned(trunc_ln32_fu_381_p1) + unsigned(ap_const_lv7_7F));
    add_ln32_fu_335_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_a_idx) + unsigned(ap_const_lv8_FF));
    add_ln41_1_fu_475_p2 <= std_logic_vector(unsigned(trunc_ln41_fu_465_p1) + unsigned(ap_const_lv14_1F7F));
    add_ln41_fu_461_p2 <= std_logic_vector(unsigned(zext_ln32_reg_1172) + unsigned(p_cast15_cast_reg_1150));
    add_ln42_1_fu_509_p2 <= std_logic_vector(unsigned(trunc_ln42_fu_499_p1) + unsigned(ap_const_lv14_1F7F));
    add_ln42_fu_495_p2 <= std_logic_vector(unsigned(zext_ln31_reg_1167) + unsigned(p_cast15_cast_reg_1150));
    add_ln43_fu_357_p2 <= std_logic_vector(unsigned(zext_ln32_fu_341_p1) + unsigned(empty));
    add_ln47_fu_369_p2 <= std_logic_vector(unsigned(zext_ln31_fu_327_p1) + unsigned(empty));
    addr_cmp_fu_725_p2 <= "1" when (reuse_addr_reg_fu_138 = zext_ln47_1_fu_712_p1) else "0";
    and_ln47_2_fu_901_p2 <= (xor_ln47_2_fu_895_p2 and M_0_load_reg_1408);
    and_ln47_fu_939_p2 <= (xor_ln47_fu_933_p2 and M_1_load_4_reg_1413);
    and_ln50_2_fu_1046_p2 <= (xor_ln50_fu_1040_p2 and reuse_select_fu_1029_p3);
    and_ln50_fu_984_p2 <= (xor_ln48_fu_978_p2 and icmp_ln50_fu_973_p2);
    and_ln_fu_415_p3 <= (tmp_26_fu_407_p3 & ap_const_lv3_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage4_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, icmp_ln31_reg_1163)
    begin
        if (((icmp_ln31_reg_1163 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to7_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to7 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to7 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_a_idx_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, a_idx_2_fu_146)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_a_idx <= ap_const_lv8_1;
        else 
            ap_sig_allocacmp_a_idx <= a_idx_2_fu_146;
        end if; 
    end process;

    grp_fu_1063_p0 <= grp_fu_1063_p00(15 - 1 downto 0);
    grp_fu_1063_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_reg_1204_pp0_iter5_reg),31));
    grp_fu_1063_p1 <= ap_const_lv31_FC08(16 - 1 downto 0);
    grp_fu_1070_p0 <= grp_fu_1070_p00(14 - 1 downto 0);
    grp_fu_1070_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln41_reg_1209_pp0_iter5_reg),29));
    grp_fu_1070_p1 <= ap_const_lv29_7E01(15 - 1 downto 0);
    grp_fu_1077_p0 <= grp_fu_1077_p00(15 - 1 downto 0);
    grp_fu_1077_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_reg_1215_pp0_iter5_reg),31));
    grp_fu_1077_p1 <= ap_const_lv31_FC08(16 - 1 downto 0);
    grp_fu_1084_p0 <= grp_fu_1084_p00(14 - 1 downto 0);
    grp_fu_1084_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln42_reg_1220_pp0_iter5_reg),29));
    grp_fu_1084_p1 <= ap_const_lv29_7E01(15 - 1 downto 0);
    grp_fu_1091_p0 <= grp_fu_1091_p00(15 - 1 downto 0);
    grp_fu_1091_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_reg_1187_pp0_iter6_reg),31));
    grp_fu_1091_p1 <= ap_const_lv31_FC08(16 - 1 downto 0);
    grp_fu_1098_p0 <= grp_fu_1098_p00(15 - 1 downto 0);
    grp_fu_1098_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln47_reg_1193_pp0_iter6_reg),31));
    grp_fu_1098_p1 <= ap_const_lv31_FC08(16 - 1 downto 0);
    grp_fu_1105_p0 <= grp_fu_1105_p00(14 - 1 downto 0);
    grp_fu_1105_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln43_reg_1236_pp0_iter5_reg),29));
    grp_fu_1105_p1 <= ap_const_lv29_7E01(15 - 1 downto 0);
    grp_fu_1112_p0 <= grp_fu_1112_p00(14 - 1 downto 0);
    grp_fu_1112_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln47_reg_1247_pp0_iter5_reg),29));
    grp_fu_1112_p1 <= ap_const_lv29_7E01(15 - 1 downto 0);
    grp_fu_363_p0 <= std_logic_vector(unsigned(zext_ln32_fu_341_p1) + unsigned(empty));
    grp_fu_375_p0 <= std_logic_vector(unsigned(zext_ln31_fu_327_p1) + unsigned(empty));
    grp_fu_489_p0 <= 
        trunc_ln41_fu_465_p1 when (icmp_ln41_fu_469_p2(0) = '1') else 
        add_ln41_1_fu_475_p2;
    grp_fu_523_p0 <= 
        trunc_ln42_fu_499_p1 when (icmp_ln42_fu_503_p2(0) = '1') else 
        add_ln42_1_fu_509_p2;
    grp_fu_543_p0 <= grp_fu_363_p2(14 - 1 downto 0);
    grp_fu_553_p0 <= grp_fu_375_p2(14 - 1 downto 0);
    icmp_ln31_fu_321_p2 <= "1" when (ap_sig_allocacmp_a_idx = ap_const_lv8_81) else "0";
    icmp_ln32_fu_783_p2 <= "1" when (tmp_5_reg_1199_pp0_iter7_reg = trunc_ln32_10_fu_779_p1) else "0";
    icmp_ln41_fu_469_p2 <= "1" when (unsigned(add_ln41_fu_461_p2) < unsigned(ap_const_lv15_2081)) else "0";
    icmp_ln42_fu_503_p2 <= "1" when (unsigned(add_ln42_fu_495_p2) < unsigned(ap_const_lv15_2081)) else "0";
    icmp_ln45_1_fu_866_p2 <= "1" when (signed(up_left_reg_1423) > signed(select_ln45_fu_861_p3)) else "0";
    icmp_ln45_fu_855_p2 <= "1" when (signed(up_fu_801_p2) > signed(left_fu_849_p2)) else "0";
    icmp_ln48_fu_961_p2 <= "1" when (left_reg_1435 = max_fu_871_p3) else "0";
    icmp_ln50_fu_973_p2 <= "1" when (max_fu_871_p3 = up_reg_1429) else "0";
    lshr_ln32_3_fu_441_p2 <= std_logic_vector(shift_right(unsigned(SEQA_1_q0),to_integer(unsigned('0' & zext_ln32_6_fu_437_p1(16-1 downto 0)))));
    lshr_ln32_4_fu_774_p2 <= std_logic_vector(shift_right(unsigned(SEQB_load),to_integer(unsigned('0' & zext_ln32_7_fu_771_p1(16-1 downto 0)))));
    lshr_ln32_fu_427_p2 <= std_logic_vector(shift_right(unsigned(SEQA_0_q0),to_integer(unsigned('0' & zext_ln32_5_fu_423_p1(16-1 downto 0)))));
    lshr_ln41_2_fu_650_p2 <= std_logic_vector(shift_right(unsigned(M_1_q0),to_integer(unsigned('0' & zext_ln41_7_fu_646_p1(31-1 downto 0)))));
    lshr_ln41_fu_636_p2 <= std_logic_vector(shift_right(unsigned(M_0_q0),to_integer(unsigned('0' & zext_ln41_6_fu_632_p1(31-1 downto 0)))));
    lshr_ln42_2_fu_739_p2 <= std_logic_vector(shift_right(unsigned(reg_295),to_integer(unsigned('0' & zext_ln42_7_fu_736_p1(31-1 downto 0)))));
    lshr_ln42_fu_680_p2 <= std_logic_vector(shift_right(unsigned(M_0_q1),to_integer(unsigned('0' & zext_ln42_6_fu_676_p1(31-1 downto 0)))));
    lshr_ln43_2_fu_830_p2 <= std_logic_vector(shift_right(unsigned(reg_295),to_integer(unsigned('0' & zext_ln43_7_fu_826_p1(31-1 downto 0)))));
    lshr_ln43_fu_817_p2 <= std_logic_vector(shift_right(unsigned(M_0_load_4_reg_1398),to_integer(unsigned('0' & zext_ln43_6_fu_813_p1(31-1 downto 0)))));
    max_fu_871_p3 <= 
        up_left_reg_1423 when (icmp_ln45_1_fu_866_p2(0) = '1') else 
        select_ln45_fu_861_p3;
    or_ln50_2_fu_1052_p2 <= (shl_ln50_2_reg_1451 or and_ln50_2_fu_1046_p2);
    or_ln50_fu_998_p2 <= (icmp_ln48_fu_961_p2 or and_ln50_fu_984_p2);
    p_cast15_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast15),15));

    ptr_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ptr_addr_reg_1378, ap_block_pp0_stage0, ap_block_pp0_stage4, zext_ln47_1_fu_712_p1)
    begin
        if ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ptr_address0 <= ptr_addr_reg_1378;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ptr_address0 <= zext_ln47_1_fu_712_p1(14 - 1 downto 0);
            else 
                ptr_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            ptr_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ptr_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ptr_ce0 <= ap_const_logic_1;
        else 
            ptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ptr_d0 <= (shl_ln50_2_reg_1451 or and_ln50_2_fu_1046_p2);

    ptr_we0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ptr_we0 <= ap_const_logic_1;
        else 
            ptr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    reuse_select_fu_1029_p3 <= 
        reuse_reg_fu_142 when (addr_cmp_reg_1383(0) = '1') else 
        ptr_load_reg_1418;
    select_ln41_fu_481_p3 <= 
        trunc_ln41_fu_465_p1 when (icmp_ln41_fu_469_p2(0) = '1') else 
        add_ln41_1_fu_475_p2;
    select_ln42_fu_515_p3 <= 
        trunc_ln42_fu_499_p1 when (icmp_ln42_fu_503_p2(0) = '1') else 
        add_ln42_1_fu_509_p2;
    select_ln45_fu_861_p3 <= 
        up_reg_1429 when (icmp_ln45_reg_1441(0) = '1') else 
        left_reg_1435;
    select_ln50_1_fu_1004_p3 <= 
        select_ln50_fu_990_p3 when (or_ln50_fu_998_p2(0) = '1') else 
        ap_const_lv7_5C;
    select_ln50_fu_990_p3 <= 
        ap_const_lv7_5E when (and_ln50_fu_984_p2(0) = '1') else 
        ap_const_lv7_3C;
    shl_ln1_fu_625_p3 <= (tmp_28_reg_1288 & ap_const_lv5_0);
    shl_ln2_fu_669_p3 <= (tmp_30_reg_1318 & ap_const_lv5_0);
    shl_ln3_fu_806_p3 <= (tmp_32_reg_1393 & ap_const_lv5_0);
    shl_ln47_5_fu_948_p2 <= std_logic_vector(shift_left(unsigned(zext_ln47_10_fu_944_p1),to_integer(unsigned('0' & zext_ln47_9_fu_923_p1(31-1 downto 0)))));
    shl_ln47_6_fu_889_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln47_11_fu_885_p1(31-1 downto 0)))));
    shl_ln47_7_fu_910_p2 <= std_logic_vector(shift_left(unsigned(zext_ln47_12_fu_906_p1),to_integer(unsigned('0' & zext_ln47_11_fu_885_p1(31-1 downto 0)))));
    shl_ln47_fu_927_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln47_9_fu_923_p1(31-1 downto 0)))));
    shl_ln4_fu_878_p3 <= (tmp_34_reg_1403 & ap_const_lv5_0);
    shl_ln50_2_fu_1020_p2 <= std_logic_vector(shift_left(unsigned(zext_ln50_2_fu_1016_p1),to_integer(unsigned('0' & zext_ln50_fu_1012_p1(16-1 downto 0)))));
    shl_ln50_fu_1035_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_FF),to_integer(unsigned('0' & zext_ln50_reg_1446(16-1 downto 0)))));
    shl_ln_fu_966_p3 <= (tmp_33_reg_1363 & ap_const_lv3_0);
    tmp_11_fu_749_p2 <= lshr_ln42_2_fu_739_p2(32 - 1 downto 0);
    tmp_14_fu_840_p1 <= lshr_ln43_fu_817_p2(32 - 1 downto 0);
    tmp_14_fu_840_p2 <= lshr_ln43_2_fu_830_p2(32 - 1 downto 0);
    tmp_26_fu_407_p3 <= add_ln32_3_fu_387_p2(5 downto 5);
    tmp_27_fu_577_p1 <= grp_fu_1063_p2;
    tmp_28_fu_586_p1 <= grp_fu_1070_p2;
    tmp_29_fu_604_p1 <= grp_fu_1077_p2;
    tmp_30_fu_613_p1 <= grp_fu_1084_p2;
    tmp_31_fu_690_p1 <= grp_fu_1091_p2;
    tmp_32_fu_757_p1 <= grp_fu_1105_p2;
    tmp_33_fu_705_p1 <= grp_fu_1098_p2;
    tmp_33_fu_705_p3 <= tmp_33_fu_705_p1(29 downto 29);
    tmp_34_fu_764_p1 <= grp_fu_1112_p2;
    tmp_5_fu_451_p1 <= lshr_ln32_fu_427_p2(8 - 1 downto 0);
    tmp_5_fu_451_p2 <= lshr_ln32_3_fu_441_p2(8 - 1 downto 0);
    tmp_5_fu_451_p3 <= add_ln32_4_fu_393_p2(6 downto 6);
    tmp_9_fu_660_p1 <= lshr_ln41_fu_636_p2(32 - 1 downto 0);
    tmp_9_fu_660_p2 <= lshr_ln41_2_fu_650_p2(32 - 1 downto 0);
    trunc_ln32_10_fu_779_p1 <= lshr_ln32_4_fu_774_p2(8 - 1 downto 0);
    trunc_ln32_6_fu_384_p1 <= a_idx_reg_1156(6 - 1 downto 0);
    trunc_ln32_7_fu_331_p1 <= ap_sig_allocacmp_a_idx(5 - 1 downto 0);
    trunc_ln32_fu_381_p1 <= a_idx_reg_1156(7 - 1 downto 0);
    trunc_ln41_fu_465_p1 <= add_ln41_fu_461_p2(14 - 1 downto 0);
    trunc_ln42_3_fu_686_p1 <= lshr_ln42_fu_680_p2(32 - 1 downto 0);
    trunc_ln42_fu_499_p1 <= add_ln42_fu_495_p2(14 - 1 downto 0);
    trunc_ln43_fu_539_p1 <= grp_fu_363_p2(14 - 1 downto 0);
    trunc_ln47_fu_549_p1 <= grp_fu_375_p2(14 - 1 downto 0);
    up_left_fu_796_p1 <= 
        ap_const_lv32_1 when (icmp_ln32_fu_783_p2(0) = '1') else 
        ap_const_lv32_FFFFFFFF;
    xor_ln47_2_fu_895_p2 <= (shl_ln47_6_fu_889_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln47_fu_933_p2 <= (shl_ln47_fu_927_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln48_fu_978_p2 <= (icmp_ln48_fu_961_p2 xor ap_const_lv1_1);
    xor_ln50_fu_1040_p2 <= (shl_ln50_fu_1035_p2 xor ap_const_lv16_FFFF);
    zext_ln31_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_a_idx),15));
    zext_ln32_2_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_2_fu_345_p2),64));
    zext_ln32_5_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_415_p3),16));
    zext_ln32_6_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_415_p3),16));
    zext_ln32_7_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast21),16));
    zext_ln32_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_fu_335_p2),15));
    zext_ln41_2_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(urem_ln41_reg_1226_pp0_iter6_reg),64));
    zext_ln41_6_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_625_p3),64));
    zext_ln41_7_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_625_p3),64));
    zext_ln42_2_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(urem_ln42_reg_1231_pp0_iter6_reg),64));
    zext_ln42_6_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_669_p3),64));
    zext_ln42_7_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_reg_1338),64));
    zext_ln43_2_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_543_p2),64));
    zext_ln43_6_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_806_p3),64));
    zext_ln43_7_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_806_p3),64));
    zext_ln47_10_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_fu_871_p3),64));
    zext_ln47_11_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_878_p3),64));
    zext_ln47_12_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_fu_871_p3),64));
    zext_ln47_1_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(urem_ln47_reg_1242_pp0_iter6_reg),64));
    zext_ln47_4_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_553_p2),64));
    zext_ln47_9_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_878_p3),64));
    zext_ln50_2_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_1_fu_1004_p3),16));
    zext_ln50_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_966_p3),16));
end behav;
