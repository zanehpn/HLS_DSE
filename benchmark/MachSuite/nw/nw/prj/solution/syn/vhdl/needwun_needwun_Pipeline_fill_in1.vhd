-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity needwun_needwun_Pipeline_fill_in1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ptr_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ptr_ce0 : OUT STD_LOGIC;
    ptr_we0 : OUT STD_LOGIC;
    ptr_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ptr_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    M_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    M_0_ce0 : OUT STD_LOGIC;
    M_0_we0 : OUT STD_LOGIC;
    M_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    M_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    M_0_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    M_0_ce1 : OUT STD_LOGIC;
    M_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    SEQA_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    SEQA_0_ce0 : OUT STD_LOGIC;
    SEQA_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    SEQA_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    SEQA_1_ce0 : OUT STD_LOGIC;
    SEQA_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    SEQB_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_cast21 : IN STD_LOGIC_VECTOR (3 downto 0);
    empty_16 : IN STD_LOGIC_VECTOR (14 downto 0);
    M_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    M_1_ce0 : OUT STD_LOGIC;
    M_1_we0 : OUT STD_LOGIC;
    M_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    M_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    M_1_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    M_1_ce1 : OUT STD_LOGIC;
    M_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    empty : IN STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of needwun_needwun_Pipeline_fill_in1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_81 : STD_LOGIC_VECTOR (7 downto 0) := "10000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv15_2081 : STD_LOGIC_VECTOR (14 downto 0) := "010000010000001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv14_1041 : STD_LOGIC_VECTOR (13 downto 0) := "01000001000001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv7_5E : STD_LOGIC_VECTOR (6 downto 0) := "1011110";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_const_lv7_5C : STD_LOGIC_VECTOR (6 downto 0) := "1011100";
    constant ap_const_lv16_FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv31_FC08 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001111110000001000";
    constant ap_const_lv29_7E01 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000111111000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state25_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state30_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_state35_pp0_stage4_iter6 : BOOLEAN;
    signal ap_block_state40_pp0_stage4_iter7 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal icmp_ln31_reg_1146 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_291 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state37_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state23_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state28_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state33_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state38_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_295 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_300 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_reg_1258 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal a_idx_5_reg_1139 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln31_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1146_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1146_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1146_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1146_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1146_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1146_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_fu_358_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln41_reg_1160 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln41_reg_1160_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln41_reg_1160_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln41_reg_1160_pp0_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln41_reg_1160_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln41_reg_1160_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln41_reg_1160_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_fu_370_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_reg_1166 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_reg_1166_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_reg_1166_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_reg_1166_pp0_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_reg_1166_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_reg_1166_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_reg_1166_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_fu_382_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1172 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1172_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1172_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1172_pp0_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1172_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1172_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_1172_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_fu_388_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1178 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1178_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1178_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1178_pp0_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1178_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1178_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_reg_1178_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_464_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1184 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1184_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1184_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1184_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1184_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1184_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1184_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1184_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_fu_494_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln41_reg_1189 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state24_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state29_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state34_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state39_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal trunc_ln41_reg_1189_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln41_reg_1189_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln42_fu_504_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln42_reg_1195 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln42_reg_1195_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln42_reg_1195_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln43_fu_514_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln43_reg_1201 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal trunc_ln43_reg_1201_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln43_reg_1201_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_479_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal urem_ln47_reg_1207 : STD_LOGIC_VECTOR (14 downto 0);
    signal urem_ln47_reg_1207_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal urem_ln47_reg_1207_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal urem_ln47_reg_1207_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln47_fu_524_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln47_reg_1212 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln47_reg_1212_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln47_reg_1212_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_reg_1238 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1059_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln47_reg_1248 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln41_1_fu_593_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln41_1_reg_1292 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln41_1_fu_611_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln41_1_reg_1297 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_1302 : STD_LOGIC_VECTOR (0 downto 0);
    signal M_0_addr_4_reg_1317 : STD_LOGIC_VECTOR (12 downto 0);
    signal M_1_addr_4_reg_1322 : STD_LOGIC_VECTOR (12 downto 0);
    signal ptr_addr_reg_1327 : STD_LOGIC_VECTOR (13 downto 0);
    signal addr_cmp_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1332 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln41_2_fu_661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln41_2_reg_1337 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln42_1_fu_682_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln42_1_reg_1342 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln42_2_fu_696_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln42_2_reg_1347 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_1352 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1357 : STD_LOGIC_VECTOR (0 downto 0);
    signal M_0_load_4_reg_1362 : STD_LOGIC_VECTOR (63 downto 0);
    signal ptr_load_reg_1367 : STD_LOGIC_VECTOR (15 downto 0);
    signal up_left_fu_756_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal up_left_reg_1372 : STD_LOGIC_VECTOR (31 downto 0);
    signal up_fu_779_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal up_reg_1378 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_fu_829_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_reg_1384 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1390 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_fu_1001_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln50_reg_1395 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln50_1_fu_1009_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln50_1_reg_1400 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln32_1_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln41_2_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_2_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_2_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln47_3_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_1_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg_fu_134 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_138 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln50_1_fu_1041_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_idx_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_a_idx_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal add_ln32_fu_336_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_2_fu_332_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln32_1_fu_346_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln32_fu_342_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_364_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln31_fu_328_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_376_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln32_1_fu_397_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln32_fu_394_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln32_3_fu_406_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln32_2_fu_400_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_420_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_1_fu_428_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln32_2_fu_436_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln32_fu_440_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln32_3_fu_450_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln32_1_fu_454_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_464_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_464_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_464_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal grp_fu_498_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_376_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_508_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_474_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_518_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_528_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_fu_546_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1052_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_22_fu_561_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_498_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_508_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_fu_586_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1066_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_15_fu_586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln41_3_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln41_fu_605_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_615_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1073_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_518_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_528_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln41_4_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln41_1_fu_655_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln42_1_fu_665_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln42_3_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln42_fu_676_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_4_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln42_1_fu_690_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_700_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1080_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_21_fu_707_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1087_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln32_4_fu_714_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln32_2_fu_717_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln32_5_fu_722_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln32_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_739_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1094_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_fu_748_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_748_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal up_left_fu_756_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_762_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1101_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_fu_771_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_771_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln43_1_fu_785_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln43_3_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln43_fu_796_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_4_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln43_1_fu_810_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_820_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_820_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_820_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln45_fu_841_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_1_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln47_1_fu_858_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln47_6_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln47_3_fu_869_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln47_1_fu_875_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_fu_851_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln47_7_fu_886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln47_1_fu_881_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln47_4_fu_890_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_4_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln47_fu_907_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln47_fu_913_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_5_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln47_fu_919_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln47_2_fu_929_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln48_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln48_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_971_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_947_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_993_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln50_1_fu_985_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln50_1_fu_1005_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln50_fu_1024_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal reuse_select_fu_1018_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln50_fu_1029_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln50_1_fu_1035_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1052_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1052_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1059_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1059_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1066_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1066_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1073_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1073_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1080_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1080_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1087_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1087_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1094_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1094_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1101_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1101_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter7_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0_1to8 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_1052_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1059_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1066_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1073_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1080_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1087_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1094_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1101_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component needwun_urem_15ns_15ns_14_19_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component needwun_mux_21_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component needwun_urem_15ns_15ns_15_19_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component needwun_urem_14ns_14ns_14_18_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component needwun_mux_22_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component needwun_add_32ns_32ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component needwun_add_32ns_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component needwun_mul_mul_15ns_16ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component needwun_mul_mul_14ns_15ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component needwun_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_15ns_15ns_14_19_1_U53 : component needwun_urem_15ns_15ns_14_19_1
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_364_p0,
        din1 => ap_const_lv15_2081,
        ce => ap_const_logic_1,
        dout => grp_fu_364_p2);

    urem_15ns_15ns_14_19_1_U54 : component needwun_urem_15ns_15ns_14_19_1
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_376_p0,
        din1 => ap_const_lv15_2081,
        ce => ap_const_logic_1,
        dout => grp_fu_376_p2);

    mux_21_8_1_1_U55 : component needwun_mux_21_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 1,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_s_fu_464_p1,
        din1 => tmp_s_fu_464_p2,
        din2 => tmp_s_fu_464_p3,
        dout => tmp_s_fu_464_p4);

    urem_15ns_15ns_14_19_1_U56 : component needwun_urem_15ns_15ns_14_19_1
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln43_reg_1172,
        din1 => ap_const_lv15_2081,
        ce => ap_const_logic_1,
        dout => grp_fu_474_p2);

    urem_15ns_15ns_15_19_1_U57 : component needwun_urem_15ns_15ns_15_19_1
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln47_reg_1178,
        din1 => ap_const_lv15_2081,
        ce => ap_const_logic_1,
        dout => grp_fu_479_p2);

    urem_14ns_14ns_14_18_1_U58 : component needwun_urem_14ns_14ns_14_18_1
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_498_p0,
        din1 => ap_const_lv14_1041,
        ce => ap_const_logic_1,
        dout => grp_fu_498_p2);

    urem_14ns_14ns_14_18_1_U59 : component needwun_urem_14ns_14ns_14_18_1
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_508_p0,
        din1 => ap_const_lv14_1041,
        ce => ap_const_logic_1,
        dout => grp_fu_508_p2);

    urem_14ns_14ns_14_18_1_U60 : component needwun_urem_14ns_14ns_14_18_1
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_518_p0,
        din1 => ap_const_lv14_1041,
        ce => ap_const_logic_1,
        dout => grp_fu_518_p2);

    urem_14ns_14ns_14_18_1_U61 : component needwun_urem_14ns_14ns_14_18_1
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_528_p0,
        din1 => ap_const_lv14_1041,
        ce => ap_const_logic_1,
        dout => grp_fu_528_p2);

    mux_22_32_1_1_U62 : component needwun_mux_22_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => trunc_ln41_1_reg_1297,
        din1 => trunc_ln41_2_reg_1337,
        din2 => tmp_9_fu_748_p3,
        dout => tmp_9_fu_748_p4);

    add_32ns_32ns_32_1_1_U63 : component needwun_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_9_fu_748_p4,
        din1 => up_left_fu_756_p1,
        dout => up_left_fu_756_p2);

    mux_22_32_1_1_U64 : component needwun_mux_22_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => trunc_ln42_1_reg_1342,
        din1 => trunc_ln42_2_reg_1347,
        din2 => tmp_10_fu_771_p3,
        dout => tmp_10_fu_771_p4);

    add_32ns_32s_32_1_1_U65 : component needwun_add_32ns_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_10_fu_771_p4,
        din1 => ap_const_lv32_FFFFFFFF,
        dout => up_fu_779_p2);

    mux_22_32_1_1_U66 : component needwun_mux_22_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_20_fu_820_p1,
        din1 => tmp_20_fu_820_p2,
        din2 => tmp_18_reg_1238,
        dout => tmp_20_fu_820_p4);

    add_32ns_32s_32_1_1_U67 : component needwun_add_32ns_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_20_fu_820_p4,
        din1 => ap_const_lv32_FFFFFFFF,
        dout => left_fu_829_p2);

    mul_mul_15ns_16ns_31_4_1_U68 : component needwun_mul_mul_15ns_16ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1052_p0,
        din1 => grp_fu_1052_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1052_p2);

    mul_mul_15ns_16ns_31_4_1_U69 : component needwun_mul_mul_15ns_16ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1059_p0,
        din1 => grp_fu_1059_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1059_p2);

    mul_mul_14ns_15ns_29_4_1_U70 : component needwun_mul_mul_14ns_15ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1066_p0,
        din1 => grp_fu_1066_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1066_p2);

    mul_mul_14ns_15ns_29_4_1_U71 : component needwun_mul_mul_14ns_15ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1073_p0,
        din1 => grp_fu_1073_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1073_p2);

    mul_mul_14ns_15ns_29_4_1_U72 : component needwun_mul_mul_14ns_15ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1080_p0,
        din1 => grp_fu_1080_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1080_p2);

    mul_mul_14ns_15ns_29_4_1_U73 : component needwun_mul_mul_14ns_15ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1087_p0,
        din1 => grp_fu_1087_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1087_p2);

    mul_mul_15ns_16ns_31_4_1_U74 : component needwun_mul_mul_15ns_16ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1094_p0,
        din1 => grp_fu_1094_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1094_p2);

    mul_mul_15ns_16ns_31_4_1_U75 : component needwun_mul_mul_15ns_16ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1101_p0,
        din1 => grp_fu_1101_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1101_p2);

    flow_control_loop_pipe_sequential_init_U : component needwun_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    a_idx_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_idx_fu_142 <= ap_const_lv8_1;
            elsif (((icmp_ln31_reg_1146 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                a_idx_fu_142 <= add_ln31_fu_484_p2;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    reg_295 <= M_0_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    reg_295 <= M_0_q0;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reuse_addr_reg_fu_134 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reuse_addr_reg_fu_134 <= zext_ln47_1_fu_628_p1;
            end if; 
        end if;
    end process;

    reuse_reg_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_reg_fu_138 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    reuse_reg_fu_138 <= or_ln50_1_fu_1041_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_22_reg_1258 = ap_const_lv1_0))) then
                M_0_addr_4_reg_1317 <= zext_ln47_3_fu_632_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_22_reg_1258 = ap_const_lv1_0))) then
                M_0_load_4_reg_1362 <= M_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_22_reg_1258 = ap_const_lv1_1))) then
                M_1_addr_4_reg_1322 <= zext_ln47_3_fu_632_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_idx_5_reg_1139 <= ap_sig_allocacmp_a_idx_5;
                add_ln41_reg_1160_pp0_iter1_reg <= add_ln41_reg_1160;
                add_ln41_reg_1160_pp0_iter2_reg <= add_ln41_reg_1160_pp0_iter1_reg;
                add_ln41_reg_1160_pp0_iter3_reg <= add_ln41_reg_1160_pp0_iter2_reg;
                add_ln41_reg_1160_pp0_iter4_reg <= add_ln41_reg_1160_pp0_iter3_reg;
                add_ln41_reg_1160_pp0_iter5_reg <= add_ln41_reg_1160_pp0_iter4_reg;
                add_ln41_reg_1160_pp0_iter6_reg <= add_ln41_reg_1160_pp0_iter5_reg;
                add_ln42_reg_1166_pp0_iter1_reg <= add_ln42_reg_1166;
                add_ln42_reg_1166_pp0_iter2_reg <= add_ln42_reg_1166_pp0_iter1_reg;
                add_ln42_reg_1166_pp0_iter3_reg <= add_ln42_reg_1166_pp0_iter2_reg;
                add_ln42_reg_1166_pp0_iter4_reg <= add_ln42_reg_1166_pp0_iter3_reg;
                add_ln42_reg_1166_pp0_iter5_reg <= add_ln42_reg_1166_pp0_iter4_reg;
                add_ln42_reg_1166_pp0_iter6_reg <= add_ln42_reg_1166_pp0_iter5_reg;
                add_ln43_reg_1172_pp0_iter1_reg <= add_ln43_reg_1172;
                add_ln43_reg_1172_pp0_iter2_reg <= add_ln43_reg_1172_pp0_iter1_reg;
                add_ln43_reg_1172_pp0_iter3_reg <= add_ln43_reg_1172_pp0_iter2_reg;
                add_ln43_reg_1172_pp0_iter4_reg <= add_ln43_reg_1172_pp0_iter3_reg;
                add_ln43_reg_1172_pp0_iter5_reg <= add_ln43_reg_1172_pp0_iter4_reg;
                add_ln43_reg_1172_pp0_iter6_reg <= add_ln43_reg_1172_pp0_iter5_reg;
                add_ln47_reg_1178_pp0_iter1_reg <= add_ln47_reg_1178;
                add_ln47_reg_1178_pp0_iter2_reg <= add_ln47_reg_1178_pp0_iter1_reg;
                add_ln47_reg_1178_pp0_iter3_reg <= add_ln47_reg_1178_pp0_iter2_reg;
                add_ln47_reg_1178_pp0_iter4_reg <= add_ln47_reg_1178_pp0_iter3_reg;
                add_ln47_reg_1178_pp0_iter5_reg <= add_ln47_reg_1178_pp0_iter4_reg;
                add_ln47_reg_1178_pp0_iter6_reg <= add_ln47_reg_1178_pp0_iter5_reg;
                icmp_ln31_reg_1146 <= icmp_ln31_fu_322_p2;
                icmp_ln31_reg_1146_pp0_iter1_reg <= icmp_ln31_reg_1146;
                icmp_ln31_reg_1146_pp0_iter2_reg <= icmp_ln31_reg_1146_pp0_iter1_reg;
                icmp_ln31_reg_1146_pp0_iter3_reg <= icmp_ln31_reg_1146_pp0_iter2_reg;
                icmp_ln31_reg_1146_pp0_iter4_reg <= icmp_ln31_reg_1146_pp0_iter3_reg;
                icmp_ln31_reg_1146_pp0_iter5_reg <= icmp_ln31_reg_1146_pp0_iter4_reg;
                icmp_ln31_reg_1146_pp0_iter6_reg <= icmp_ln31_reg_1146_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln31_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln41_reg_1160 <= add_ln41_fu_358_p2;
                add_ln42_reg_1166 <= add_ln42_fu_370_p2;
                add_ln43_reg_1172 <= add_ln43_fu_382_p2;
                add_ln47_reg_1178 <= add_ln47_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                addr_cmp_reg_1332 <= addr_cmp_fu_641_p2;
                ptr_addr_reg_1327 <= zext_ln47_1_fu_628_p1(14 - 1 downto 0);
                    shl_ln41_1_reg_1292(5) <= shl_ln41_1_fu_593_p3(5);
                tmp_17_reg_1302 <= tmp_17_fu_615_p1(27 downto 27);
                tmp_s_reg_1184_pp0_iter1_reg <= tmp_s_reg_1184;
                tmp_s_reg_1184_pp0_iter2_reg <= tmp_s_reg_1184_pp0_iter1_reg;
                tmp_s_reg_1184_pp0_iter3_reg <= tmp_s_reg_1184_pp0_iter2_reg;
                tmp_s_reg_1184_pp0_iter4_reg <= tmp_s_reg_1184_pp0_iter3_reg;
                tmp_s_reg_1184_pp0_iter5_reg <= tmp_s_reg_1184_pp0_iter4_reg;
                tmp_s_reg_1184_pp0_iter6_reg <= tmp_s_reg_1184_pp0_iter5_reg;
                tmp_s_reg_1184_pp0_iter7_reg <= tmp_s_reg_1184_pp0_iter6_reg;
                trunc_ln41_1_reg_1297 <= trunc_ln41_1_fu_611_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                icmp_ln45_reg_1390 <= icmp_ln45_fu_835_p2;
                left_reg_1384 <= left_fu_829_p2;
                trunc_ln41_reg_1189 <= trunc_ln41_fu_494_p1;
                trunc_ln41_reg_1189_pp0_iter4_reg <= trunc_ln41_reg_1189;
                trunc_ln41_reg_1189_pp0_iter5_reg <= trunc_ln41_reg_1189_pp0_iter4_reg;
                trunc_ln42_reg_1195 <= trunc_ln42_fu_504_p1;
                trunc_ln42_reg_1195_pp0_iter4_reg <= trunc_ln42_reg_1195;
                trunc_ln42_reg_1195_pp0_iter5_reg <= trunc_ln42_reg_1195_pp0_iter4_reg;
                up_left_reg_1372 <= up_left_fu_756_p2;
                up_reg_1378 <= up_fu_779_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul_ln47_reg_1248 <= grp_fu_1059_p2;
                shl_ln50_1_reg_1400 <= shl_ln50_1_fu_1009_p2;
                tmp_18_reg_1238 <= tmp_18_fu_546_p1(30 downto 29);
                tmp_22_reg_1258 <= tmp_22_fu_561_p1(29 downto 29);
                trunc_ln43_reg_1201 <= trunc_ln43_fu_514_p1;
                trunc_ln43_reg_1201_pp0_iter4_reg <= trunc_ln43_reg_1201;
                trunc_ln43_reg_1201_pp0_iter5_reg <= trunc_ln43_reg_1201_pp0_iter4_reg;
                trunc_ln47_reg_1212 <= trunc_ln47_fu_524_p1;
                trunc_ln47_reg_1212_pp0_iter4_reg <= trunc_ln47_reg_1212;
                trunc_ln47_reg_1212_pp0_iter5_reg <= trunc_ln47_reg_1212_pp0_iter4_reg;
                urem_ln47_reg_1207 <= grp_fu_479_p2;
                urem_ln47_reg_1207_pp0_iter4_reg <= urem_ln47_reg_1207;
                urem_ln47_reg_1207_pp0_iter5_reg <= urem_ln47_reg_1207_pp0_iter4_reg;
                urem_ln47_reg_1207_pp0_iter6_reg <= urem_ln47_reg_1207_pp0_iter5_reg;
                    zext_ln50_reg_1395(3) <= zext_ln50_fu_1001_p1(3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                ptr_load_reg_1367 <= ptr_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_291 <= M_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_22_reg_1258 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_300 <= M_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_19_reg_1352 <= tmp_19_fu_700_p1(27 downto 27);
                tmp_21_reg_1357 <= tmp_21_fu_707_p1(27 downto 27);
                trunc_ln41_2_reg_1337 <= trunc_ln41_2_fu_661_p1;
                trunc_ln42_1_reg_1342 <= trunc_ln42_1_fu_682_p1;
                trunc_ln42_2_reg_1347 <= trunc_ln42_2_fu_696_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_1146 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_s_reg_1184 <= tmp_s_fu_464_p4;
            end if;
        end if;
    end process;
    shl_ln41_1_reg_1292(4 downto 0) <= "00000";
    zext_ln50_reg_1395(2 downto 0) <= "000";
    zext_ln50_reg_1395(15 downto 4) <= "000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter7_stage0, ap_idle_pp0_0to6, ap_idle_pp0_1to8, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to8 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    M_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, M_0_addr_4_reg_1317, ap_block_pp0_stage0, zext_ln42_2_fu_580_p1, ap_block_pp0_stage1, zext_ln47_3_fu_632_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                M_0_address0 <= M_0_addr_4_reg_1317;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                M_0_address0 <= zext_ln47_3_fu_632_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                M_0_address0 <= zext_ln42_2_fu_580_p1(13 - 1 downto 0);
            else 
                M_0_address0 <= "XXXXXXXXXXXXX";
            end if;
        else 
            M_0_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    M_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln41_2_fu_571_p1, zext_ln43_2_fu_622_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                M_0_address1 <= zext_ln43_2_fu_622_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                M_0_address1 <= zext_ln41_2_fu_571_p1(13 - 1 downto 0);
            else 
                M_0_address1 <= "XXXXXXXXXXXXX";
            end if;
        else 
            M_0_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    M_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            M_0_ce0 <= ap_const_logic_1;
        else 
            M_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    M_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            M_0_ce1 <= ap_const_logic_1;
        else 
            M_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    M_0_d0 <= (shl_ln47_4_fu_890_p2 or and_ln47_1_fu_881_p2);

    M_0_we0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, tmp_22_reg_1258, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (tmp_22_reg_1258 = ap_const_lv1_0))) then 
            M_0_we0 <= ap_const_logic_1;
        else 
            M_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    M_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, M_1_addr_4_reg_1322, ap_block_pp0_stage0, zext_ln42_2_fu_580_p1, ap_block_pp0_stage1, zext_ln47_3_fu_632_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                M_1_address0 <= M_1_addr_4_reg_1322;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                M_1_address0 <= zext_ln47_3_fu_632_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                M_1_address0 <= zext_ln42_2_fu_580_p1(13 - 1 downto 0);
            else 
                M_1_address0 <= "XXXXXXXXXXXXX";
            end if;
        else 
            M_1_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    M_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln41_2_fu_571_p1, zext_ln43_2_fu_622_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                M_1_address1 <= zext_ln43_2_fu_622_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                M_1_address1 <= zext_ln41_2_fu_571_p1(13 - 1 downto 0);
            else 
                M_1_address1 <= "XXXXXXXXXXXXX";
            end if;
        else 
            M_1_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    M_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            M_1_ce0 <= ap_const_logic_1;
        else 
            M_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    M_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            M_1_ce1 <= ap_const_logic_1;
        else 
            M_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    M_1_d0 <= (shl_ln47_2_fu_929_p2 or and_ln47_fu_919_p2);

    M_1_we0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage4, tmp_22_reg_1258, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (tmp_22_reg_1258 = ap_const_lv1_1))) then 
            M_1_we0 <= ap_const_logic_1;
        else 
            M_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    SEQA_0_address0 <= zext_ln32_1_fu_352_p1(5 - 1 downto 0);

    SEQA_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SEQA_0_ce0 <= ap_const_logic_1;
        else 
            SEQA_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SEQA_1_address0 <= zext_ln32_1_fu_352_p1(5 - 1 downto 0);

    SEQA_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SEQA_1_ce0 <= ap_const_logic_1;
        else 
            SEQA_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln31_fu_484_p2 <= std_logic_vector(unsigned(a_idx_5_reg_1139) + unsigned(ap_const_lv8_1));
    add_ln32_1_fu_346_p2 <= std_logic_vector(unsigned(trunc_ln32_2_fu_332_p1) + unsigned(ap_const_lv5_1F));
    add_ln32_2_fu_400_p2 <= std_logic_vector(unsigned(trunc_ln32_1_fu_397_p1) + unsigned(ap_const_lv6_3F));
    add_ln32_3_fu_406_p2 <= std_logic_vector(unsigned(trunc_ln32_fu_394_p1) + unsigned(ap_const_lv7_7F));
    add_ln32_fu_336_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_a_idx_5) + unsigned(ap_const_lv8_FF));
    add_ln41_fu_358_p2 <= std_logic_vector(unsigned(zext_ln32_fu_342_p1) + unsigned(empty_16));
    add_ln42_fu_370_p2 <= std_logic_vector(unsigned(zext_ln31_fu_328_p1) + unsigned(empty_16));
    add_ln43_fu_382_p2 <= std_logic_vector(unsigned(zext_ln32_fu_342_p1) + unsigned(empty));
    add_ln47_fu_388_p2 <= std_logic_vector(unsigned(zext_ln31_fu_328_p1) + unsigned(empty));
    addr_cmp_fu_641_p2 <= "1" when (reuse_addr_reg_fu_134 = zext_ln47_1_fu_628_p1) else "0";
    and_ln32_1_fu_428_p3 <= (tmp_13_fu_420_p3 & ap_const_lv3_0);
    and_ln47_1_fu_881_p2 <= (xor_ln47_1_fu_875_p2 and M_0_load_4_reg_1362);
    and_ln47_fu_919_p2 <= (xor_ln47_fu_913_p2 and reg_300);
    and_ln50_1_fu_1035_p2 <= (xor_ln50_fu_1029_p2 and reuse_select_fu_1018_p3);
    and_ln50_fu_965_p2 <= (xor_ln48_fu_959_p2 and icmp_ln50_fu_954_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage4_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, icmp_ln31_reg_1146)
    begin
        if (((icmp_ln31_reg_1146 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter7_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, icmp_ln31_reg_1146_pp0_iter6_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln31_reg_1146_pp0_iter6_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter7_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter7_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to8_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to8 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to8 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_a_idx_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, a_idx_fu_142)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_a_idx_5 <= ap_const_lv8_1;
        else 
            ap_sig_allocacmp_a_idx_5 <= a_idx_fu_142;
        end if; 
    end process;

    grp_fu_1052_p0 <= grp_fu_1052_p00(15 - 1 downto 0);
    grp_fu_1052_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_reg_1172_pp0_iter6_reg),31));
    grp_fu_1052_p1 <= ap_const_lv31_FC08(16 - 1 downto 0);
    grp_fu_1059_p0 <= grp_fu_1059_p00(15 - 1 downto 0);
    grp_fu_1059_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln47_reg_1178_pp0_iter6_reg),31));
    grp_fu_1059_p1 <= ap_const_lv31_FC08(16 - 1 downto 0);
    grp_fu_1066_p0 <= grp_fu_1066_p00(14 - 1 downto 0);
    grp_fu_1066_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln41_reg_1189_pp0_iter5_reg),29));
    grp_fu_1066_p1 <= ap_const_lv29_7E01(15 - 1 downto 0);
    grp_fu_1073_p0 <= grp_fu_1073_p00(14 - 1 downto 0);
    grp_fu_1073_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln42_reg_1195_pp0_iter5_reg),29));
    grp_fu_1073_p1 <= ap_const_lv29_7E01(15 - 1 downto 0);
    grp_fu_1080_p0 <= grp_fu_1080_p00(14 - 1 downto 0);
    grp_fu_1080_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln43_reg_1201_pp0_iter5_reg),29));
    grp_fu_1080_p1 <= ap_const_lv29_7E01(15 - 1 downto 0);
    grp_fu_1087_p0 <= grp_fu_1087_p00(14 - 1 downto 0);
    grp_fu_1087_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln47_reg_1212_pp0_iter5_reg),29));
    grp_fu_1087_p1 <= ap_const_lv29_7E01(15 - 1 downto 0);
    grp_fu_1094_p0 <= grp_fu_1094_p00(15 - 1 downto 0);
    grp_fu_1094_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_reg_1160_pp0_iter6_reg),31));
    grp_fu_1094_p1 <= ap_const_lv31_FC08(16 - 1 downto 0);
    grp_fu_1101_p0 <= grp_fu_1101_p00(15 - 1 downto 0);
    grp_fu_1101_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_reg_1166_pp0_iter6_reg),31));
    grp_fu_1101_p1 <= ap_const_lv31_FC08(16 - 1 downto 0);
    grp_fu_364_p0 <= std_logic_vector(unsigned(zext_ln32_fu_342_p1) + unsigned(empty_16));
    grp_fu_376_p0 <= std_logic_vector(unsigned(zext_ln31_fu_328_p1) + unsigned(empty_16));
    grp_fu_498_p0 <= grp_fu_364_p2(14 - 1 downto 0);
    grp_fu_508_p0 <= grp_fu_376_p2(14 - 1 downto 0);
    grp_fu_518_p0 <= grp_fu_474_p2(14 - 1 downto 0);
    grp_fu_528_p0 <= grp_fu_479_p2(14 - 1 downto 0);
    icmp_ln31_fu_322_p2 <= "1" when (ap_sig_allocacmp_a_idx_5 = ap_const_lv8_81) else "0";
    icmp_ln32_fu_726_p2 <= "1" when (tmp_s_reg_1184_pp0_iter7_reg = trunc_ln32_5_fu_722_p1) else "0";
    icmp_ln45_1_fu_846_p2 <= "1" when (signed(up_left_reg_1372) > signed(select_ln45_fu_841_p3)) else "0";
    icmp_ln45_fu_835_p2 <= "1" when (signed(up_fu_779_p2) > signed(left_fu_829_p2)) else "0";
    icmp_ln48_fu_942_p2 <= "1" when (left_reg_1384 = max_fu_851_p3) else "0";
    icmp_ln50_fu_954_p2 <= "1" when (max_fu_851_p3 = up_reg_1378) else "0";
    lshr_ln32_1_fu_454_p2 <= std_logic_vector(shift_right(unsigned(SEQA_1_q0),to_integer(unsigned('0' & zext_ln32_3_fu_450_p1(16-1 downto 0)))));
    lshr_ln32_2_fu_717_p2 <= std_logic_vector(shift_right(unsigned(SEQB_load_3),to_integer(unsigned('0' & zext_ln32_4_fu_714_p1(16-1 downto 0)))));
    lshr_ln32_fu_440_p2 <= std_logic_vector(shift_right(unsigned(SEQA_0_q0),to_integer(unsigned('0' & zext_ln32_2_fu_436_p1(16-1 downto 0)))));
    lshr_ln41_1_fu_655_p2 <= std_logic_vector(shift_right(unsigned(reg_291),to_integer(unsigned('0' & zext_ln41_4_fu_652_p1(31-1 downto 0)))));
    lshr_ln41_fu_605_p2 <= std_logic_vector(shift_right(unsigned(M_0_q1),to_integer(unsigned('0' & zext_ln41_3_fu_601_p1(31-1 downto 0)))));
    lshr_ln42_1_fu_690_p2 <= std_logic_vector(shift_right(unsigned(reg_300),to_integer(unsigned('0' & zext_ln42_4_fu_686_p1(31-1 downto 0)))));
    lshr_ln42_fu_676_p2 <= std_logic_vector(shift_right(unsigned(reg_295),to_integer(unsigned('0' & zext_ln42_3_fu_672_p1(31-1 downto 0)))));
    lshr_ln43_1_fu_810_p2 <= std_logic_vector(shift_right(unsigned(reg_291),to_integer(unsigned('0' & zext_ln43_4_fu_806_p1(31-1 downto 0)))));
    lshr_ln43_fu_796_p2 <= std_logic_vector(shift_right(unsigned(reg_295),to_integer(unsigned('0' & zext_ln43_3_fu_792_p1(31-1 downto 0)))));
    max_fu_851_p3 <= 
        up_left_reg_1372 when (icmp_ln45_1_fu_846_p2(0) = '1') else 
        select_ln45_fu_841_p3;
    or_ln50_1_fu_1041_p2 <= (shl_ln50_1_reg_1400 or and_ln50_1_fu_1035_p2);
    or_ln50_fu_979_p2 <= (icmp_ln48_fu_942_p2 or and_ln50_fu_965_p2);

    ptr_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, ptr_addr_reg_1327, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln47_1_fu_628_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ptr_address0 <= ptr_addr_reg_1327;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ptr_address0 <= zext_ln47_1_fu_628_p1(14 - 1 downto 0);
        else 
            ptr_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ptr_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            ptr_ce0 <= ap_const_logic_1;
        else 
            ptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ptr_d0 <= (shl_ln50_1_reg_1400 or and_ln50_1_fu_1035_p2);

    ptr_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ptr_we0 <= ap_const_logic_1;
        else 
            ptr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    reuse_select_fu_1018_p3 <= 
        reuse_reg_fu_138 when (addr_cmp_reg_1332(0) = '1') else 
        ptr_load_reg_1367;
    select_ln45_fu_841_p3 <= 
        up_reg_1378 when (icmp_ln45_reg_1390(0) = '1') else 
        left_reg_1384;
    select_ln50_1_fu_985_p3 <= 
        select_ln50_fu_971_p3 when (or_ln50_fu_979_p2(0) = '1') else 
        ap_const_lv7_5C;
    select_ln50_fu_971_p3 <= 
        ap_const_lv7_5E when (and_ln50_fu_965_p2(0) = '1') else 
        ap_const_lv7_3C;
    shl_ln41_1_fu_593_p3 <= (tmp_15_fu_586_p3 & ap_const_lv5_0);
    shl_ln42_1_fu_665_p3 <= (tmp_17_reg_1302 & ap_const_lv5_0);
    shl_ln43_1_fu_785_p3 <= (tmp_19_reg_1352 & ap_const_lv5_0);
    shl_ln47_1_fu_858_p3 <= (tmp_21_reg_1357 & ap_const_lv5_0);
    shl_ln47_2_fu_929_p2 <= std_logic_vector(shift_left(unsigned(zext_ln47_5_fu_925_p1),to_integer(unsigned('0' & zext_ln47_4_fu_903_p1(31-1 downto 0)))));
    shl_ln47_3_fu_869_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln47_6_fu_865_p1(31-1 downto 0)))));
    shl_ln47_4_fu_890_p2 <= std_logic_vector(shift_left(unsigned(zext_ln47_7_fu_886_p1),to_integer(unsigned('0' & zext_ln47_6_fu_865_p1(31-1 downto 0)))));
    shl_ln47_fu_907_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln47_4_fu_903_p1(31-1 downto 0)))));
    shl_ln50_1_fu_1009_p2 <= std_logic_vector(shift_left(unsigned(zext_ln50_1_fu_1005_p1),to_integer(unsigned('0' & zext_ln50_fu_1001_p1(16-1 downto 0)))));
    shl_ln50_fu_1024_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_FF),to_integer(unsigned('0' & zext_ln50_reg_1395(16-1 downto 0)))));
    tmp_10_fu_771_p3 <= tmp_16_fu_762_p1(30 downto 29);
    tmp_13_fu_420_p3 <= add_ln32_2_fu_400_p2(5 downto 5);
    tmp_14_fu_739_p1 <= grp_fu_1094_p2;
    tmp_15_fu_586_p1 <= grp_fu_1066_p2;
    tmp_15_fu_586_p3 <= tmp_15_fu_586_p1(27 downto 27);
    tmp_16_fu_762_p1 <= grp_fu_1101_p2;
    tmp_17_fu_615_p1 <= grp_fu_1073_p2;
    tmp_18_fu_546_p1 <= grp_fu_1052_p2;
    tmp_19_fu_700_p1 <= grp_fu_1080_p2;
    tmp_20_fu_820_p1 <= lshr_ln43_fu_796_p2(32 - 1 downto 0);
    tmp_20_fu_820_p2 <= lshr_ln43_1_fu_810_p2(32 - 1 downto 0);
    tmp_21_fu_707_p1 <= grp_fu_1087_p2;
    tmp_22_fu_561_p1 <= grp_fu_1059_p2;
    tmp_23_fu_947_p3 <= mul_ln47_reg_1248(29 downto 29);
    tmp_24_fu_993_p3 <= (tmp_23_fu_947_p3 & ap_const_lv3_0);
    tmp_9_fu_748_p3 <= tmp_14_fu_739_p1(30 downto 29);
    tmp_s_fu_464_p1 <= lshr_ln32_fu_440_p2(8 - 1 downto 0);
    tmp_s_fu_464_p2 <= lshr_ln32_1_fu_454_p2(8 - 1 downto 0);
    tmp_s_fu_464_p3 <= add_ln32_3_fu_406_p2(6 downto 6);
    trunc_ln32_1_fu_397_p1 <= a_idx_5_reg_1139(6 - 1 downto 0);
    trunc_ln32_2_fu_332_p1 <= ap_sig_allocacmp_a_idx_5(5 - 1 downto 0);
    trunc_ln32_5_fu_722_p1 <= lshr_ln32_2_fu_717_p2(8 - 1 downto 0);
    trunc_ln32_fu_394_p1 <= a_idx_5_reg_1139(7 - 1 downto 0);
    trunc_ln41_1_fu_611_p1 <= lshr_ln41_fu_605_p2(32 - 1 downto 0);
    trunc_ln41_2_fu_661_p1 <= lshr_ln41_1_fu_655_p2(32 - 1 downto 0);
    trunc_ln41_fu_494_p1 <= grp_fu_364_p2(14 - 1 downto 0);
    trunc_ln42_1_fu_682_p1 <= lshr_ln42_fu_676_p2(32 - 1 downto 0);
    trunc_ln42_2_fu_696_p1 <= lshr_ln42_1_fu_690_p2(32 - 1 downto 0);
    trunc_ln42_fu_504_p1 <= grp_fu_376_p2(14 - 1 downto 0);
    trunc_ln43_fu_514_p1 <= grp_fu_474_p2(14 - 1 downto 0);
    trunc_ln47_fu_524_p1 <= grp_fu_479_p2(14 - 1 downto 0);
    up_left_fu_756_p1 <= 
        ap_const_lv32_1 when (icmp_ln32_fu_726_p2(0) = '1') else 
        ap_const_lv32_FFFFFFFF;
    xor_ln47_1_fu_875_p2 <= (shl_ln47_3_fu_869_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln47_fu_913_p2 <= (shl_ln47_fu_907_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln48_fu_959_p2 <= (icmp_ln48_fu_942_p2 xor ap_const_lv1_1);
    xor_ln50_fu_1029_p2 <= (shl_ln50_fu_1024_p2 xor ap_const_lv16_FFFF);
    zext_ln31_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_a_idx_5),15));
    zext_ln32_1_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_1_fu_346_p2),64));
    zext_ln32_2_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln32_1_fu_428_p3),16));
    zext_ln32_3_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln32_1_fu_428_p3),16));
    zext_ln32_4_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast21),16));
    zext_ln32_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_fu_336_p2),15));
    zext_ln41_2_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_498_p2),64));
    zext_ln41_3_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln41_1_fu_593_p3),64));
    zext_ln41_4_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln41_1_reg_1292),64));
    zext_ln42_2_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_508_p2),64));
    zext_ln42_3_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln42_1_fu_665_p3),64));
    zext_ln42_4_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln42_1_fu_665_p3),64));
    zext_ln43_2_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_518_p2),64));
    zext_ln43_3_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln43_1_fu_785_p3),64));
    zext_ln43_4_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln43_1_fu_785_p3),64));
    zext_ln47_1_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(urem_ln47_reg_1207_pp0_iter6_reg),64));
    zext_ln47_3_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_528_p2),64));
    zext_ln47_4_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln47_1_fu_858_p3),64));
    zext_ln47_5_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_fu_851_p3),64));
    zext_ln47_6_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln47_1_fu_858_p3),64));
    zext_ln47_7_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_fu_851_p3),64));
    zext_ln50_1_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_1_fu_985_p3),16));
    zext_ln50_fu_1001_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_993_p3),16));
end behav;
