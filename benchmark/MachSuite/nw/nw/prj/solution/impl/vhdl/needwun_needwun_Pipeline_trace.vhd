-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity needwun_needwun_Pipeline_trace is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    SEQA_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    SEQA_0_ce0 : OUT STD_LOGIC;
    SEQA_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    SEQA_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    SEQA_1_ce0 : OUT STD_LOGIC;
    SEQA_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    SEQB_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    SEQB_ce0 : OUT STD_LOGIC;
    SEQB_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    ptr_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ptr_ce0 : OUT STD_LOGIC;
    ptr_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    alignedA_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    alignedA_ce0 : OUT STD_LOGIC;
    alignedA_we0 : OUT STD_LOGIC;
    alignedA_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    alignedB_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    alignedB_ce0 : OUT STD_LOGIC;
    alignedB_we0 : OUT STD_LOGIC;
    alignedB_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_str_idx_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_str_idx_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of needwun_needwun_Pipeline_trace is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage30 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage31 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage32 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage33 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage34 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage35 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage36 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage37 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_3C : STD_LOGIC_VECTOR (7 downto 0) := "00111100";
    constant ap_const_lv8_5C : STD_LOGIC_VECTOR (7 downto 0) := "01011100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv65_1F80FFF82 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000111111000000011111111111110000010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2081 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000010000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage37 : signal is "none";
    signal ap_block_state38_pp0_stage37_iter0 : BOOLEAN;
    signal ap_block_pp0_stage37_subdone : BOOLEAN;
    signal or_ln64_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage37 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_243 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln66_fu_362_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_247 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state40_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln66_reg_678 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_idx_1_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_idx_1_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln64_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln66_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state41_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_reg_668 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage37_11001 : BOOLEAN;
    signal alignedA_addr_reg_682 : STD_LOGIC_VECTOR (7 downto 0);
    signal alignedB_addr_reg_687 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_692 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_732 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln9_fu_483_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln9_reg_742 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln73_2_fu_500_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln73_2_reg_747 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln7_fu_504_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln7_reg_752 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln67_2_fu_521_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln67_2_reg_757 : STD_LOGIC_VECTOR (7 downto 0);
    signal SEQB_load_1_reg_762 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state42_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal zext_ln66_1_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage37 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln73_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_str_idx_fu_92 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_fu_339_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal b_idx_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal a_idx_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln79_1_fu_542_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal trunc_ln68_1_fu_609_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_8_fu_560_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_s_fu_583_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln64_1_fu_278_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln64_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_1_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_290_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln66_fu_304_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln66_fu_304_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln66_fu_304_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_318_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_345_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln66_2_fu_352_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln66_fu_356_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln73_1_fu_369_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln73_fu_366_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln73_2_fu_378_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln73_1_fu_372_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln67_1_fu_406_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln67_fu_403_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln67_2_fu_415_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln67_1_fu_409_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln68_fu_435_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_2_fu_438_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln79_fu_459_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln79_1_fu_462_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln73_1_fu_490_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln73_fu_494_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln67_1_fu_511_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln67_fu_515_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_525_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln79_1_fu_532_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln79_fu_536_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln73_2_fu_547_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln73_1_fu_550_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_560_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln67_2_fu_570_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln67_1_fu_573_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_583_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_593_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln68_1_fu_600_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln68_fu_604_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_state17_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_state18_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_state19_pp0_stage18_iter0 : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_state20_pp0_stage19_iter0 : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_state21_pp0_stage20_iter0 : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_state22_pp0_stage21_iter0 : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_state23_pp0_stage22_iter0 : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_state24_pp0_stage23_iter0 : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_state25_pp0_stage24_iter0 : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_block_state26_pp0_stage25_iter0 : BOOLEAN;
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal ap_block_state27_pp0_stage26_iter0 : BOOLEAN;
    signal ap_block_pp0_stage26_subdone : BOOLEAN;
    signal ap_block_state28_pp0_stage27_iter0 : BOOLEAN;
    signal ap_block_pp0_stage27_subdone : BOOLEAN;
    signal ap_block_state29_pp0_stage28_iter0 : BOOLEAN;
    signal ap_block_pp0_stage28_subdone : BOOLEAN;
    signal ap_block_state30_pp0_stage29_iter0 : BOOLEAN;
    signal ap_block_pp0_stage29_subdone : BOOLEAN;
    signal ap_block_state31_pp0_stage30_iter0 : BOOLEAN;
    signal ap_block_pp0_stage30_subdone : BOOLEAN;
    signal ap_block_state32_pp0_stage31_iter0 : BOOLEAN;
    signal ap_block_pp0_stage31_subdone : BOOLEAN;
    signal ap_block_state33_pp0_stage32_iter0 : BOOLEAN;
    signal ap_block_pp0_stage32_subdone : BOOLEAN;
    signal ap_block_state34_pp0_stage33_iter0 : BOOLEAN;
    signal ap_block_pp0_stage33_subdone : BOOLEAN;
    signal ap_block_state35_pp0_stage34_iter0 : BOOLEAN;
    signal ap_block_pp0_stage34_subdone : BOOLEAN;
    signal ap_block_state36_pp0_stage35_iter0 : BOOLEAN;
    signal ap_block_pp0_stage35_subdone : BOOLEAN;
    signal ap_block_state37_pp0_stage36_iter0 : BOOLEAN;
    signal ap_block_pp0_stage36_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln66_fu_304_p00 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_condition_278 : BOOLEAN;
    signal ap_condition_814 : BOOLEAN;
    signal ap_condition_817 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component needwun_mul_32s_9ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component needwun_mul_32ns_34ns_65_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component needwun_urem_32ns_15ns_32_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component needwun_mux_226_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component needwun_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_9ns_32_1_1_U85 : component needwun_mul_32s_9ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 9,
        dout_WIDTH => 32)
    port map (
        din0 => b_idx_fu_96,
        din1 => r_fu_290_p1,
        dout => r_fu_290_p2);

    mul_32ns_34ns_65_1_1_U86 : component needwun_mul_32ns_34ns_65_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        din0 => mul_ln66_fu_304_p0,
        din1 => mul_ln66_fu_304_p1,
        dout => mul_ln66_fu_304_p2);

    urem_32ns_15ns_32_36_1_U87 : component needwun_urem_32ns_15ns_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 15,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln66_fu_296_p2,
        din1 => grp_fu_318_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_318_p2);

    mux_226_8_1_1_U88 : component needwun_mux_226_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 26,
        dout_WIDTH => 8)
    port map (
        din0 => trunc_ln73_2_reg_747,
        din1 => tmp_8_fu_560_p2,
        din2 => reg_243,
        dout => tmp_8_fu_560_p4);

    mux_226_8_1_1_U89 : component needwun_mux_226_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 26,
        dout_WIDTH => 8)
    port map (
        din0 => trunc_ln67_2_reg_757,
        din1 => tmp_s_fu_583_p2,
        din2 => reg_243,
        dout => tmp_s_fu_583_p4);

    flow_control_loop_pipe_sequential_init_U : component needwun_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage37,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage37_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage37))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    a_idx_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_idx_fu_100 <= ap_const_lv32_80;
            elsif ((((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_5C)) or ((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_3C)))) then 
                a_idx_fu_100 <= grp_fu_215_p2;
            end if; 
        end if;
    end process;

    a_str_idx_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    a_str_idx_fu_92 <= ap_const_lv64_0;
                elsif (((or_ln64_reg_654 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    a_str_idx_fu_92 <= add_ln68_fu_339_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage37_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage37))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    b_idx_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_idx_fu_96 <= ap_const_lv32_80;
            elsif (((not((trunc_ln66_fu_362_p1 = ap_const_lv8_5C)) and not((trunc_ln66_fu_362_p1 = ap_const_lv8_3C)) and (or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_5C)))) then 
                b_idx_fu_96 <= grp_fu_230_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln66_reg_678 = ap_const_lv8_5C))) then
                SEQB_load_1_reg_762 <= SEQB_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                a_idx_1_reg_644 <= a_idx_fu_100;
                b_idx_1_reg_637 <= b_idx_fu_96;
                or_ln64_reg_654 <= or_ln64_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                alignedA_addr_reg_682 <= a_str_idx_fu_92(8 - 1 downto 0);
                alignedB_addr_reg_687 <= a_str_idx_fu_92(8 - 1 downto 0);
                trunc_ln66_reg_678 <= trunc_ln66_fu_362_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (or_ln64_fu_284_p2 = ap_const_lv1_1))) then
                r_reg_658 <= r_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_5C)) or ((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_3C)))) then
                reg_243 <= grp_fu_215_p2(31 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln66_reg_678 = ap_const_lv8_5C)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln66_reg_678 = ap_const_lv8_3C)))) then
                reg_247 <= SEQA_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln66_reg_678 = ap_const_lv8_5C))) then
                    shl_ln7_reg_752(3) <= shl_ln7_fu_504_p3(3);
                trunc_ln67_2_reg_757 <= trunc_ln67_2_fu_521_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln66_reg_678 = ap_const_lv8_3C))) then
                    shl_ln9_reg_742(3) <= shl_ln9_fu_483_p3(3);
                trunc_ln73_2_reg_747 <= trunc_ln73_2_fu_500_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln66_fu_362_p1 = ap_const_lv8_5C)) and not((trunc_ln66_fu_362_p1 = ap_const_lv8_3C)) and (or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_2_reg_732 <= grp_fu_230_p2(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_5C))) then
                tmp_4_reg_707 <= add_ln67_2_fu_415_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_5C))) then
                tmp_5_reg_722 <= grp_fu_230_p2(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_3C))) then
                tmp_7_reg_692 <= add_ln73_2_fu_378_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_reg_668 <= mul_ln66_fu_304_p2(46 downto 46);
            end if;
        end if;
    end process;
    shl_ln9_reg_742(2 downto 0) <= "000";
    shl_ln7_reg_752(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage37_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_block_pp0_stage3_subdone, ap_idle_pp0_0to0, ap_idle_pp0_1to1, ap_done_pending_pp0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_block_pp0_stage25_subdone, ap_block_pp0_stage26_subdone, ap_block_pp0_stage27_subdone, ap_block_pp0_stage28_subdone, ap_block_pp0_stage29_subdone, ap_block_pp0_stage30_subdone, ap_block_pp0_stage31_subdone, ap_block_pp0_stage32_subdone, ap_block_pp0_stage33_subdone, ap_block_pp0_stage34_subdone, ap_block_pp0_stage35_subdone, ap_block_pp0_stage36_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when ap_ST_fsm_pp0_stage26 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage26_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                end if;
            when ap_ST_fsm_pp0_stage27 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage27_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                end if;
            when ap_ST_fsm_pp0_stage28 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage28_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                end if;
            when ap_ST_fsm_pp0_stage29 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage29_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                end if;
            when ap_ST_fsm_pp0_stage30 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage30_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                end if;
            when ap_ST_fsm_pp0_stage31 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage31_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                end if;
            when ap_ST_fsm_pp0_stage32 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage32_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                end if;
            when ap_ST_fsm_pp0_stage33 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage33_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                end if;
            when ap_ST_fsm_pp0_stage34 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage34_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                end if;
            when ap_ST_fsm_pp0_stage35 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage35_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                end if;
            when ap_ST_fsm_pp0_stage36 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage36_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                end if;
            when ap_ST_fsm_pp0_stage37 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage37_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage37;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    SEQA_0_address0_assign_proc : process(trunc_ln66_fu_362_p1, zext_ln73_fu_392_p1, zext_ln67_fu_429_p1, ap_condition_278)
    begin
        if ((ap_const_boolean_1 = ap_condition_278)) then
            if ((trunc_ln66_fu_362_p1 = ap_const_lv8_5C)) then 
                SEQA_0_address0 <= zext_ln67_fu_429_p1(5 - 1 downto 0);
            elsif ((trunc_ln66_fu_362_p1 = ap_const_lv8_3C)) then 
                SEQA_0_address0 <= zext_ln73_fu_392_p1(5 - 1 downto 0);
            else 
                SEQA_0_address0 <= "XXXXX";
            end if;
        else 
            SEQA_0_address0 <= "XXXXX";
        end if; 
    end process;


    SEQA_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln64_reg_654, ap_block_pp0_stage0_11001, trunc_ln66_fu_362_p1)
    begin
        if ((((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_5C)) or ((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_3C)))) then 
            SEQA_0_ce0 <= ap_const_logic_1;
        else 
            SEQA_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SEQA_1_address0_assign_proc : process(trunc_ln66_fu_362_p1, zext_ln73_fu_392_p1, zext_ln67_fu_429_p1, ap_condition_278)
    begin
        if ((ap_const_boolean_1 = ap_condition_278)) then
            if ((trunc_ln66_fu_362_p1 = ap_const_lv8_5C)) then 
                SEQA_1_address0 <= zext_ln67_fu_429_p1(5 - 1 downto 0);
            elsif ((trunc_ln66_fu_362_p1 = ap_const_lv8_3C)) then 
                SEQA_1_address0 <= zext_ln73_fu_392_p1(5 - 1 downto 0);
            else 
                SEQA_1_address0 <= "XXXXX";
            end if;
        else 
            SEQA_1_address0 <= "XXXXX";
        end if; 
    end process;


    SEQA_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln64_reg_654, ap_block_pp0_stage0_11001, trunc_ln66_fu_362_p1)
    begin
        if ((((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_5C)) or ((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_3C)))) then 
            SEQA_1_ce0 <= ap_const_logic_1;
        else 
            SEQA_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SEQB_address0_assign_proc : process(trunc_ln66_fu_362_p1, zext_ln68_fu_444_p1, zext_ln79_fu_468_p1, ap_condition_278)
    begin
        if ((ap_const_boolean_1 = ap_condition_278)) then
            if ((not((trunc_ln66_fu_362_p1 = ap_const_lv8_5C)) and not((trunc_ln66_fu_362_p1 = ap_const_lv8_3C)))) then 
                SEQB_address0 <= zext_ln79_fu_468_p1(6 - 1 downto 0);
            elsif ((trunc_ln66_fu_362_p1 = ap_const_lv8_5C)) then 
                SEQB_address0 <= zext_ln68_fu_444_p1(6 - 1 downto 0);
            else 
                SEQB_address0 <= "XXXXXX";
            end if;
        else 
            SEQB_address0 <= "XXXXXX";
        end if; 
    end process;


    SEQB_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln64_reg_654, ap_block_pp0_stage0_11001, trunc_ln66_fu_362_p1)
    begin
        if (((not((trunc_ln66_fu_362_p1 = ap_const_lv8_5C)) and not((trunc_ln66_fu_362_p1 = ap_const_lv8_3C)) and (or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_5C)))) then 
            SEQB_ce0 <= ap_const_logic_1;
        else 
            SEQB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln66_fu_296_p2 <= std_logic_vector(unsigned(r_reg_658) + unsigned(a_idx_1_reg_644));
    add_ln67_1_fu_409_p2 <= std_logic_vector(unsigned(trunc_ln67_1_fu_406_p1) + unsigned(ap_const_lv5_1F));
    add_ln67_2_fu_415_p2 <= std_logic_vector(unsigned(trunc_ln67_fu_403_p1) + unsigned(ap_const_lv6_3F));
    add_ln68_2_fu_438_p2 <= std_logic_vector(unsigned(trunc_ln68_fu_435_p1) + unsigned(ap_const_lv6_3F));
    add_ln68_fu_339_p2 <= std_logic_vector(unsigned(a_str_idx_fu_92) + unsigned(ap_const_lv64_1));
    add_ln73_1_fu_372_p2 <= std_logic_vector(unsigned(trunc_ln73_1_fu_369_p1) + unsigned(ap_const_lv5_1F));
    add_ln73_2_fu_378_p2 <= std_logic_vector(unsigned(trunc_ln73_fu_366_p1) + unsigned(ap_const_lv6_3F));
    add_ln79_1_fu_462_p2 <= std_logic_vector(unsigned(trunc_ln79_fu_459_p1) + unsigned(ap_const_lv6_3F));

    alignedA_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln66_reg_678, ap_CS_fsm_pp0_stage2, alignedA_addr_reg_682, ap_block_pp0_stage0, a_str_idx_fu_92, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln66_reg_678 = ap_const_lv8_5C)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln66_reg_678 = ap_const_lv8_3C)))) then 
            alignedA_address0 <= alignedA_addr_reg_682;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            alignedA_address0 <= a_str_idx_fu_92(8 - 1 downto 0);
        else 
            alignedA_address0 <= "XXXXXXXX";
        end if; 
    end process;


    alignedA_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln66_reg_678, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln66_reg_678 = ap_const_lv8_5C)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln66_reg_678 = ap_const_lv8_3C)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            alignedA_ce0 <= ap_const_logic_1;
        else 
            alignedA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alignedA_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_8_fu_560_p4, tmp_s_fu_583_p4, ap_condition_814, ap_condition_817)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_817)) then 
                alignedA_d0 <= tmp_s_fu_583_p4;
            elsif ((ap_const_boolean_1 = ap_condition_814)) then 
                alignedA_d0 <= tmp_8_fu_560_p4;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                alignedA_d0 <= ap_const_lv8_2D;
            else 
                alignedA_d0 <= "XXXXXXXX";
            end if;
        else 
            alignedA_d0 <= "XXXXXXXX";
        end if; 
    end process;


    alignedA_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln64_reg_654, ap_block_pp0_stage0_11001, trunc_ln66_fu_362_p1, trunc_ln66_reg_678, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((not((trunc_ln66_fu_362_p1 = ap_const_lv8_5C)) and not((trunc_ln66_fu_362_p1 = ap_const_lv8_3C)) and (or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln66_reg_678 = ap_const_lv8_5C)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln66_reg_678 = ap_const_lv8_3C)))) then 
            alignedA_we0 <= ap_const_logic_1;
        else 
            alignedA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    alignedB_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, alignedB_addr_reg_687, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, a_str_idx_fu_92, ap_block_pp0_stage1, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            alignedB_address0 <= alignedB_addr_reg_687;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            alignedB_address0 <= a_str_idx_fu_92(8 - 1 downto 0);
        else 
            alignedB_address0 <= "XXXXXXXX";
        end if; 
    end process;


    alignedB_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            alignedB_ce0 <= ap_const_logic_1;
        else 
            alignedB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alignedB_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, trunc_ln79_1_fu_542_p1, trunc_ln68_1_fu_609_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                alignedB_d0 <= trunc_ln68_1_fu_609_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                alignedB_d0 <= trunc_ln79_1_fu_542_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                alignedB_d0 <= ap_const_lv8_2D;
            else 
                alignedB_d0 <= "XXXXXXXX";
            end if;
        else 
            alignedB_d0 <= "XXXXXXXX";
        end if; 
    end process;


    alignedB_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln64_reg_654, ap_block_pp0_stage0_11001, trunc_ln66_fu_362_p1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln66_reg_678, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (trunc_ln66_reg_678 = ap_const_lv8_5C)) or (not((trunc_ln66_reg_678 = ap_const_lv8_5C)) and not((trunc_ln66_reg_678 = ap_const_lv8_3C)) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln66_fu_362_p1 = ap_const_lv8_3C)))) then 
            alignedB_we0 <= ap_const_logic_1;
        else 
            alignedB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage37 <= ap_CS_fsm(37);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage34_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage35_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage37_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage37_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage24_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage25_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage26_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage27_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage28_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage29_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage30_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage31_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage32_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage33_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage34_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage35_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage36_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage37_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_278_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln64_reg_654, ap_block_pp0_stage0)
    begin
                ap_condition_278 <= ((or_ln64_reg_654 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_814_assign_proc : process(trunc_ln66_reg_678, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
                ap_condition_814 <= ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln66_reg_678 = ap_const_lv8_3C));
    end process;


    ap_condition_817_assign_proc : process(trunc_ln66_reg_678, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
                ap_condition_817 <= ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln66_reg_678 = ap_const_lv8_5C));
    end process;


    ap_condition_exit_pp0_iter0_stage37_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage37, ap_block_pp0_stage37_subdone, or_ln64_reg_654)
    begin
        if (((or_ln64_reg_654 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage37_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage37))) then 
            ap_condition_exit_pp0_iter0_stage37 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln64_reg_654, ap_block_pp0_stage0_subdone)
    begin
        if (((or_ln64_reg_654 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage37;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage37, ap_block_pp0_stage37_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage37_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage37))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    b_str_idx_out <= a_str_idx_fu_92(32 - 1 downto 0);

    b_str_idx_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, or_ln64_reg_654, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln64_reg_654 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_str_idx_out_ap_vld <= ap_const_logic_1;
        else 
            b_str_idx_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_215_p2 <= std_logic_vector(unsigned(a_idx_1_reg_644) + unsigned(ap_const_lv32_FFFFFFFF));
    grp_fu_230_p2 <= std_logic_vector(signed(b_idx_1_reg_637) + signed(ap_const_lv32_FFFFFFFF));
    grp_fu_318_p1 <= ap_const_lv32_2081(15 - 1 downto 0);
    icmp_ln64_1_fu_278_p0 <= b_idx_fu_96;
    icmp_ln64_1_fu_278_p2 <= "1" when (signed(icmp_ln64_1_fu_278_p0) > signed(ap_const_lv32_0)) else "0";
    icmp_ln64_fu_272_p2 <= "1" when (signed(a_idx_fu_100) > signed(ap_const_lv32_0)) else "0";
    lshr_ln66_fu_356_p2 <= std_logic_vector(shift_right(unsigned(ptr_q0),to_integer(unsigned('0' & zext_ln66_2_fu_352_p1(16-1 downto 0)))));
    lshr_ln67_1_fu_573_p2 <= std_logic_vector(shift_right(unsigned(reg_247),to_integer(unsigned('0' & zext_ln67_2_fu_570_p1(16-1 downto 0)))));
    lshr_ln67_fu_515_p2 <= std_logic_vector(shift_right(unsigned(SEQA_0_q0),to_integer(unsigned('0' & zext_ln67_1_fu_511_p1(16-1 downto 0)))));
    lshr_ln68_fu_604_p2 <= std_logic_vector(shift_right(unsigned(SEQB_load_1_reg_762),to_integer(unsigned('0' & zext_ln68_1_fu_600_p1(16-1 downto 0)))));
    lshr_ln73_1_fu_550_p2 <= std_logic_vector(shift_right(unsigned(reg_247),to_integer(unsigned('0' & zext_ln73_2_fu_547_p1(16-1 downto 0)))));
    lshr_ln73_fu_494_p2 <= std_logic_vector(shift_right(unsigned(SEQA_0_q0),to_integer(unsigned('0' & zext_ln73_1_fu_490_p1(16-1 downto 0)))));
    lshr_ln79_fu_536_p2 <= std_logic_vector(shift_right(unsigned(SEQB_q0),to_integer(unsigned('0' & zext_ln79_1_fu_532_p1(16-1 downto 0)))));
    mul_ln66_fu_304_p0 <= mul_ln66_fu_304_p00(32 - 1 downto 0);
    mul_ln66_fu_304_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_fu_296_p2),65));
    mul_ln66_fu_304_p1 <= ap_const_lv65_1F80FFF82(34 - 1 downto 0);
    or_ln64_fu_284_p2 <= (icmp_ln64_fu_272_p2 or icmp_ln64_1_fu_278_p2);
    ptr_address0 <= zext_ln66_1_fu_324_p1(14 - 1 downto 0);

    ptr_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage37, ap_block_pp0_stage37_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage37_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage37))) then 
            ptr_ce0 <= ap_const_logic_1;
        else 
            ptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_290_p1 <= ap_const_lv32_81(9 - 1 downto 0);
    shl_ln7_fu_504_p3 <= (tmp_4_reg_707 & ap_const_lv3_0);
    shl_ln9_fu_483_p3 <= (tmp_7_reg_692 & ap_const_lv3_0);
    tmp_1_fu_345_p3 <= (tmp_reg_668 & ap_const_lv3_0);
    tmp_3_fu_525_p3 <= (tmp_2_reg_732 & ap_const_lv3_0);
    tmp_6_fu_593_p3 <= (tmp_5_reg_722 & ap_const_lv3_0);
    tmp_8_fu_560_p2 <= lshr_ln73_1_fu_550_p2(8 - 1 downto 0);
    tmp_s_fu_583_p2 <= lshr_ln67_1_fu_573_p2(8 - 1 downto 0);
    trunc_ln66_fu_362_p1 <= lshr_ln66_fu_356_p2(8 - 1 downto 0);
    trunc_ln67_1_fu_406_p1 <= a_idx_1_reg_644(5 - 1 downto 0);
    trunc_ln67_2_fu_521_p1 <= lshr_ln67_fu_515_p2(8 - 1 downto 0);
    trunc_ln67_fu_403_p1 <= a_idx_1_reg_644(6 - 1 downto 0);
    trunc_ln68_1_fu_609_p1 <= lshr_ln68_fu_604_p2(8 - 1 downto 0);
    trunc_ln68_fu_435_p1 <= b_idx_1_reg_637(6 - 1 downto 0);
    trunc_ln73_1_fu_369_p1 <= a_idx_1_reg_644(5 - 1 downto 0);
    trunc_ln73_2_fu_500_p1 <= lshr_ln73_fu_494_p2(8 - 1 downto 0);
    trunc_ln73_fu_366_p1 <= a_idx_1_reg_644(6 - 1 downto 0);
    trunc_ln79_1_fu_542_p1 <= lshr_ln79_fu_536_p2(8 - 1 downto 0);
    trunc_ln79_fu_459_p1 <= b_idx_1_reg_637(6 - 1 downto 0);
    zext_ln66_1_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_318_p2),64));
    zext_ln66_2_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_345_p3),16));
    zext_ln67_1_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln7_fu_504_p3),16));
    zext_ln67_2_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln7_reg_752),16));
    zext_ln67_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_1_fu_409_p2),64));
    zext_ln68_1_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_593_p3),16));
    zext_ln68_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_2_fu_438_p2),64));
    zext_ln73_1_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln9_fu_483_p3),16));
    zext_ln73_2_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln9_reg_742),16));
    zext_ln73_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_1_fu_372_p2),64));
    zext_ln79_1_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_525_p3),16));
    zext_ln79_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_1_fu_462_p2),64));
end behav;
