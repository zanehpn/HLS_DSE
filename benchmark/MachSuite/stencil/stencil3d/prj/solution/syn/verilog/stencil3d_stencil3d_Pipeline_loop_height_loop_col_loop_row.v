// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stencil3d_stencil3d_Pipeline_loop_height_loop_col_loop_row (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sol_0_address0,
        sol_0_ce0,
        sol_0_we0,
        sol_0_d0,
        sol_0_q0,
        orig_0_address0,
        orig_0_ce0,
        orig_0_q0,
        orig_0_address1,
        orig_0_ce1,
        orig_0_q1,
        orig_1_address0,
        orig_1_ce0,
        orig_1_q0,
        orig_1_address1,
        orig_1_ce1,
        orig_1_q1,
        C_load,
        C_load_1,
        sol_1_address0,
        sol_1_ce0,
        sol_1_we0,
        sol_1_d0,
        sol_1_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] sol_0_address0;
output   sol_0_ce0;
output   sol_0_we0;
output  [63:0] sol_0_d0;
input  [63:0] sol_0_q0;
output  [11:0] orig_0_address0;
output   orig_0_ce0;
input  [63:0] orig_0_q0;
output  [11:0] orig_0_address1;
output   orig_0_ce1;
input  [63:0] orig_0_q1;
output  [11:0] orig_1_address0;
output   orig_1_ce0;
input  [63:0] orig_1_q0;
output  [11:0] orig_1_address1;
output   orig_1_ce1;
input  [63:0] orig_1_q1;
input  [31:0] C_load;
input  [31:0] C_load_1;
output  [11:0] sol_1_address0;
output   sol_1_ce0;
output   sol_1_we0;
output  [63:0] sol_1_d0;
input  [63:0] sol_1_q0;

reg ap_idle;
reg[11:0] sol_0_address0;
reg sol_0_ce0;
reg sol_0_we0;
reg[11:0] orig_0_address0;
reg orig_0_ce0;
reg[11:0] orig_0_address1;
reg orig_0_ce1;
reg[11:0] orig_1_address0;
reg orig_1_ce0;
reg[11:0] orig_1_address1;
reg orig_1_ce1;
reg[11:0] sol_1_address0;
reg sol_1_ce0;
reg sol_1_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln36_reg_1155;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln36_fu_339_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln37_fu_360_p2;
reg   [0:0] icmp_ln37_reg_1159;
wire   [3:0] select_ln8_fu_418_p3;
reg   [3:0] select_ln8_reg_1164;
wire   [4:0] select_ln37_fu_426_p3;
reg   [4:0] select_ln37_reg_1173;
wire   [9:0] tmp_s_fu_434_p3;
reg   [9:0] tmp_s_reg_1182;
reg   [0:0] tmp_reg_1187;
reg   [0:0] tmp_2_reg_1192;
reg   [0:0] tmp_2_reg_1192_pp0_iter1_reg;
reg   [0:0] tmp_3_reg_1200;
reg   [0:0] tmp_4_reg_1205;
reg   [0:0] tmp_5_reg_1210;
reg   [0:0] tmp_6_reg_1215;
wire   [2:0] trunc_ln39_fu_518_p1;
reg   [2:0] trunc_ln39_reg_1220;
reg   [1:0] tmp_7_reg_1248;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] tmp_8_reg_1253;
wire   [31:0] tmp_9_fu_656_p4;
reg   [31:0] tmp_9_reg_1258;
wire   [31:0] tmp_10_fu_693_p4;
reg   [31:0] tmp_10_reg_1263;
wire   [5:0] and_ln4_fu_733_p3;
reg   [5:0] and_ln4_reg_1288;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] add_ln40_fu_747_p2;
reg   [31:0] add_ln40_reg_1300;
wire   [31:0] tmp_11_fu_779_p4;
reg   [31:0] tmp_11_reg_1305;
wire   [31:0] tmp_12_fu_816_p4;
reg   [31:0] tmp_12_reg_1310;
wire   [31:0] add_ln42_fu_887_p2;
reg   [31:0] add_ln42_reg_1345;
wire   [31:0] tmp_13_fu_918_p4;
reg   [31:0] tmp_13_reg_1350;
wire   [31:0] tmp_14_fu_953_p4;
reg   [31:0] tmp_14_reg_1355;
reg   [11:0] sol_0_addr_reg_1360;
reg   [11:0] sol_1_addr_reg_1365;
wire  signed [31:0] sum0_fu_1006_p4;
reg  signed [31:0] sum0_reg_1370;
wire  signed [31:0] sum1_fu_1019_p2;
reg  signed [31:0] sum1_reg_1375;
reg   [63:0] sol_0_load_reg_1380;
reg   [63:0] sol_1_load_reg_1385;
wire   [31:0] add_ln48_fu_1032_p2;
reg   [31:0] add_ln48_reg_1390;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln40_fu_534_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln41_fu_552_p1;
wire   [63:0] zext_ln42_fu_713_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln43_fu_727_p1;
wire   [63:0] zext_ln44_fu_838_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln45_fu_857_p1;
wire   [63:0] zext_ln39_fu_875_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] k_fu_120;
wire   [3:0] add_ln44_fu_825_p2;
wire    ap_loop_init;
reg   [4:0] j_fu_124;
reg   [8:0] indvar_flatten13_fu_128;
wire   [8:0] select_ln37_1_fu_968_p3;
reg   [4:0] i_fu_132;
wire   [4:0] select_ln36_fu_398_p3;
reg   [13:0] indvar_flatten29_fu_136;
wire   [13:0] add_ln36_fu_345_p2;
wire   [0:0] icmp_ln38_fu_380_p2;
wire   [0:0] xor_ln7_fu_374_p2;
wire   [4:0] indvars_iv_next3339_fu_392_p2;
wire   [4:0] select_ln7_fu_366_p3;
wire   [0:0] and_ln7_fu_386_p2;
wire   [0:0] or_ln8_fu_412_p2;
wire   [4:0] indvars_iv_next19_dup_fu_406_p2;
wire  signed [5:0] tmp2_cast_cast_fu_458_p3;
wire   [9:0] tmp2_cast_cast_cast_fu_466_p1;
wire  signed [9:0] tmp3_cast_fu_476_p1;
wire   [9:0] empty_20_fu_470_p2;
wire   [9:0] empty_21_fu_480_p2;
wire   [7:0] trunc_ln40_fu_522_p1;
wire   [11:0] add_ln40_cast_fu_526_p3;
wire   [7:0] trunc_ln41_fu_540_p1;
wire   [11:0] add_ln41_cast_fu_544_p3;
wire   [9:0] tmp47_fu_573_p2;
wire   [10:0] tmp47_cast_fu_578_p1;
wire   [10:0] j_2_cast18_fu_582_p1;
wire   [10:0] empty_22_fu_585_p2;
wire   [5:0] and_ln5_fu_596_p3;
wire   [63:0] zext_ln40_1_fu_628_p1;
wire   [63:0] lshr_ln40_fu_632_p2;
wire   [63:0] zext_ln40_2_fu_642_p1;
wire   [63:0] lshr_ln40_1_fu_646_p2;
wire   [31:0] tmp_9_fu_656_p1;
wire   [31:0] tmp_9_fu_656_p2;
wire   [5:0] and_ln6_fu_603_p3;
wire   [63:0] zext_ln41_1_fu_665_p1;
wire   [63:0] lshr_ln41_fu_669_p2;
wire   [63:0] zext_ln41_2_fu_679_p1;
wire   [63:0] lshr_ln41_1_fu_683_p2;
wire   [31:0] tmp_10_fu_693_p1;
wire   [31:0] tmp_10_fu_693_p2;
wire   [7:0] trunc_ln42_fu_702_p1;
wire   [11:0] add_ln42_cast_fu_706_p3;
wire   [4:0] tmp5_fu_591_p2;
wire   [11:0] add_ln43_cast_fu_719_p4;
wire   [5:0] and_ln8_fu_740_p3;
wire   [63:0] zext_ln42_1_fu_751_p1;
wire   [63:0] lshr_ln42_fu_755_p2;
wire   [63:0] zext_ln42_2_fu_765_p1;
wire   [63:0] lshr_ln42_1_fu_769_p2;
wire   [31:0] tmp_11_fu_779_p1;
wire   [31:0] tmp_11_fu_779_p2;
wire   [63:0] zext_ln43_1_fu_788_p1;
wire   [63:0] lshr_ln43_fu_792_p2;
wire   [63:0] zext_ln43_2_fu_802_p1;
wire   [63:0] lshr_ln43_1_fu_806_p2;
wire   [31:0] tmp_12_fu_816_p1;
wire   [31:0] tmp_12_fu_816_p2;
wire   [11:0] add_ln44_1_cast_fu_830_p4;
wire   [3:0] add_ln45_fu_844_p2;
wire   [11:0] add_ln45_1_cast_fu_849_p4;
wire   [11:0] add_ln39_cast_fu_868_p4;
wire   [31:0] add_ln41_fu_883_p2;
wire   [63:0] zext_ln44_1_fu_892_p1;
wire   [63:0] lshr_ln44_fu_895_p2;
wire   [63:0] zext_ln44_2_fu_905_p1;
wire   [63:0] lshr_ln44_1_fu_908_p2;
wire   [31:0] tmp_13_fu_918_p1;
wire   [31:0] tmp_13_fu_918_p2;
wire   [63:0] zext_ln45_1_fu_927_p1;
wire   [63:0] lshr_ln45_fu_930_p2;
wire   [63:0] zext_ln45_2_fu_940_p1;
wire   [63:0] lshr_ln45_1_fu_943_p2;
wire   [31:0] tmp_14_fu_953_p1;
wire   [31:0] tmp_14_fu_953_p2;
wire   [8:0] add_ln37_fu_962_p2;
wire   [63:0] zext_ln39_1_fu_980_p1;
wire   [63:0] lshr_ln39_fu_983_p2;
wire   [63:0] zext_ln39_2_fu_993_p1;
wire   [63:0] lshr_ln39_1_fu_996_p2;
wire   [31:0] sum0_fu_1006_p1;
wire   [31:0] sum0_fu_1006_p2;
wire   [31:0] add_ln43_fu_1015_p2;
wire   [31:0] mul1_fu_1028_p2;
wire   [31:0] mul0_fu_1024_p2;
wire   [63:0] zext_ln48_2_fu_1038_p1;
wire   [63:0] shl_ln48_2_fu_1041_p2;
wire   [63:0] xor_ln48_1_fu_1047_p2;
wire   [63:0] zext_ln48_3_fu_1058_p1;
wire   [63:0] and_ln48_1_fu_1053_p2;
wire   [63:0] shl_ln48_3_fu_1061_p2;
wire   [63:0] zext_ln48_fu_1074_p1;
wire   [63:0] shl_ln48_fu_1077_p2;
wire   [63:0] xor_ln48_fu_1083_p2;
wire   [63:0] zext_ln48_1_fu_1094_p1;
wire   [63:0] and_ln48_fu_1089_p2;
wire   [63:0] shl_ln48_1_fu_1097_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

stencil3d_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U21(
    .din0(tmp_9_fu_656_p1),
    .din1(tmp_9_fu_656_p2),
    .din2(tmp_3_reg_1200),
    .dout(tmp_9_fu_656_p4)
);

stencil3d_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U22(
    .din0(tmp_10_fu_693_p1),
    .din1(tmp_10_fu_693_p2),
    .din2(tmp_5_reg_1210),
    .dout(tmp_10_fu_693_p4)
);

stencil3d_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_32ns_32ns_32_1_1_U23(
    .din0(tmp_10_reg_1263),
    .din1(tmp_9_reg_1258),
    .dout(add_ln40_fu_747_p2)
);

stencil3d_mux_22_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_22_32_1_1_U24(
    .din0(tmp_11_fu_779_p1),
    .din1(tmp_11_fu_779_p2),
    .din2(tmp_7_reg_1248),
    .dout(tmp_11_fu_779_p4)
);

stencil3d_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U25(
    .din0(tmp_12_fu_816_p1),
    .din1(tmp_12_fu_816_p2),
    .din2(tmp_2_reg_1192),
    .dout(tmp_12_fu_816_p4)
);

stencil3d_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_32ns_32ns_32_1_1_U26(
    .din0(tmp_11_reg_1305),
    .din1(add_ln40_reg_1300),
    .dout(add_ln41_fu_883_p2)
);

stencil3d_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_32ns_32ns_32_1_1_U27(
    .din0(tmp_12_reg_1310),
    .din1(add_ln41_fu_883_p2),
    .dout(add_ln42_fu_887_p2)
);

stencil3d_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U28(
    .din0(tmp_13_fu_918_p1),
    .din1(tmp_13_fu_918_p2),
    .din2(tmp_2_reg_1192),
    .dout(tmp_13_fu_918_p4)
);

stencil3d_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U29(
    .din0(tmp_14_fu_953_p1),
    .din1(tmp_14_fu_953_p2),
    .din2(tmp_2_reg_1192),
    .dout(tmp_14_fu_953_p4)
);

stencil3d_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U30(
    .din0(sum0_fu_1006_p1),
    .din1(sum0_fu_1006_p2),
    .din2(tmp_2_reg_1192),
    .dout(sum0_fu_1006_p4)
);

stencil3d_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_32ns_32ns_32_1_1_U31(
    .din0(tmp_13_reg_1350),
    .din1(add_ln42_reg_1345),
    .dout(add_ln43_fu_1015_p2)
);

stencil3d_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_32ns_32ns_32_1_1_U32(
    .din0(tmp_14_reg_1355),
    .din1(add_ln43_fu_1015_p2),
    .dout(sum1_fu_1019_p2)
);

stencil3d_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U33(
    .din0(C_load),
    .din1(sum0_reg_1370),
    .dout(mul0_fu_1024_p2)
);

stencil3d_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U34(
    .din0(C_load_1),
    .din1(sum1_reg_1375),
    .dout(mul1_fu_1028_p2)
);

stencil3d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_132 <= 5'd1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln36_fu_339_p2 == 1'd0))) begin
        i_fu_132 <= select_ln36_fu_398_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_128 <= 9'd0;
        end else if (((icmp_ln36_reg_1155 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten13_fu_128 <= select_ln37_1_fu_968_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten29_fu_136 <= 14'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln36_fu_339_p2 == 1'd0))) begin
        indvar_flatten29_fu_136 <= add_ln36_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_fu_124 <= 5'd1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln36_fu_339_p2 == 1'd0))) begin
        j_fu_124 <= select_ln37_fu_426_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_fu_120 <= 4'd1;
    end else if (((icmp_ln36_reg_1155 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        k_fu_120 <= add_ln44_fu_825_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_reg_1155 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln40_reg_1300 <= add_ln40_fu_747_p2;
        and_ln4_reg_1288[5] <= and_ln4_fu_733_p3[5];
        tmp_11_reg_1305 <= tmp_11_fu_779_p4;
        tmp_12_reg_1310 <= tmp_12_fu_816_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_reg_1155 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln42_reg_1345 <= add_ln42_fu_887_p2;
        tmp_13_reg_1350 <= tmp_13_fu_918_p4;
        tmp_14_reg_1355 <= tmp_14_fu_953_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln48_reg_1390 <= add_ln48_fu_1032_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln36_reg_1155 <= icmp_ln36_fu_339_p2;
        sum0_reg_1370 <= sum0_fu_1006_p4;
        sum1_reg_1375 <= sum1_fu_1019_p2;
        tmp_2_reg_1192_pp0_iter1_reg <= tmp_2_reg_1192;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln36_fu_339_p2 == 1'd0))) begin
        icmp_ln37_reg_1159 <= icmp_ln37_fu_360_p2;
        select_ln37_reg_1173 <= select_ln37_fu_426_p3;
        select_ln8_reg_1164 <= select_ln8_fu_418_p3;
        tmp_2_reg_1192 <= select_ln36_fu_398_p3[32'd4];
        tmp_3_reg_1200 <= empty_20_fu_470_p2[32'd9];
        tmp_4_reg_1205 <= empty_20_fu_470_p2[32'd8];
        tmp_5_reg_1210 <= empty_21_fu_480_p2[32'd9];
        tmp_6_reg_1215 <= empty_21_fu_480_p2[32'd8];
        tmp_reg_1187 <= select_ln36_fu_398_p3[32'd3];
        tmp_s_reg_1182[9 : 5] <= tmp_s_fu_434_p3[9 : 5];
        trunc_ln39_reg_1220 <= trunc_ln39_fu_518_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_reg_1155 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_1192 == 1'd0))) begin
        sol_0_addr_reg_1360 <= zext_ln39_fu_875_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_2_reg_1192 == 1'd0))) begin
        sol_0_load_reg_1380 <= sol_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_reg_1155 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_1192 == 1'd1))) begin
        sol_1_addr_reg_1365 <= zext_ln39_fu_875_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_2_reg_1192 == 1'd1))) begin
        sol_1_load_reg_1385 <= sol_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_reg_1155 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_10_reg_1263 <= tmp_10_fu_693_p4;
        tmp_7_reg_1248 <= {{empty_22_fu_585_p2[10:9]}};
        tmp_8_reg_1253 <= empty_22_fu_585_p2[32'd8];
        tmp_9_reg_1258 <= tmp_9_fu_656_p4;
    end
end

always @ (*) begin
    if (((icmp_ln36_reg_1155 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_0_address0 = zext_ln39_fu_875_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        orig_0_address0 = zext_ln44_fu_838_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        orig_0_address0 = zext_ln42_fu_713_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        orig_0_address0 = zext_ln41_fu_552_p1;
    end else begin
        orig_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            orig_0_address1 = zext_ln45_fu_857_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            orig_0_address1 = zext_ln43_fu_727_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            orig_0_address1 = zext_ln40_fu_534_p1;
        end else begin
            orig_0_address1 = 'bx;
        end
    end else begin
        orig_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        orig_0_ce0 = 1'b1;
    end else begin
        orig_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        orig_0_ce1 = 1'b1;
    end else begin
        orig_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_1_address0 = zext_ln39_fu_875_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        orig_1_address0 = zext_ln44_fu_838_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        orig_1_address0 = zext_ln42_fu_713_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        orig_1_address0 = zext_ln41_fu_552_p1;
    end else begin
        orig_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            orig_1_address1 = zext_ln45_fu_857_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            orig_1_address1 = zext_ln43_fu_727_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            orig_1_address1 = zext_ln40_fu_534_p1;
        end else begin
            orig_1_address1 = 'bx;
        end
    end else begin
        orig_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        orig_1_ce0 = 1'b1;
    end else begin
        orig_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        orig_1_ce1 = 1'b1;
    end else begin
        orig_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            sol_0_address0 = sol_0_addr_reg_1360;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sol_0_address0 = zext_ln39_fu_875_p1;
        end else begin
            sol_0_address0 = 'bx;
        end
    end else begin
        sol_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        sol_0_ce0 = 1'b1;
    end else begin
        sol_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_2_reg_1192_pp0_iter1_reg == 1'd0))) begin
        sol_0_we0 = 1'b1;
    end else begin
        sol_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            sol_1_address0 = sol_1_addr_reg_1365;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sol_1_address0 = zext_ln39_fu_875_p1;
        end else begin
            sol_1_address0 = 'bx;
        end
    end else begin
        sol_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        sol_1_ce0 = 1'b1;
    end else begin
        sol_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_2_reg_1192_pp0_iter1_reg == 1'd1))) begin
        sol_1_we0 = 1'b1;
    end else begin
        sol_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln36_fu_345_p2 = (indvar_flatten29_fu_136 + 14'd1);

assign add_ln37_fu_962_p2 = (indvar_flatten13_fu_128 + 9'd1);

assign add_ln39_cast_fu_868_p4 = {{{trunc_ln39_reg_1220}, {select_ln37_reg_1173}}, {select_ln8_reg_1164}};

assign add_ln40_cast_fu_526_p3 = {{trunc_ln40_fu_522_p1}, {select_ln8_fu_418_p3}};

assign add_ln41_cast_fu_544_p3 = {{trunc_ln41_fu_540_p1}, {select_ln8_fu_418_p3}};

assign add_ln42_cast_fu_706_p3 = {{trunc_ln42_fu_702_p1}, {select_ln8_reg_1164}};

assign add_ln43_cast_fu_719_p4 = {{{trunc_ln39_reg_1220}, {tmp5_fu_591_p2}}, {select_ln8_reg_1164}};

assign add_ln44_1_cast_fu_830_p4 = {{{trunc_ln39_reg_1220}, {select_ln37_reg_1173}}, {add_ln44_fu_825_p2}};

assign add_ln44_fu_825_p2 = (select_ln8_reg_1164 + 4'd1);

assign add_ln45_1_cast_fu_849_p4 = {{{trunc_ln39_reg_1220}, {select_ln37_reg_1173}}, {add_ln45_fu_844_p2}};

assign add_ln45_fu_844_p2 = ($signed(select_ln8_reg_1164) + $signed(4'd15));

assign add_ln48_fu_1032_p2 = (mul1_fu_1028_p2 + mul0_fu_1024_p2);

assign and_ln48_1_fu_1053_p2 = (xor_ln48_1_fu_1047_p2 & sol_0_load_reg_1380);

assign and_ln48_fu_1089_p2 = (xor_ln48_fu_1083_p2 & sol_1_load_reg_1385);

assign and_ln4_fu_733_p3 = {{tmp_reg_1187}, {5'd0}};

assign and_ln5_fu_596_p3 = {{tmp_4_reg_1205}, {5'd0}};

assign and_ln6_fu_603_p3 = {{tmp_6_reg_1215}, {5'd0}};

assign and_ln7_fu_386_p2 = (xor_ln7_fu_374_p2 & icmp_ln38_fu_380_p2);

assign and_ln8_fu_740_p3 = {{tmp_8_reg_1253}, {5'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign empty_20_fu_470_p2 = (tmp2_cast_cast_cast_fu_466_p1 + tmp_s_fu_434_p3);

assign empty_21_fu_480_p2 = ($signed(tmp3_cast_fu_476_p1) + $signed(tmp_s_fu_434_p3));

assign empty_22_fu_585_p2 = (tmp47_cast_fu_578_p1 + j_2_cast18_fu_582_p1);

assign icmp_ln36_fu_339_p2 = ((indvar_flatten29_fu_136 == 14'd12600) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_360_p2 = ((indvar_flatten13_fu_128 == 9'd420) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_380_p2 = ((k_fu_120 == 4'd15) ? 1'b1 : 1'b0);

assign indvars_iv_next19_dup_fu_406_p2 = (select_ln7_fu_366_p3 + 5'd1);

assign indvars_iv_next3339_fu_392_p2 = (i_fu_132 + 5'd1);

assign j_2_cast18_fu_582_p1 = select_ln37_reg_1173;

assign lshr_ln39_1_fu_996_p2 = orig_1_q0 >> zext_ln39_2_fu_993_p1;

assign lshr_ln39_fu_983_p2 = orig_0_q0 >> zext_ln39_1_fu_980_p1;

assign lshr_ln40_1_fu_646_p2 = orig_1_q1 >> zext_ln40_2_fu_642_p1;

assign lshr_ln40_fu_632_p2 = orig_0_q1 >> zext_ln40_1_fu_628_p1;

assign lshr_ln41_1_fu_683_p2 = orig_1_q0 >> zext_ln41_2_fu_679_p1;

assign lshr_ln41_fu_669_p2 = orig_0_q0 >> zext_ln41_1_fu_665_p1;

assign lshr_ln42_1_fu_769_p2 = orig_1_q0 >> zext_ln42_2_fu_765_p1;

assign lshr_ln42_fu_755_p2 = orig_0_q0 >> zext_ln42_1_fu_751_p1;

assign lshr_ln43_1_fu_806_p2 = orig_1_q1 >> zext_ln43_2_fu_802_p1;

assign lshr_ln43_fu_792_p2 = orig_0_q1 >> zext_ln43_1_fu_788_p1;

assign lshr_ln44_1_fu_908_p2 = orig_1_q0 >> zext_ln44_2_fu_905_p1;

assign lshr_ln44_fu_895_p2 = orig_0_q0 >> zext_ln44_1_fu_892_p1;

assign lshr_ln45_1_fu_943_p2 = orig_1_q1 >> zext_ln45_2_fu_940_p1;

assign lshr_ln45_fu_930_p2 = orig_0_q1 >> zext_ln45_1_fu_927_p1;

assign or_ln8_fu_412_p2 = (icmp_ln37_fu_360_p2 | and_ln7_fu_386_p2);

assign select_ln36_fu_398_p3 = ((icmp_ln37_fu_360_p2[0:0] == 1'b1) ? indvars_iv_next3339_fu_392_p2 : i_fu_132);

assign select_ln37_1_fu_968_p3 = ((icmp_ln37_reg_1159[0:0] == 1'b1) ? 9'd1 : add_ln37_fu_962_p2);

assign select_ln37_fu_426_p3 = ((and_ln7_fu_386_p2[0:0] == 1'b1) ? indvars_iv_next19_dup_fu_406_p2 : select_ln7_fu_366_p3);

assign select_ln7_fu_366_p3 = ((icmp_ln37_fu_360_p2[0:0] == 1'b1) ? 5'd1 : j_fu_124);

assign select_ln8_fu_418_p3 = ((or_ln8_fu_412_p2[0:0] == 1'b1) ? 4'd1 : k_fu_120);

assign shl_ln48_1_fu_1097_p2 = zext_ln48_1_fu_1094_p1 << zext_ln48_fu_1074_p1;

assign shl_ln48_2_fu_1041_p2 = 64'd4294967295 << zext_ln48_2_fu_1038_p1;

assign shl_ln48_3_fu_1061_p2 = zext_ln48_3_fu_1058_p1 << zext_ln48_2_fu_1038_p1;

assign shl_ln48_fu_1077_p2 = 64'd4294967295 << zext_ln48_fu_1074_p1;

assign sol_0_d0 = (shl_ln48_3_fu_1061_p2 | and_ln48_1_fu_1053_p2);

assign sol_1_d0 = (shl_ln48_1_fu_1097_p2 | and_ln48_fu_1089_p2);

assign sum0_fu_1006_p1 = lshr_ln39_fu_983_p2[31:0];

assign sum0_fu_1006_p2 = lshr_ln39_1_fu_996_p2[31:0];

assign tmp2_cast_cast_cast_fu_466_p1 = $unsigned(tmp2_cast_cast_fu_458_p3);

assign tmp2_cast_cast_fu_458_p3 = {{1'd1}, {select_ln37_fu_426_p3}};

assign tmp3_cast_fu_476_p1 = tmp2_cast_cast_fu_458_p3;

assign tmp47_cast_fu_578_p1 = tmp47_fu_573_p2;

assign tmp47_fu_573_p2 = (tmp_s_reg_1182 | 10'd1);

assign tmp5_fu_591_p2 = ($signed(select_ln37_reg_1173) + $signed(5'd31));

assign tmp_10_fu_693_p1 = lshr_ln41_fu_669_p2[31:0];

assign tmp_10_fu_693_p2 = lshr_ln41_1_fu_683_p2[31:0];

assign tmp_11_fu_779_p1 = lshr_ln42_fu_755_p2[31:0];

assign tmp_11_fu_779_p2 = lshr_ln42_1_fu_769_p2[31:0];

assign tmp_12_fu_816_p1 = lshr_ln43_fu_792_p2[31:0];

assign tmp_12_fu_816_p2 = lshr_ln43_1_fu_806_p2[31:0];

assign tmp_13_fu_918_p1 = lshr_ln44_fu_895_p2[31:0];

assign tmp_13_fu_918_p2 = lshr_ln44_1_fu_908_p2[31:0];

assign tmp_14_fu_953_p1 = lshr_ln45_fu_930_p2[31:0];

assign tmp_14_fu_953_p2 = lshr_ln45_1_fu_943_p2[31:0];

assign tmp_9_fu_656_p1 = lshr_ln40_fu_632_p2[31:0];

assign tmp_9_fu_656_p2 = lshr_ln40_1_fu_646_p2[31:0];

assign tmp_s_fu_434_p3 = {{select_ln36_fu_398_p3}, {5'd0}};

assign trunc_ln39_fu_518_p1 = select_ln36_fu_398_p3[2:0];

assign trunc_ln40_fu_522_p1 = empty_20_fu_470_p2[7:0];

assign trunc_ln41_fu_540_p1 = empty_21_fu_480_p2[7:0];

assign trunc_ln42_fu_702_p1 = empty_22_fu_585_p2[7:0];

assign xor_ln48_1_fu_1047_p2 = (shl_ln48_2_fu_1041_p2 ^ 64'd18446744073709551615);

assign xor_ln48_fu_1083_p2 = (shl_ln48_fu_1077_p2 ^ 64'd18446744073709551615);

assign xor_ln7_fu_374_p2 = (icmp_ln37_fu_360_p2 ^ 1'd1);

assign zext_ln39_1_fu_980_p1 = and_ln4_reg_1288;

assign zext_ln39_2_fu_993_p1 = and_ln4_reg_1288;

assign zext_ln39_fu_875_p1 = add_ln39_cast_fu_868_p4;

assign zext_ln40_1_fu_628_p1 = and_ln5_fu_596_p3;

assign zext_ln40_2_fu_642_p1 = and_ln5_fu_596_p3;

assign zext_ln40_fu_534_p1 = add_ln40_cast_fu_526_p3;

assign zext_ln41_1_fu_665_p1 = and_ln6_fu_603_p3;

assign zext_ln41_2_fu_679_p1 = and_ln6_fu_603_p3;

assign zext_ln41_fu_552_p1 = add_ln41_cast_fu_544_p3;

assign zext_ln42_1_fu_751_p1 = and_ln8_fu_740_p3;

assign zext_ln42_2_fu_765_p1 = and_ln8_fu_740_p3;

assign zext_ln42_fu_713_p1 = add_ln42_cast_fu_706_p3;

assign zext_ln43_1_fu_788_p1 = and_ln4_fu_733_p3;

assign zext_ln43_2_fu_802_p1 = and_ln4_fu_733_p3;

assign zext_ln43_fu_727_p1 = add_ln43_cast_fu_719_p4;

assign zext_ln44_1_fu_892_p1 = and_ln4_reg_1288;

assign zext_ln44_2_fu_905_p1 = and_ln4_reg_1288;

assign zext_ln44_fu_838_p1 = add_ln44_1_cast_fu_830_p4;

assign zext_ln45_1_fu_927_p1 = and_ln4_reg_1288;

assign zext_ln45_2_fu_940_p1 = and_ln4_reg_1288;

assign zext_ln45_fu_857_p1 = add_ln45_1_cast_fu_849_p4;

assign zext_ln48_1_fu_1094_p1 = add_ln48_reg_1390;

assign zext_ln48_2_fu_1038_p1 = and_ln4_reg_1288;

assign zext_ln48_3_fu_1058_p1 = add_ln48_reg_1390;

assign zext_ln48_fu_1074_p1 = and_ln4_reg_1288;

always @ (posedge ap_clk) begin
    tmp_s_reg_1182[4:0] <= 5'b00000;
    and_ln4_reg_1288[4:0] <= 5'b00000;
end

endmodule //stencil3d_stencil3d_Pipeline_loop_height_loop_col_loop_row
