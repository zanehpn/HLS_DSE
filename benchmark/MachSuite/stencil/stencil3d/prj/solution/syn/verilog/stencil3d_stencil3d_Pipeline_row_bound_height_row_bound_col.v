// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stencil3d_stencil3d_Pipeline_row_bound_height_row_bound_col (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sol_0_address0,
        sol_0_ce0,
        sol_0_we0,
        sol_0_d0,
        sol_0_q0,
        sol_0_address1,
        sol_0_ce1,
        sol_0_we1,
        sol_0_d1,
        sol_0_q1,
        orig_0_address0,
        orig_0_ce0,
        orig_0_q0,
        orig_0_address1,
        orig_0_ce1,
        orig_0_q1,
        orig_1_address0,
        orig_1_ce0,
        orig_1_q0,
        orig_1_address1,
        orig_1_ce1,
        orig_1_q1,
        sol_1_address0,
        sol_1_ce0,
        sol_1_we0,
        sol_1_d0,
        sol_1_q0,
        sol_1_address1,
        sol_1_ce1,
        sol_1_we1,
        sol_1_d1,
        sol_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] sol_0_address0;
output   sol_0_ce0;
output   sol_0_we0;
output  [63:0] sol_0_d0;
input  [63:0] sol_0_q0;
output  [11:0] sol_0_address1;
output   sol_0_ce1;
output   sol_0_we1;
output  [63:0] sol_0_d1;
input  [63:0] sol_0_q1;
output  [11:0] orig_0_address0;
output   orig_0_ce0;
input  [63:0] orig_0_q0;
output  [11:0] orig_0_address1;
output   orig_0_ce1;
input  [63:0] orig_0_q1;
output  [11:0] orig_1_address0;
output   orig_1_ce0;
input  [63:0] orig_1_q0;
output  [11:0] orig_1_address1;
output   orig_1_ce1;
input  [63:0] orig_1_q1;
output  [11:0] sol_1_address0;
output   sol_1_ce0;
output   sol_1_we0;
output  [63:0] sol_1_d0;
input  [63:0] sol_1_q0;
output  [11:0] sol_1_address1;
output   sol_1_ce1;
output   sol_1_we1;
output  [63:0] sol_1_d1;
input  [63:0] sol_1_q1;

reg ap_idle;
reg sol_0_ce0;
reg sol_0_we0;
reg sol_0_ce1;
reg sol_0_we1;
reg orig_0_ce0;
reg orig_0_ce1;
reg orig_1_ce0;
reg orig_1_ce1;
reg sol_1_ce0;
reg sol_1_we0;
reg sol_1_ce1;
reg sol_1_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln27_fu_192_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln27_reg_560;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln27_fu_216_p3;
reg   [4:0] select_ln27_reg_564;
wire   [0:0] tmp_fu_238_p3;
reg   [0:0] tmp_reg_569;
reg   [0:0] tmp_1_reg_575;
reg   [11:0] sol_0_addr_reg_590;
reg   [11:0] sol_1_addr_reg_595;
reg   [11:0] sol_0_addr_1_reg_610;
reg   [11:0] sol_1_addr_1_reg_615;
wire   [5:0] and_ln2_fu_300_p3;
reg   [5:0] and_ln2_reg_620;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] tmp_s_fu_335_p4;
reg   [31:0] tmp_s_reg_628;
wire   [31:0] tmp_2_fu_372_p4;
reg   [31:0] tmp_2_reg_634;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln29_fu_268_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln30_fu_282_p1;
reg   [4:0] j_fu_66;
wire   [4:0] add_ln28_fu_381_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [4:0] i_fu_70;
wire   [4:0] select_ln27_1_fu_230_p3;
reg   [4:0] ap_sig_allocacmp_i_load;
reg   [9:0] indvar_flatten6_fu_74;
wire   [9:0] add_ln27_fu_198_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten6_load;
wire    ap_block_pp0_stage1;
wire   [0:0] icmp_ln28_fu_210_p2;
wire   [4:0] add_ln27_1_fu_224_p2;
wire   [2:0] trunc_ln29_fu_254_p1;
wire   [11:0] shl_ln_fu_258_p4;
wire   [11:0] or_ln30_fu_276_p2;
wire   [63:0] zext_ln29_1_fu_307_p1;
wire   [63:0] lshr_ln29_fu_311_p2;
wire   [63:0] zext_ln29_2_fu_321_p1;
wire   [63:0] lshr_ln29_1_fu_325_p2;
wire   [31:0] tmp_s_fu_335_p1;
wire   [31:0] tmp_s_fu_335_p2;
wire   [63:0] zext_ln30_1_fu_344_p1;
wire   [63:0] lshr_ln30_fu_348_p2;
wire   [63:0] zext_ln30_2_fu_358_p1;
wire   [63:0] lshr_ln30_1_fu_362_p2;
wire   [31:0] tmp_2_fu_372_p1;
wire   [31:0] tmp_2_fu_372_p2;
wire   [63:0] zext_ln29_5_fu_391_p1;
wire   [63:0] shl_ln29_2_fu_394_p2;
wire   [63:0] xor_ln29_1_fu_400_p2;
wire   [63:0] zext_ln29_6_fu_412_p1;
wire   [63:0] and_ln29_1_fu_406_p2;
wire   [63:0] shl_ln29_3_fu_415_p2;
wire   [63:0] zext_ln29_3_fu_428_p1;
wire   [63:0] shl_ln29_fu_431_p2;
wire   [63:0] xor_ln29_fu_437_p2;
wire   [63:0] zext_ln29_4_fu_449_p1;
wire   [63:0] and_ln29_fu_443_p2;
wire   [63:0] shl_ln29_1_fu_452_p2;
wire   [63:0] zext_ln30_5_fu_465_p1;
wire   [63:0] shl_ln30_2_fu_468_p2;
wire   [63:0] xor_ln30_1_fu_474_p2;
wire   [63:0] zext_ln30_6_fu_486_p1;
wire   [63:0] and_ln30_1_fu_480_p2;
wire   [63:0] shl_ln30_3_fu_489_p2;
wire   [63:0] zext_ln30_3_fu_502_p1;
wire   [63:0] shl_ln30_fu_505_p2;
wire   [63:0] xor_ln30_fu_511_p2;
wire   [63:0] zext_ln30_4_fu_523_p1;
wire   [63:0] and_ln30_fu_517_p2;
wire   [63:0] shl_ln30_1_fu_526_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

stencil3d_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U15(
    .din0(tmp_s_fu_335_p1),
    .din1(tmp_s_fu_335_p2),
    .din2(tmp_reg_569),
    .dout(tmp_s_fu_335_p4)
);

stencil3d_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U16(
    .din0(tmp_2_fu_372_p1),
    .din1(tmp_2_fu_372_p2),
    .din2(tmp_reg_569),
    .dout(tmp_2_fu_372_p4)
);

stencil3d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln27_fu_192_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_70 <= select_ln27_1_fu_230_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 5'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln27_fu_192_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_74 <= add_ln27_fu_198_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_74 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        j_fu_66 <= 5'd1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln27_reg_560 == 1'd0))) begin
        j_fu_66 <= add_ln28_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln27_reg_560 == 1'd0))) begin
        and_ln2_reg_620[5] <= and_ln2_fu_300_p3[5];
        tmp_2_reg_634 <= tmp_2_fu_372_p4;
        tmp_s_reg_628 <= tmp_s_fu_335_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln27_reg_560 <= icmp_ln27_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_192_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln27_reg_564 <= select_ln27_fu_216_p3;
        tmp_1_reg_575 <= select_ln27_1_fu_230_p3[32'd3];
        tmp_reg_569 <= select_ln27_1_fu_230_p3[32'd4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_192_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_238_p3 == 1'd0))) begin
        sol_0_addr_1_reg_610[11 : 4] <= zext_ln30_fu_282_p1[11 : 4];
        sol_0_addr_reg_590[11 : 4] <= zext_ln29_fu_268_p1[11 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_192_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_238_p3 == 1'd1))) begin
        sol_1_addr_1_reg_615[11 : 4] <= zext_ln30_fu_282_p1[11 : 4];
        sol_1_addr_reg_595[11 : 4] <= zext_ln29_fu_268_p1[11 : 4];
    end
end

always @ (*) begin
    if (((icmp_ln27_fu_192_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 5'd1;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 5'd1;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_0_ce0 = 1'b1;
    end else begin
        orig_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_0_ce1 = 1'b1;
    end else begin
        orig_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_1_ce0 = 1'b1;
    end else begin
        orig_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_1_ce1 = 1'b1;
    end else begin
        orig_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sol_0_ce0 = 1'b1;
    end else begin
        sol_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sol_0_ce1 = 1'b1;
    end else begin
        sol_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_569 == 1'd0))) begin
        sol_0_we0 = 1'b1;
    end else begin
        sol_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_569 == 1'd0))) begin
        sol_0_we1 = 1'b1;
    end else begin
        sol_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sol_1_ce0 = 1'b1;
    end else begin
        sol_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sol_1_ce1 = 1'b1;
    end else begin
        sol_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_569 == 1'd1))) begin
        sol_1_we0 = 1'b1;
    end else begin
        sol_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_569 == 1'd1))) begin
        sol_1_we1 = 1'b1;
    end else begin
        sol_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_1_fu_224_p2 = (ap_sig_allocacmp_i_load + 5'd1);

assign add_ln27_fu_198_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 10'd1);

assign add_ln28_fu_381_p2 = (select_ln27_reg_564 + 5'd1);

assign and_ln29_1_fu_406_p2 = (xor_ln29_1_fu_400_p2 & sol_0_q1);

assign and_ln29_fu_443_p2 = (xor_ln29_fu_437_p2 & sol_1_q1);

assign and_ln2_fu_300_p3 = {{tmp_1_reg_575}, {5'd0}};

assign and_ln30_1_fu_480_p2 = (xor_ln30_1_fu_474_p2 & sol_0_q0);

assign and_ln30_fu_517_p2 = (xor_ln30_fu_511_p2 & sol_1_q0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln27_fu_192_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_210_p2 = ((ap_sig_allocacmp_j_load == 5'd31) ? 1'b1 : 1'b0);

assign lshr_ln29_1_fu_325_p2 = orig_1_q1 >> zext_ln29_2_fu_321_p1;

assign lshr_ln29_fu_311_p2 = orig_0_q1 >> zext_ln29_1_fu_307_p1;

assign lshr_ln30_1_fu_362_p2 = orig_1_q0 >> zext_ln30_2_fu_358_p1;

assign lshr_ln30_fu_348_p2 = orig_0_q0 >> zext_ln30_1_fu_344_p1;

assign or_ln30_fu_276_p2 = (shl_ln_fu_258_p4 | 12'd15);

assign orig_0_address0 = zext_ln30_fu_282_p1;

assign orig_0_address1 = zext_ln29_fu_268_p1;

assign orig_1_address0 = zext_ln30_fu_282_p1;

assign orig_1_address1 = zext_ln29_fu_268_p1;

assign select_ln27_1_fu_230_p3 = ((icmp_ln28_fu_210_p2[0:0] == 1'b1) ? add_ln27_1_fu_224_p2 : ap_sig_allocacmp_i_load);

assign select_ln27_fu_216_p3 = ((icmp_ln28_fu_210_p2[0:0] == 1'b1) ? 5'd1 : ap_sig_allocacmp_j_load);

assign shl_ln29_1_fu_452_p2 = zext_ln29_4_fu_449_p1 << zext_ln29_3_fu_428_p1;

assign shl_ln29_2_fu_394_p2 = 64'd4294967295 << zext_ln29_5_fu_391_p1;

assign shl_ln29_3_fu_415_p2 = zext_ln29_6_fu_412_p1 << zext_ln29_5_fu_391_p1;

assign shl_ln29_fu_431_p2 = 64'd4294967295 << zext_ln29_3_fu_428_p1;

assign shl_ln30_1_fu_526_p2 = zext_ln30_4_fu_523_p1 << zext_ln30_3_fu_502_p1;

assign shl_ln30_2_fu_468_p2 = 64'd4294967295 << zext_ln30_5_fu_465_p1;

assign shl_ln30_3_fu_489_p2 = zext_ln30_6_fu_486_p1 << zext_ln30_5_fu_465_p1;

assign shl_ln30_fu_505_p2 = 64'd4294967295 << zext_ln30_3_fu_502_p1;

assign shl_ln_fu_258_p4 = {{{trunc_ln29_fu_254_p1}, {select_ln27_fu_216_p3}}, {4'd0}};

assign sol_0_address0 = sol_0_addr_1_reg_610;

assign sol_0_address1 = sol_0_addr_reg_590;

assign sol_0_d0 = (shl_ln30_3_fu_489_p2 | and_ln30_1_fu_480_p2);

assign sol_0_d1 = (shl_ln29_3_fu_415_p2 | and_ln29_1_fu_406_p2);

assign sol_1_address0 = sol_1_addr_1_reg_615;

assign sol_1_address1 = sol_1_addr_reg_595;

assign sol_1_d0 = (shl_ln30_1_fu_526_p2 | and_ln30_fu_517_p2);

assign sol_1_d1 = (shl_ln29_1_fu_452_p2 | and_ln29_fu_443_p2);

assign tmp_2_fu_372_p1 = lshr_ln30_fu_348_p2[31:0];

assign tmp_2_fu_372_p2 = lshr_ln30_1_fu_362_p2[31:0];

assign tmp_fu_238_p3 = select_ln27_1_fu_230_p3[32'd4];

assign tmp_s_fu_335_p1 = lshr_ln29_fu_311_p2[31:0];

assign tmp_s_fu_335_p2 = lshr_ln29_1_fu_325_p2[31:0];

assign trunc_ln29_fu_254_p1 = select_ln27_1_fu_230_p3[2:0];

assign xor_ln29_1_fu_400_p2 = (shl_ln29_2_fu_394_p2 ^ 64'd18446744073709551615);

assign xor_ln29_fu_437_p2 = (shl_ln29_fu_431_p2 ^ 64'd18446744073709551615);

assign xor_ln30_1_fu_474_p2 = (shl_ln30_2_fu_468_p2 ^ 64'd18446744073709551615);

assign xor_ln30_fu_511_p2 = (shl_ln30_fu_505_p2 ^ 64'd18446744073709551615);

assign zext_ln29_1_fu_307_p1 = and_ln2_fu_300_p3;

assign zext_ln29_2_fu_321_p1 = and_ln2_fu_300_p3;

assign zext_ln29_3_fu_428_p1 = and_ln2_reg_620;

assign zext_ln29_4_fu_449_p1 = tmp_s_reg_628;

assign zext_ln29_5_fu_391_p1 = and_ln2_reg_620;

assign zext_ln29_6_fu_412_p1 = tmp_s_reg_628;

assign zext_ln29_fu_268_p1 = shl_ln_fu_258_p4;

assign zext_ln30_1_fu_344_p1 = and_ln2_fu_300_p3;

assign zext_ln30_2_fu_358_p1 = and_ln2_fu_300_p3;

assign zext_ln30_3_fu_502_p1 = and_ln2_reg_620;

assign zext_ln30_4_fu_523_p1 = tmp_2_reg_634;

assign zext_ln30_5_fu_465_p1 = and_ln2_reg_620;

assign zext_ln30_6_fu_486_p1 = tmp_2_reg_634;

assign zext_ln30_fu_282_p1 = or_ln30_fu_276_p2;

always @ (posedge ap_clk) begin
    sol_0_addr_reg_590[3:0] <= 4'b0000;
    sol_1_addr_reg_595[3:0] <= 4'b0000;
    sol_0_addr_1_reg_610[3:0] <= 4'b1111;
    sol_1_addr_1_reg_615[3:0] <= 4'b1111;
    and_ln2_reg_620[4:0] <= 5'b00000;
end

endmodule //stencil3d_stencil3d_Pipeline_row_bound_height_row_bound_col
