// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stencil3d_stencil3d_Pipeline_height_bound_row (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_52,
        orig_0_address0,
        orig_0_ce0,
        orig_0_q0,
        sol_0_address0,
        sol_0_ce0,
        sol_0_we0,
        sol_0_d0,
        sol_0_q0,
        zext_ln16,
        orig_1_address0,
        orig_1_ce0,
        orig_1_q0,
        sol_1_address0,
        sol_1_ce0,
        sol_1_we0,
        sol_1_d0,
        sol_1_address1,
        sol_1_ce1,
        sol_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] tmp_52;
output  [11:0] orig_0_address0;
output   orig_0_ce0;
input  [63:0] orig_0_q0;
output  [11:0] sol_0_address0;
output   sol_0_ce0;
output   sol_0_we0;
output  [63:0] sol_0_d0;
input  [63:0] sol_0_q0;
input  [8:0] zext_ln16;
output  [11:0] orig_1_address0;
output   orig_1_ce0;
input  [63:0] orig_1_q0;
output  [11:0] sol_1_address0;
output   sol_1_ce0;
output   sol_1_we0;
output  [63:0] sol_1_d0;
output  [11:0] sol_1_address1;
output   sol_1_ce1;
input  [63:0] sol_1_q1;

reg ap_idle;
reg orig_0_ce0;
reg[11:0] sol_0_address0;
reg sol_0_ce0;
reg sol_0_we0;
reg orig_1_ce0;
reg sol_1_ce0;
reg sol_1_we0;
reg sol_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln16_fu_162_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] zext_ln16_cast_fu_140_p1;
reg   [9:0] zext_ln16_cast_reg_355;
reg   [0:0] icmp_ln16_reg_360;
wire    ap_block_pp0_stage1_11001;
reg   [11:0] sol_0_addr_reg_369;
reg   [0:0] tmp_reg_374;
reg   [11:0] sol_1_addr_reg_384;
wire   [0:0] addr_cmp_fu_223_p2;
reg   [0:0] addr_cmp_reg_390;
wire   [63:0] or_ln18_fu_319_p2;
reg   [63:0] or_ln18_reg_395;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln17_fu_183_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln18_fu_214_p1;
reg   [63:0] reuse_addr_reg_fu_60;
wire    ap_loop_init;
reg   [63:0] reuse_reg_fu_64;
wire    ap_block_pp0_stage0;
reg   [4:0] k_fu_68;
wire   [4:0] add_ln16_fu_168_p2;
wire   [8:0] zext_ln16_1_fu_174_p1;
wire   [8:0] add_ln17_fu_178_p2;
wire   [9:0] or_ln_fu_189_p3;
wire  signed [9:0] add_ln18_fu_197_p2;
wire  signed [11:0] sext_ln18_fu_210_p1;
wire   [31:0] trunc_ln17_fu_239_p1;
wire   [5:0] and_ln1_fu_256_p3;
wire   [63:0] zext_ln18_1_fu_263_p1;
wire   [63:0] lshr_ln18_fu_267_p2;
wire   [63:0] zext_ln18_2_fu_287_p1;
wire   [63:0] shl_ln18_fu_291_p2;
wire   [63:0] reuse_select_fu_280_p3;
wire   [63:0] xor_ln18_fu_297_p2;
wire   [31:0] trunc_ln18_fu_273_p1;
wire   [63:0] zext_ln18_3_fu_309_p1;
wire   [63:0] and_ln18_fu_303_p2;
wire   [63:0] shl_ln18_1_fu_313_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

stencil3d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        k_fu_68 <= 5'd0;
    end else if (((icmp_ln16_fu_162_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        k_fu_68 <= add_ln16_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        reuse_addr_reg_fu_60 <= 64'd18446744073709551615;
    end else if (((icmp_ln16_fu_162_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reuse_addr_reg_fu_60 <= zext_ln18_fu_214_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        reuse_reg_fu_64 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reuse_reg_fu_64 <= or_ln18_reg_395;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_162_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        addr_cmp_reg_390 <= addr_cmp_fu_223_p2;
        sol_0_addr_reg_369[8 : 0] <= zext_ln17_fu_183_p1[8 : 0];
        sol_1_addr_reg_384 <= zext_ln18_fu_214_p1;
        tmp_reg_374 <= add_ln18_fu_197_p2[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln16_reg_360 <= icmp_ln16_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln18_reg_395 <= or_ln18_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln16_cast_reg_355[8 : 0] <= zext_ln16_cast_fu_140_p1[8 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_162_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        orig_0_ce0 = 1'b1;
    end else begin
        orig_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        orig_1_ce0 = 1'b1;
    end else begin
        orig_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sol_0_address0 = sol_0_addr_reg_369;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sol_0_address0 = zext_ln17_fu_183_p1;
    end else begin
        sol_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sol_0_ce0 = 1'b1;
    end else begin
        sol_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sol_0_we0 = 1'b1;
    end else begin
        sol_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sol_1_ce0 = 1'b1;
    end else begin
        sol_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sol_1_ce1 = 1'b1;
    end else begin
        sol_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sol_1_we0 = 1'b1;
    end else begin
        sol_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_168_p2 = (k_fu_68 + 5'd1);

assign add_ln17_fu_178_p2 = (zext_ln16_1_fu_174_p1 + tmp_52);

assign add_ln18_fu_197_p2 = (or_ln_fu_189_p3 + zext_ln16_cast_reg_355);

assign addr_cmp_fu_223_p2 = ((reuse_addr_reg_fu_60 == zext_ln18_fu_214_p1) ? 1'b1 : 1'b0);

assign and_ln18_fu_303_p2 = (xor_ln18_fu_297_p2 & reuse_select_fu_280_p3);

assign and_ln1_fu_256_p3 = {{tmp_reg_374}, {5'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln16_fu_162_p2 = ((k_fu_68 == 5'd16) ? 1'b1 : 1'b0);

assign lshr_ln18_fu_267_p2 = orig_1_q0 >> zext_ln18_1_fu_263_p1;

assign or_ln18_fu_319_p2 = (shl_ln18_1_fu_313_p2 | and_ln18_fu_303_p2);

assign or_ln_fu_189_p3 = {{5'd16}, {k_fu_68}};

assign orig_0_address0 = zext_ln17_fu_183_p1;

assign orig_1_address0 = zext_ln18_fu_214_p1;

assign reuse_select_fu_280_p3 = ((addr_cmp_reg_390[0:0] == 1'b1) ? reuse_reg_fu_64 : sol_1_q1);

assign sext_ln18_fu_210_p1 = add_ln18_fu_197_p2;

assign shl_ln18_1_fu_313_p2 = zext_ln18_3_fu_309_p1 << zext_ln18_2_fu_287_p1;

assign shl_ln18_fu_291_p2 = 64'd4294967295 << zext_ln18_2_fu_287_p1;

assign sol_0_d0 = {{sol_0_q0[63:32]}, {trunc_ln17_fu_239_p1}};

assign sol_1_address0 = sol_1_addr_reg_384;

assign sol_1_address1 = zext_ln18_fu_214_p1;

assign sol_1_d0 = or_ln18_reg_395;

assign trunc_ln17_fu_239_p1 = orig_0_q0[31:0];

assign trunc_ln18_fu_273_p1 = lshr_ln18_fu_267_p2[31:0];

assign xor_ln18_fu_297_p2 = (shl_ln18_fu_291_p2 ^ 64'd18446744073709551615);

assign zext_ln16_1_fu_174_p1 = k_fu_68;

assign zext_ln16_cast_fu_140_p1 = zext_ln16;

assign zext_ln17_fu_183_p1 = add_ln17_fu_178_p2;

assign zext_ln18_1_fu_263_p1 = and_ln1_fu_256_p3;

assign zext_ln18_2_fu_287_p1 = and_ln1_fu_256_p3;

assign zext_ln18_3_fu_309_p1 = trunc_ln18_fu_273_p1;

assign zext_ln18_fu_214_p1 = $unsigned(sext_ln18_fu_210_p1);

always @ (posedge ap_clk) begin
    zext_ln16_cast_reg_355[9] <= 1'b0;
    sol_0_addr_reg_369[11:9] <= 3'b000;
end

endmodule //stencil3d_stencil3d_Pipeline_height_bound_row
