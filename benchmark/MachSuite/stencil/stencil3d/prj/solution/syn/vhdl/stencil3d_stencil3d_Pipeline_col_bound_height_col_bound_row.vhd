-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stencil3d_stencil3d_Pipeline_col_bound_height_col_bound_row is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sol_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sol_0_ce0 : OUT STD_LOGIC;
    sol_0_we0 : OUT STD_LOGIC;
    sol_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sol_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    orig_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_0_ce0 : OUT STD_LOGIC;
    orig_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    orig_0_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_0_ce1 : OUT STD_LOGIC;
    orig_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    orig_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_1_ce0 : OUT STD_LOGIC;
    orig_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    orig_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_1_ce1 : OUT STD_LOGIC;
    orig_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    sol_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sol_1_ce0 : OUT STD_LOGIC;
    sol_1_we0 : OUT STD_LOGIC;
    sol_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sol_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of stencil3d_stencil3d_Pipeline_col_bound_height_col_bound_row is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv14_1F0 : STD_LOGIC_VECTOR (13 downto 0) := "00000111110000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln21_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln21_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln21_fu_224_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_652 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_268_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_657 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_662 : STD_LOGIC_VECTOR (0 downto 0);
    signal sol_0_addr_1_reg_677 : STD_LOGIC_VECTOR (11 downto 0);
    signal sol_1_addr_1_reg_682 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln_reg_687 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_reg_692 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_366_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal sol_0_addr_reg_711 : STD_LOGIC_VECTOR (11 downto 0);
    signal sol_1_addr_reg_716 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln_fu_384_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln_reg_721 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_8_fu_419_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln3_fu_428_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln3_reg_733 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln24_2_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln24_2_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal orig_1_load_3_reg_745 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_535_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln23_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln24_2_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_fu_82 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln22_fu_543_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_1_load : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_86 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_1_fu_238_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_90 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln21_fu_206_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal or_ln23_1_fu_479_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal or_ln24_1_fu_583_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln23_fu_516_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln24_fu_620_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln22_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_1_fu_232_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_250_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_23_fu_258_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln23_fu_292_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln23_cast9_fu_296_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln22_1_fu_246_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln22_fu_264_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln24_1_fu_318_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln24_1_fu_288_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln24_fu_314_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln24_fu_284_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln24_fu_322_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln24_2_fu_334_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln24_1_fu_328_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln23_1_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln23_fu_395_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_2_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln23_1_fu_409_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_3_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln24_fu_439_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_5_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln23_2_fu_452_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln23_1_fu_458_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_6_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln23_1_fu_464_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln23_3_fu_473_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_3_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln23_fu_489_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln23_fu_495_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_4_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln23_fu_501_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln23_1_fu_510_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_4_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln24_1_fu_526_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_535_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_7_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln24_2_fu_556_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln24_1_fu_562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_8_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln24_1_fu_568_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln24_3_fu_577_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_5_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln24_fu_593_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln24_fu_599_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_6_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln24_fu_605_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln24_1_fu_614_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stencil3d_mux_21_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stencil3d_mux_22_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stencil3d_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_21_32_1_1_U7 : component stencil3d_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_8_fu_419_p1,
        din1 => tmp_8_fu_419_p2,
        din2 => tmp_reg_657,
        dout => tmp_8_fu_419_p4);

    mux_22_32_1_1_U8 : component stencil3d_mux_22_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => trunc_ln24_2_reg_740,
        din1 => tmp_15_fu_535_p2,
        din2 => lshr_ln_reg_687,
        dout => tmp_15_fu_535_p4);

    flow_control_loop_pipe_sequential_init_U : component stencil3d_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln21_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_86 <= select_ln21_1_fu_238_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_86 <= ap_const_lv5_1;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln21_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_90 <= add_ln21_fu_206_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_90 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    k_1_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_1_fu_82 <= ap_const_lv5_0;
            elsif (((icmp_ln21_reg_648 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                k_1_fu_82 <= add_ln22_fu_543_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_648 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    and_ln3_reg_733(5) <= and_ln3_fu_428_p3(5);
                    and_ln_reg_721(5) <= and_ln_fu_384_p3(5);
                tmp_8_reg_727 <= tmp_8_fu_419_p4;
                trunc_ln24_2_reg_740 <= trunc_ln24_2_fu_445_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln21_reg_648 <= icmp_ln21_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln_reg_687 <= add_ln24_fu_322_p2(14 downto 13);
                select_ln21_reg_652 <= select_ln21_fu_224_p3;
                tmp_10_reg_692 <= add_ln24_2_fu_334_p2(12 downto 12);
                tmp_11_reg_707 <= add_ln24_fu_322_p2(13 downto 13);
                tmp_9_reg_662 <= select_ln21_1_fu_238_p3(3 downto 3);
                tmp_reg_657 <= select_ln21_1_fu_238_p3(4 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_648 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                orig_1_load_3_reg_745 <= orig_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_268_p3 = ap_const_lv1_0))) then
                    sol_0_addr_1_reg_677(4 downto 0) <= zext_ln23_fu_306_p1(12 - 1 downto 0)(4 downto 0);    sol_0_addr_1_reg_677(11 downto 9) <= zext_ln23_fu_306_p1(12 - 1 downto 0)(11 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_11_fu_366_p3 = ap_const_lv1_0))) then
                sol_0_addr_reg_711 <= zext_ln24_2_fu_358_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_268_p3 = ap_const_lv1_1))) then
                    sol_1_addr_1_reg_682(4 downto 0) <= zext_ln23_fu_306_p1(12 - 1 downto 0)(4 downto 0);    sol_1_addr_1_reg_682(11 downto 9) <= zext_ln23_fu_306_p1(12 - 1 downto 0)(11 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_11_fu_366_p3 = ap_const_lv1_1))) then
                sol_1_addr_reg_716 <= zext_ln24_2_fu_358_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_648 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_15_reg_750 <= tmp_15_fu_535_p4;
            end if;
        end if;
    end process;
    sol_0_addr_1_reg_677(8 downto 5) <= "0000";
    sol_1_addr_1_reg_682(8 downto 5) <= "0000";
    and_ln_reg_721(4 downto 0) <= "00000";
    and_ln3_reg_733(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage3_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln21_1_fu_232_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv5_1));
    add_ln21_fu_206_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv9_1));
    add_ln22_fu_543_p2 <= std_logic_vector(unsigned(select_ln21_reg_652) + unsigned(ap_const_lv5_1));
    add_ln23_cast9_fu_296_p4 <= ((trunc_ln23_fu_292_p1 & ap_const_lv4_0) & select_ln21_fu_224_p3);
    add_ln24_1_fu_328_p2 <= std_logic_vector(unsigned(zext_ln24_1_fu_318_p1) + unsigned(trunc_ln24_1_fu_288_p1));
    add_ln24_2_fu_334_p2 <= std_logic_vector(unsigned(zext_ln24_fu_314_p1) + unsigned(trunc_ln24_fu_284_p1));
    add_ln24_fu_322_p2 <= std_logic_vector(unsigned(zext_ln22_1_fu_246_p1) + unsigned(zext_ln22_fu_264_p1));
    and_ln23_1_fu_464_p2 <= (xor_ln23_1_fu_458_p2 and sol_0_q0);
    and_ln23_fu_501_p2 <= (xor_ln23_fu_495_p2 and sol_1_q0);
    and_ln24_1_fu_568_p2 <= (xor_ln24_1_fu_562_p2 and sol_0_q0);
    and_ln24_fu_605_p2 <= (xor_ln24_fu_599_p2 and sol_1_q0);
    and_ln3_fu_428_p3 <= (tmp_10_reg_692 & ap_const_lv5_0);
    and_ln_fu_384_p3 <= (tmp_9_reg_662 & ap_const_lv5_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln21_fu_200_p2)
    begin
        if (((icmp_ln21_fu_200_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_86)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv5_1;
        else 
            ap_sig_allocacmp_i_load <= i_fu_86;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_k_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_1_fu_82, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k_1_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_k_1_load <= k_1_fu_82;
        end if; 
    end process;

    empty_23_fu_258_p2 <= (tmp_s_fu_250_p3 or ap_const_lv14_1F0);
    icmp_ln21_fu_200_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv9_1E0) else "0";
    icmp_ln22_fu_218_p2 <= "1" when (ap_sig_allocacmp_k_1_load = ap_const_lv5_10) else "0";
    lshr_ln23_1_fu_409_p2 <= std_logic_vector(shift_right(unsigned(orig_1_q1),to_integer(unsigned('0' & zext_ln23_2_fu_405_p1(31-1 downto 0)))));
    lshr_ln23_fu_395_p2 <= std_logic_vector(shift_right(unsigned(orig_0_q1),to_integer(unsigned('0' & zext_ln23_1_fu_391_p1(31-1 downto 0)))));
    lshr_ln24_1_fu_526_p2 <= std_logic_vector(shift_right(unsigned(orig_1_load_3_reg_745),to_integer(unsigned('0' & zext_ln24_4_fu_523_p1(31-1 downto 0)))));
    lshr_ln24_fu_439_p2 <= std_logic_vector(shift_right(unsigned(orig_0_q0),to_integer(unsigned('0' & zext_ln24_3_fu_435_p1(31-1 downto 0)))));
    or_ln23_1_fu_479_p2 <= (shl_ln23_3_fu_473_p2 or and_ln23_1_fu_464_p2);
    or_ln23_fu_516_p2 <= (shl_ln23_1_fu_510_p2 or and_ln23_fu_501_p2);
    or_ln24_1_fu_583_p2 <= (shl_ln24_3_fu_577_p2 or and_ln24_1_fu_568_p2);
    or_ln24_fu_620_p2 <= (shl_ln24_1_fu_614_p2 or and_ln24_fu_605_p2);
    orig_0_address0 <= zext_ln24_2_fu_358_p1(12 - 1 downto 0);
    orig_0_address1 <= zext_ln23_fu_306_p1(12 - 1 downto 0);

    orig_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            orig_0_ce0 <= ap_const_logic_1;
        else 
            orig_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    orig_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            orig_0_ce1 <= ap_const_logic_1;
        else 
            orig_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    orig_1_address0 <= zext_ln24_2_fu_358_p1(12 - 1 downto 0);
    orig_1_address1 <= zext_ln23_fu_306_p1(12 - 1 downto 0);

    orig_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            orig_1_ce0 <= ap_const_logic_1;
        else 
            orig_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    orig_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            orig_1_ce1 <= ap_const_logic_1;
        else 
            orig_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln21_1_fu_238_p3 <= 
        add_ln21_1_fu_232_p2 when (icmp_ln22_fu_218_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln21_fu_224_p3 <= 
        ap_const_lv5_0 when (icmp_ln22_fu_218_p2(0) = '1') else 
        ap_sig_allocacmp_k_1_load;
    shl_ln23_1_fu_510_p2 <= std_logic_vector(shift_left(unsigned(zext_ln23_4_fu_507_p1),to_integer(unsigned('0' & zext_ln23_3_fu_486_p1(31-1 downto 0)))));
    shl_ln23_2_fu_452_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln23_5_fu_449_p1(31-1 downto 0)))));
    shl_ln23_3_fu_473_p2 <= std_logic_vector(shift_left(unsigned(zext_ln23_6_fu_470_p1),to_integer(unsigned('0' & zext_ln23_5_fu_449_p1(31-1 downto 0)))));
    shl_ln23_fu_489_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln23_3_fu_486_p1(31-1 downto 0)))));
    shl_ln24_1_fu_614_p2 <= std_logic_vector(shift_left(unsigned(zext_ln24_6_fu_611_p1),to_integer(unsigned('0' & zext_ln24_5_fu_590_p1(31-1 downto 0)))));
    shl_ln24_2_fu_556_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln24_7_fu_553_p1(31-1 downto 0)))));
    shl_ln24_3_fu_577_p2 <= std_logic_vector(shift_left(unsigned(zext_ln24_8_fu_574_p1),to_integer(unsigned('0' & zext_ln24_7_fu_553_p1(31-1 downto 0)))));
    shl_ln24_fu_593_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln24_5_fu_590_p1(31-1 downto 0)))));

    sol_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, sol_0_addr_1_reg_677, sol_0_addr_reg_711, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sol_0_address0 <= sol_0_addr_reg_711;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            sol_0_address0 <= sol_0_addr_1_reg_677;
        else 
            sol_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sol_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            sol_0_ce0 <= ap_const_logic_1;
        else 
            sol_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sol_0_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, or_ln23_1_fu_479_p2, ap_block_pp0_stage2, or_ln24_1_fu_583_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sol_0_d0 <= or_ln24_1_fu_583_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            sol_0_d0 <= or_ln23_1_fu_479_p2;
        else 
            sol_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sol_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln21_reg_648, ap_block_pp0_stage0_11001, tmp_reg_657, tmp_11_reg_707, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_11_reg_707 = ap_const_lv1_0)) or ((icmp_ln21_reg_648 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_reg_657 = ap_const_lv1_0)))) then 
            sol_0_we0 <= ap_const_logic_1;
        else 
            sol_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sol_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, sol_1_addr_1_reg_682, sol_1_addr_reg_716, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sol_1_address0 <= sol_1_addr_reg_716;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            sol_1_address0 <= sol_1_addr_1_reg_682;
        else 
            sol_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sol_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            sol_1_ce0 <= ap_const_logic_1;
        else 
            sol_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sol_1_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, or_ln23_fu_516_p2, or_ln24_fu_620_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sol_1_d0 <= or_ln24_fu_620_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            sol_1_d0 <= or_ln23_fu_516_p2;
        else 
            sol_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sol_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln21_reg_648, ap_block_pp0_stage0_11001, tmp_reg_657, tmp_11_reg_707, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_11_reg_707 = ap_const_lv1_1)) or ((icmp_ln21_reg_648 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_reg_657 = ap_const_lv1_1)))) then 
            sol_1_we0 <= ap_const_logic_1;
        else 
            sol_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_366_p3 <= add_ln24_fu_322_p2(13 downto 13);
    tmp_15_fu_535_p2 <= lshr_ln24_1_fu_526_p2(32 - 1 downto 0);
    tmp_8_fu_419_p1 <= lshr_ln23_fu_395_p2(32 - 1 downto 0);
    tmp_8_fu_419_p2 <= lshr_ln23_1_fu_409_p2(32 - 1 downto 0);
    tmp_fu_268_p3 <= select_ln21_1_fu_238_p3(4 downto 4);
    tmp_s_fu_250_p3 <= (select_ln21_1_fu_238_p3 & ap_const_lv9_0);
    trunc_ln23_fu_292_p1 <= select_ln21_1_fu_238_p3(3 - 1 downto 0);
    trunc_ln24_1_fu_288_p1 <= empty_23_fu_258_p2(12 - 1 downto 0);
    trunc_ln24_2_fu_445_p1 <= lshr_ln24_fu_439_p2(32 - 1 downto 0);
    trunc_ln24_fu_284_p1 <= empty_23_fu_258_p2(13 - 1 downto 0);
    xor_ln23_1_fu_458_p2 <= (shl_ln23_2_fu_452_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln23_fu_495_p2 <= (shl_ln23_fu_489_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln24_1_fu_562_p2 <= (shl_ln24_2_fu_556_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln24_fu_599_p2 <= (shl_ln24_fu_593_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    zext_ln22_1_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_fu_224_p3),15));
    zext_ln22_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_23_fu_258_p2),15));
    zext_ln23_1_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_384_p3),64));
    zext_ln23_2_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_384_p3),64));
    zext_ln23_3_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_reg_721),64));
    zext_ln23_4_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_727),64));
    zext_ln23_5_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_reg_721),64));
    zext_ln23_6_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_727),64));
    zext_ln23_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_cast9_fu_296_p4),64));
    zext_ln24_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_fu_224_p3),12));
    zext_ln24_2_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_1_fu_328_p2),64));
    zext_ln24_3_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln3_fu_428_p3),64));
    zext_ln24_4_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln3_reg_733),64));
    zext_ln24_5_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln3_reg_733),64));
    zext_ln24_6_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_750),64));
    zext_ln24_7_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln3_reg_733),64));
    zext_ln24_8_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_750),64));
    zext_ln24_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_fu_224_p3),13));
end behav;
