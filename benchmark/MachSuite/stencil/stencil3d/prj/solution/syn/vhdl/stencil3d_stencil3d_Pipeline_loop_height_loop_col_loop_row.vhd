-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stencil3d_stencil3d_Pipeline_loop_height_loop_col_loop_row is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sol_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sol_0_ce0 : OUT STD_LOGIC;
    sol_0_we0 : OUT STD_LOGIC;
    sol_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sol_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    orig_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_0_ce0 : OUT STD_LOGIC;
    orig_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    orig_0_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_0_ce1 : OUT STD_LOGIC;
    orig_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    orig_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_1_ce0 : OUT STD_LOGIC;
    orig_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    orig_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_1_ce1 : OUT STD_LOGIC;
    orig_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    C_load : IN STD_LOGIC_VECTOR (31 downto 0);
    C_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sol_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sol_1_ce0 : OUT STD_LOGIC;
    sol_1_we0 : OUT STD_LOGIC;
    sol_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sol_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of stencil3d_stencil3d_Pipeline_loop_height_loop_col_loop_row is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_3138 : STD_LOGIC_VECTOR (13 downto 0) := "11000100111000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv9_1A4 : STD_LOGIC_VECTOR (8 downto 0) := "110100100";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv64_FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln36_reg_1155 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln36_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln37_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_1159 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln8_fu_418_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln8_reg_1164 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_fu_426_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln37_reg_1173 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_434_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_reg_1182 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_1187 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1192 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1192_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1205 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1210 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1215 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln39_fu_518_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln39_reg_1220 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_reg_1248 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_8_reg_1253 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_656_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1258 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_693_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1263 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln4_fu_733_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln4_reg_1288 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln40_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_reg_1300 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_779_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1305 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_816_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_fu_887_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_reg_1345 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_918_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_953_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1355 : STD_LOGIC_VECTOR (31 downto 0);
    signal sol_0_addr_reg_1360 : STD_LOGIC_VECTOR (11 downto 0);
    signal sol_1_addr_reg_1365 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum0_fu_1006_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum0_reg_1370 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_fu_1019_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_reg_1375 : STD_LOGIC_VECTOR (31 downto 0);
    signal sol_0_load_reg_1380 : STD_LOGIC_VECTOR (63 downto 0);
    signal sol_1_load_reg_1385 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln48_fu_1032_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_reg_1390 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln40_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln41_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln43_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln45_fu_857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_fu_120 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln44_fu_825_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_124 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten13_fu_128 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln37_1_fu_968_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_132 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_fu_398_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten29_fu_136 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln36_fu_345_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln38_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln7_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next3339_fu_392_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln7_fu_366_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln7_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln8_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next19_dup_fu_406_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_cast_cast_fu_458_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_cast_cast_cast_fu_466_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_cast_fu_476_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_20_fu_470_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_21_fu_480_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln40_fu_522_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_cast_fu_526_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln41_fu_540_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_cast_fu_544_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp47_fu_573_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp47_cast_fu_578_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_2_cast18_fu_582_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_22_fu_585_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln5_fu_596_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln40_1_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln40_fu_632_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_2_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln40_1_fu_646_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_656_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_656_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln6_fu_603_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln41_1_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln41_fu_669_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_2_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln41_1_fu_683_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_693_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln42_fu_702_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_cast_fu_706_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp5_fu_591_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln43_cast_fu_719_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln8_fu_740_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln42_1_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln42_fu_755_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_2_fu_765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln42_1_fu_769_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_779_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_779_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln43_1_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln43_fu_792_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_2_fu_802_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln43_1_fu_806_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_816_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_816_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_1_cast_fu_830_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln45_fu_844_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln45_1_cast_fu_849_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln39_cast_fu_868_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln41_fu_883_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln44_1_fu_892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln44_fu_895_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_2_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln44_1_fu_908_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_918_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_918_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln45_1_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln45_fu_930_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_2_fu_940_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln45_1_fu_943_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_953_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_953_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_fu_962_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln39_1_fu_980_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln39_fu_983_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_2_fu_993_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln39_1_fu_996_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum0_fu_1006_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum0_fu_1006_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_fu_1015_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_fu_1028_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul0_fu_1024_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln48_2_fu_1038_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln48_2_fu_1041_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln48_1_fu_1047_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_3_fu_1058_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln48_1_fu_1053_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln48_3_fu_1061_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_1074_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln48_fu_1077_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln48_fu_1083_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_1094_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln48_fu_1089_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln48_1_fu_1097_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stencil3d_mux_21_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stencil3d_add_32ns_32ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stencil3d_mux_22_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stencil3d_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stencil3d_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_21_32_1_1_U21 : component stencil3d_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_9_fu_656_p1,
        din1 => tmp_9_fu_656_p2,
        din2 => tmp_3_reg_1200,
        dout => tmp_9_fu_656_p4);

    mux_21_32_1_1_U22 : component stencil3d_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_10_fu_693_p1,
        din1 => tmp_10_fu_693_p2,
        din2 => tmp_5_reg_1210,
        dout => tmp_10_fu_693_p4);

    add_32ns_32ns_32_1_1_U23 : component stencil3d_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_10_reg_1263,
        din1 => tmp_9_reg_1258,
        dout => add_ln40_fu_747_p2);

    mux_22_32_1_1_U24 : component stencil3d_mux_22_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_11_fu_779_p1,
        din1 => tmp_11_fu_779_p2,
        din2 => tmp_7_reg_1248,
        dout => tmp_11_fu_779_p4);

    mux_21_32_1_1_U25 : component stencil3d_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_12_fu_816_p1,
        din1 => tmp_12_fu_816_p2,
        din2 => tmp_2_reg_1192,
        dout => tmp_12_fu_816_p4);

    add_32ns_32ns_32_1_1_U26 : component stencil3d_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_11_reg_1305,
        din1 => add_ln40_reg_1300,
        dout => add_ln41_fu_883_p2);

    add_32ns_32ns_32_1_1_U27 : component stencil3d_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_12_reg_1310,
        din1 => add_ln41_fu_883_p2,
        dout => add_ln42_fu_887_p2);

    mux_21_32_1_1_U28 : component stencil3d_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_13_fu_918_p1,
        din1 => tmp_13_fu_918_p2,
        din2 => tmp_2_reg_1192,
        dout => tmp_13_fu_918_p4);

    mux_21_32_1_1_U29 : component stencil3d_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_14_fu_953_p1,
        din1 => tmp_14_fu_953_p2,
        din2 => tmp_2_reg_1192,
        dout => tmp_14_fu_953_p4);

    mux_21_32_1_1_U30 : component stencil3d_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => sum0_fu_1006_p1,
        din1 => sum0_fu_1006_p2,
        din2 => tmp_2_reg_1192,
        dout => sum0_fu_1006_p4);

    add_32ns_32ns_32_1_1_U31 : component stencil3d_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_13_reg_1350,
        din1 => add_ln42_reg_1345,
        dout => add_ln43_fu_1015_p2);

    add_32ns_32ns_32_1_1_U32 : component stencil3d_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_14_reg_1355,
        din1 => add_ln43_fu_1015_p2,
        dout => sum1_fu_1019_p2);

    mul_32s_32s_32_1_1_U33 : component stencil3d_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => C_load,
        din1 => sum0_reg_1370,
        dout => mul0_fu_1024_p2);

    mul_32s_32s_32_1_1_U34 : component stencil3d_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => C_load_1,
        din1 => sum1_reg_1375,
        dout => mul1_fu_1028_p2);

    flow_control_loop_pipe_sequential_init_U : component stencil3d_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_132 <= ap_const_lv5_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln36_fu_339_p2 = ap_const_lv1_0))) then 
                i_fu_132 <= select_ln36_fu_398_p3;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_128 <= ap_const_lv9_0;
                elsif (((icmp_ln36_reg_1155 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_128 <= select_ln37_1_fu_968_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten29_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten29_fu_136 <= ap_const_lv14_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln36_fu_339_p2 = ap_const_lv1_0))) then 
                indvar_flatten29_fu_136 <= add_ln36_fu_345_p2;
            end if; 
        end if;
    end process;

    j_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_124 <= ap_const_lv5_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln36_fu_339_p2 = ap_const_lv1_0))) then 
                j_fu_124 <= select_ln37_fu_426_p3;
            end if; 
        end if;
    end process;

    k_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_fu_120 <= ap_const_lv4_1;
            elsif (((icmp_ln36_reg_1155 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                k_fu_120 <= add_ln44_fu_825_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_1155 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln40_reg_1300 <= add_ln40_fu_747_p2;
                    and_ln4_reg_1288(5) <= and_ln4_fu_733_p3(5);
                tmp_11_reg_1305 <= tmp_11_fu_779_p4;
                tmp_12_reg_1310 <= tmp_12_fu_816_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_1155 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln42_reg_1345 <= add_ln42_fu_887_p2;
                tmp_13_reg_1350 <= tmp_13_fu_918_p4;
                tmp_14_reg_1355 <= tmp_14_fu_953_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln48_reg_1390 <= add_ln48_fu_1032_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln36_reg_1155 <= icmp_ln36_fu_339_p2;
                sum0_reg_1370 <= sum0_fu_1006_p4;
                sum1_reg_1375 <= sum1_fu_1019_p2;
                tmp_2_reg_1192_pp0_iter1_reg <= tmp_2_reg_1192;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln36_fu_339_p2 = ap_const_lv1_0))) then
                icmp_ln37_reg_1159 <= icmp_ln37_fu_360_p2;
                select_ln37_reg_1173 <= select_ln37_fu_426_p3;
                select_ln8_reg_1164 <= select_ln8_fu_418_p3;
                tmp_2_reg_1192 <= select_ln36_fu_398_p3(4 downto 4);
                tmp_3_reg_1200 <= empty_20_fu_470_p2(9 downto 9);
                tmp_4_reg_1205 <= empty_20_fu_470_p2(8 downto 8);
                tmp_5_reg_1210 <= empty_21_fu_480_p2(9 downto 9);
                tmp_6_reg_1215 <= empty_21_fu_480_p2(8 downto 8);
                tmp_reg_1187 <= select_ln36_fu_398_p3(3 downto 3);
                    tmp_s_reg_1182(9 downto 5) <= tmp_s_fu_434_p3(9 downto 5);
                trunc_ln39_reg_1220 <= trunc_ln39_fu_518_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_1155 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_1192 = ap_const_lv1_0))) then
                sol_0_addr_reg_1360 <= zext_ln39_fu_875_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_2_reg_1192 = ap_const_lv1_0))) then
                sol_0_load_reg_1380 <= sol_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_1155 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_1192 = ap_const_lv1_1))) then
                sol_1_addr_reg_1365 <= zext_ln39_fu_875_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_2_reg_1192 = ap_const_lv1_1))) then
                sol_1_load_reg_1385 <= sol_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_1155 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_10_reg_1263 <= tmp_10_fu_693_p4;
                tmp_7_reg_1248 <= empty_22_fu_585_p2(10 downto 9);
                tmp_8_reg_1253 <= empty_22_fu_585_p2(8 downto 8);
                tmp_9_reg_1258 <= tmp_9_fu_656_p4;
            end if;
        end if;
    end process;
    tmp_s_reg_1182(4 downto 0) <= "00000";
    and_ln4_reg_1288(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln36_fu_345_p2 <= std_logic_vector(unsigned(indvar_flatten29_fu_136) + unsigned(ap_const_lv14_1));
    add_ln37_fu_962_p2 <= std_logic_vector(unsigned(indvar_flatten13_fu_128) + unsigned(ap_const_lv9_1));
    add_ln39_cast_fu_868_p4 <= ((trunc_ln39_reg_1220 & select_ln37_reg_1173) & select_ln8_reg_1164);
    add_ln40_cast_fu_526_p3 <= (trunc_ln40_fu_522_p1 & select_ln8_fu_418_p3);
    add_ln41_cast_fu_544_p3 <= (trunc_ln41_fu_540_p1 & select_ln8_fu_418_p3);
    add_ln42_cast_fu_706_p3 <= (trunc_ln42_fu_702_p1 & select_ln8_reg_1164);
    add_ln43_cast_fu_719_p4 <= ((trunc_ln39_reg_1220 & tmp5_fu_591_p2) & select_ln8_reg_1164);
    add_ln44_1_cast_fu_830_p4 <= ((trunc_ln39_reg_1220 & select_ln37_reg_1173) & add_ln44_fu_825_p2);
    add_ln44_fu_825_p2 <= std_logic_vector(unsigned(select_ln8_reg_1164) + unsigned(ap_const_lv4_1));
    add_ln45_1_cast_fu_849_p4 <= ((trunc_ln39_reg_1220 & select_ln37_reg_1173) & add_ln45_fu_844_p2);
    add_ln45_fu_844_p2 <= std_logic_vector(unsigned(select_ln8_reg_1164) + unsigned(ap_const_lv4_F));
    add_ln48_fu_1032_p2 <= std_logic_vector(unsigned(mul1_fu_1028_p2) + unsigned(mul0_fu_1024_p2));
    and_ln48_1_fu_1053_p2 <= (xor_ln48_1_fu_1047_p2 and sol_0_load_reg_1380);
    and_ln48_fu_1089_p2 <= (xor_ln48_fu_1083_p2 and sol_1_load_reg_1385);
    and_ln4_fu_733_p3 <= (tmp_reg_1187 & ap_const_lv5_0);
    and_ln5_fu_596_p3 <= (tmp_4_reg_1205 & ap_const_lv5_0);
    and_ln6_fu_603_p3 <= (tmp_6_reg_1215 & ap_const_lv5_0);
    and_ln7_fu_386_p2 <= (xor_ln7_fu_374_p2 and icmp_ln38_fu_380_p2);
    and_ln8_fu_740_p3 <= (tmp_8_reg_1253 & ap_const_lv5_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln36_reg_1155)
    begin
        if (((icmp_ln36_reg_1155 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_20_fu_470_p2 <= std_logic_vector(unsigned(tmp2_cast_cast_cast_fu_466_p1) + unsigned(tmp_s_fu_434_p3));
    empty_21_fu_480_p2 <= std_logic_vector(signed(tmp3_cast_fu_476_p1) + signed(tmp_s_fu_434_p3));
    empty_22_fu_585_p2 <= std_logic_vector(unsigned(tmp47_cast_fu_578_p1) + unsigned(j_2_cast18_fu_582_p1));
    icmp_ln36_fu_339_p2 <= "1" when (indvar_flatten29_fu_136 = ap_const_lv14_3138) else "0";
    icmp_ln37_fu_360_p2 <= "1" when (indvar_flatten13_fu_128 = ap_const_lv9_1A4) else "0";
    icmp_ln38_fu_380_p2 <= "1" when (k_fu_120 = ap_const_lv4_F) else "0";
    indvars_iv_next19_dup_fu_406_p2 <= std_logic_vector(unsigned(select_ln7_fu_366_p3) + unsigned(ap_const_lv5_1));
    indvars_iv_next3339_fu_392_p2 <= std_logic_vector(unsigned(i_fu_132) + unsigned(ap_const_lv5_1));
    j_2_cast18_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_reg_1173),11));
    lshr_ln39_1_fu_996_p2 <= std_logic_vector(shift_right(unsigned(orig_1_q0),to_integer(unsigned('0' & zext_ln39_2_fu_993_p1(31-1 downto 0)))));
    lshr_ln39_fu_983_p2 <= std_logic_vector(shift_right(unsigned(orig_0_q0),to_integer(unsigned('0' & zext_ln39_1_fu_980_p1(31-1 downto 0)))));
    lshr_ln40_1_fu_646_p2 <= std_logic_vector(shift_right(unsigned(orig_1_q1),to_integer(unsigned('0' & zext_ln40_2_fu_642_p1(31-1 downto 0)))));
    lshr_ln40_fu_632_p2 <= std_logic_vector(shift_right(unsigned(orig_0_q1),to_integer(unsigned('0' & zext_ln40_1_fu_628_p1(31-1 downto 0)))));
    lshr_ln41_1_fu_683_p2 <= std_logic_vector(shift_right(unsigned(orig_1_q0),to_integer(unsigned('0' & zext_ln41_2_fu_679_p1(31-1 downto 0)))));
    lshr_ln41_fu_669_p2 <= std_logic_vector(shift_right(unsigned(orig_0_q0),to_integer(unsigned('0' & zext_ln41_1_fu_665_p1(31-1 downto 0)))));
    lshr_ln42_1_fu_769_p2 <= std_logic_vector(shift_right(unsigned(orig_1_q0),to_integer(unsigned('0' & zext_ln42_2_fu_765_p1(31-1 downto 0)))));
    lshr_ln42_fu_755_p2 <= std_logic_vector(shift_right(unsigned(orig_0_q0),to_integer(unsigned('0' & zext_ln42_1_fu_751_p1(31-1 downto 0)))));
    lshr_ln43_1_fu_806_p2 <= std_logic_vector(shift_right(unsigned(orig_1_q1),to_integer(unsigned('0' & zext_ln43_2_fu_802_p1(31-1 downto 0)))));
    lshr_ln43_fu_792_p2 <= std_logic_vector(shift_right(unsigned(orig_0_q1),to_integer(unsigned('0' & zext_ln43_1_fu_788_p1(31-1 downto 0)))));
    lshr_ln44_1_fu_908_p2 <= std_logic_vector(shift_right(unsigned(orig_1_q0),to_integer(unsigned('0' & zext_ln44_2_fu_905_p1(31-1 downto 0)))));
    lshr_ln44_fu_895_p2 <= std_logic_vector(shift_right(unsigned(orig_0_q0),to_integer(unsigned('0' & zext_ln44_1_fu_892_p1(31-1 downto 0)))));
    lshr_ln45_1_fu_943_p2 <= std_logic_vector(shift_right(unsigned(orig_1_q1),to_integer(unsigned('0' & zext_ln45_2_fu_940_p1(31-1 downto 0)))));
    lshr_ln45_fu_930_p2 <= std_logic_vector(shift_right(unsigned(orig_0_q1),to_integer(unsigned('0' & zext_ln45_1_fu_927_p1(31-1 downto 0)))));
    or_ln8_fu_412_p2 <= (icmp_ln37_fu_360_p2 or and_ln7_fu_386_p2);

    orig_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, zext_ln41_fu_552_p1, zext_ln42_fu_713_p1, ap_block_pp0_stage2, zext_ln44_fu_838_p1, ap_block_pp0_stage3, zext_ln39_fu_875_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            orig_0_address0 <= zext_ln39_fu_875_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            orig_0_address0 <= zext_ln44_fu_838_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            orig_0_address0 <= zext_ln42_fu_713_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            orig_0_address0 <= zext_ln41_fu_552_p1(12 - 1 downto 0);
        else 
            orig_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    orig_0_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln40_fu_534_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln43_fu_727_p1, ap_block_pp0_stage3, zext_ln45_fu_857_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                orig_0_address1 <= zext_ln45_fu_857_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                orig_0_address1 <= zext_ln43_fu_727_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                orig_0_address1 <= zext_ln40_fu_534_p1(12 - 1 downto 0);
            else 
                orig_0_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            orig_0_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    orig_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            orig_0_ce0 <= ap_const_logic_1;
        else 
            orig_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    orig_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            orig_0_ce1 <= ap_const_logic_1;
        else 
            orig_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    orig_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, zext_ln41_fu_552_p1, zext_ln42_fu_713_p1, ap_block_pp0_stage2, zext_ln44_fu_838_p1, ap_block_pp0_stage3, zext_ln39_fu_875_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            orig_1_address0 <= zext_ln39_fu_875_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            orig_1_address0 <= zext_ln44_fu_838_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            orig_1_address0 <= zext_ln42_fu_713_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            orig_1_address0 <= zext_ln41_fu_552_p1(12 - 1 downto 0);
        else 
            orig_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    orig_1_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln40_fu_534_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln43_fu_727_p1, ap_block_pp0_stage3, zext_ln45_fu_857_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                orig_1_address1 <= zext_ln45_fu_857_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                orig_1_address1 <= zext_ln43_fu_727_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                orig_1_address1 <= zext_ln40_fu_534_p1(12 - 1 downto 0);
            else 
                orig_1_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            orig_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    orig_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            orig_1_ce0 <= ap_const_logic_1;
        else 
            orig_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    orig_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            orig_1_ce1 <= ap_const_logic_1;
        else 
            orig_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln36_fu_398_p3 <= 
        indvars_iv_next3339_fu_392_p2 when (icmp_ln37_fu_360_p2(0) = '1') else 
        i_fu_132;
    select_ln37_1_fu_968_p3 <= 
        ap_const_lv9_1 when (icmp_ln37_reg_1159(0) = '1') else 
        add_ln37_fu_962_p2;
    select_ln37_fu_426_p3 <= 
        indvars_iv_next19_dup_fu_406_p2 when (and_ln7_fu_386_p2(0) = '1') else 
        select_ln7_fu_366_p3;
    select_ln7_fu_366_p3 <= 
        ap_const_lv5_1 when (icmp_ln37_fu_360_p2(0) = '1') else 
        j_fu_124;
    select_ln8_fu_418_p3 <= 
        ap_const_lv4_1 when (or_ln8_fu_412_p2(0) = '1') else 
        k_fu_120;
    shl_ln48_1_fu_1097_p2 <= std_logic_vector(shift_left(unsigned(zext_ln48_1_fu_1094_p1),to_integer(unsigned('0' & zext_ln48_fu_1074_p1(31-1 downto 0)))));
    shl_ln48_2_fu_1041_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln48_2_fu_1038_p1(31-1 downto 0)))));
    shl_ln48_3_fu_1061_p2 <= std_logic_vector(shift_left(unsigned(zext_ln48_3_fu_1058_p1),to_integer(unsigned('0' & zext_ln48_2_fu_1038_p1(31-1 downto 0)))));
    shl_ln48_fu_1077_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln48_fu_1074_p1(31-1 downto 0)))));

    sol_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, sol_0_addr_reg_1360, ap_block_pp0_stage3, zext_ln39_fu_875_p1, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                sol_0_address0 <= sol_0_addr_reg_1360;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                sol_0_address0 <= zext_ln39_fu_875_p1(12 - 1 downto 0);
            else 
                sol_0_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            sol_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sol_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            sol_0_ce0 <= ap_const_logic_1;
        else 
            sol_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sol_0_d0 <= (shl_ln48_3_fu_1061_p2 or and_ln48_1_fu_1053_p2);

    sol_0_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_2_reg_1192_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_2_reg_1192_pp0_iter1_reg = ap_const_lv1_0))) then 
            sol_0_we0 <= ap_const_logic_1;
        else 
            sol_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sol_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, sol_1_addr_reg_1365, ap_block_pp0_stage3, zext_ln39_fu_875_p1, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                sol_1_address0 <= sol_1_addr_reg_1365;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                sol_1_address0 <= zext_ln39_fu_875_p1(12 - 1 downto 0);
            else 
                sol_1_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            sol_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sol_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            sol_1_ce0 <= ap_const_logic_1;
        else 
            sol_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sol_1_d0 <= (shl_ln48_1_fu_1097_p2 or and_ln48_fu_1089_p2);

    sol_1_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_2_reg_1192_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_2_reg_1192_pp0_iter1_reg = ap_const_lv1_1))) then 
            sol_1_we0 <= ap_const_logic_1;
        else 
            sol_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum0_fu_1006_p1 <= lshr_ln39_fu_983_p2(32 - 1 downto 0);
    sum0_fu_1006_p2 <= lshr_ln39_1_fu_996_p2(32 - 1 downto 0);
    tmp2_cast_cast_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_cast_cast_fu_458_p3),10));
    tmp2_cast_cast_fu_458_p3 <= (ap_const_lv1_1 & select_ln37_fu_426_p3);
        tmp3_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_cast_cast_fu_458_p3),10));

    tmp47_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp47_fu_573_p2),11));
    tmp47_fu_573_p2 <= (tmp_s_reg_1182 or ap_const_lv10_1);
    tmp5_fu_591_p2 <= std_logic_vector(unsigned(select_ln37_reg_1173) + unsigned(ap_const_lv5_1F));
    tmp_10_fu_693_p1 <= lshr_ln41_fu_669_p2(32 - 1 downto 0);
    tmp_10_fu_693_p2 <= lshr_ln41_1_fu_683_p2(32 - 1 downto 0);
    tmp_11_fu_779_p1 <= lshr_ln42_fu_755_p2(32 - 1 downto 0);
    tmp_11_fu_779_p2 <= lshr_ln42_1_fu_769_p2(32 - 1 downto 0);
    tmp_12_fu_816_p1 <= lshr_ln43_fu_792_p2(32 - 1 downto 0);
    tmp_12_fu_816_p2 <= lshr_ln43_1_fu_806_p2(32 - 1 downto 0);
    tmp_13_fu_918_p1 <= lshr_ln44_fu_895_p2(32 - 1 downto 0);
    tmp_13_fu_918_p2 <= lshr_ln44_1_fu_908_p2(32 - 1 downto 0);
    tmp_14_fu_953_p1 <= lshr_ln45_fu_930_p2(32 - 1 downto 0);
    tmp_14_fu_953_p2 <= lshr_ln45_1_fu_943_p2(32 - 1 downto 0);
    tmp_9_fu_656_p1 <= lshr_ln40_fu_632_p2(32 - 1 downto 0);
    tmp_9_fu_656_p2 <= lshr_ln40_1_fu_646_p2(32 - 1 downto 0);
    tmp_s_fu_434_p3 <= (select_ln36_fu_398_p3 & ap_const_lv5_0);
    trunc_ln39_fu_518_p1 <= select_ln36_fu_398_p3(3 - 1 downto 0);
    trunc_ln40_fu_522_p1 <= empty_20_fu_470_p2(8 - 1 downto 0);
    trunc_ln41_fu_540_p1 <= empty_21_fu_480_p2(8 - 1 downto 0);
    trunc_ln42_fu_702_p1 <= empty_22_fu_585_p2(8 - 1 downto 0);
    xor_ln48_1_fu_1047_p2 <= (shl_ln48_2_fu_1041_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln48_fu_1083_p2 <= (shl_ln48_fu_1077_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln7_fu_374_p2 <= (icmp_ln37_fu_360_p2 xor ap_const_lv1_1);
    zext_ln39_1_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln4_reg_1288),64));
    zext_ln39_2_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln4_reg_1288),64));
    zext_ln39_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_cast_fu_868_p4),64));
    zext_ln40_1_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln5_fu_596_p3),64));
    zext_ln40_2_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln5_fu_596_p3),64));
    zext_ln40_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_cast_fu_526_p3),64));
    zext_ln41_1_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln6_fu_603_p3),64));
    zext_ln41_2_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln6_fu_603_p3),64));
    zext_ln41_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_cast_fu_544_p3),64));
    zext_ln42_1_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln8_fu_740_p3),64));
    zext_ln42_2_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln8_fu_740_p3),64));
    zext_ln42_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_cast_fu_706_p3),64));
    zext_ln43_1_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln4_fu_733_p3),64));
    zext_ln43_2_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln4_fu_733_p3),64));
    zext_ln43_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_cast_fu_719_p4),64));
    zext_ln44_1_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln4_reg_1288),64));
    zext_ln44_2_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln4_reg_1288),64));
    zext_ln44_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_1_cast_fu_830_p4),64));
    zext_ln45_1_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln4_reg_1288),64));
    zext_ln45_2_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln4_reg_1288),64));
    zext_ln45_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_1_cast_fu_849_p4),64));
    zext_ln48_1_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_reg_1390),64));
    zext_ln48_2_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln4_reg_1288),64));
    zext_ln48_3_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_reg_1390),64));
    zext_ln48_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln4_reg_1288),64));
end behav;
