-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stencil3d_stencil3d_Pipeline_row_bound_height_row_bound_col is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sol_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sol_0_ce0 : OUT STD_LOGIC;
    sol_0_we0 : OUT STD_LOGIC;
    sol_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sol_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sol_0_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sol_0_ce1 : OUT STD_LOGIC;
    sol_0_we1 : OUT STD_LOGIC;
    sol_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sol_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    orig_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_0_ce0 : OUT STD_LOGIC;
    orig_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    orig_0_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_0_ce1 : OUT STD_LOGIC;
    orig_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    orig_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_1_ce0 : OUT STD_LOGIC;
    orig_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    orig_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_1_ce1 : OUT STD_LOGIC;
    orig_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    sol_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sol_1_ce0 : OUT STD_LOGIC;
    sol_1_we0 : OUT STD_LOGIC;
    sol_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sol_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sol_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sol_1_ce1 : OUT STD_LOGIC;
    sol_1_we1 : OUT STD_LOGIC;
    sol_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sol_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of stencil3d_stencil3d_Pipeline_row_bound_height_row_bound_col is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_384 : STD_LOGIC_VECTOR (9 downto 0) := "1110000100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln27_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln27_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln27_fu_216_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln27_reg_564 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_238_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_569 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_575 : STD_LOGIC_VECTOR (0 downto 0);
    signal sol_0_addr_reg_590 : STD_LOGIC_VECTOR (11 downto 0);
    signal sol_1_addr_reg_595 : STD_LOGIC_VECTOR (11 downto 0);
    signal sol_0_addr_1_reg_610 : STD_LOGIC_VECTOR (11 downto 0);
    signal sol_1_addr_1_reg_615 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln2_fu_300_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln2_reg_620 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_s_fu_335_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_372_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln29_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln30_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_66 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln28_fu_381_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_70 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln27_1_fu_230_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten6_fu_74 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln27_fu_198_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten6_load : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln28_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_1_fu_224_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln29_fu_254_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_258_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln30_fu_276_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln29_1_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln29_fu_311_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_2_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln29_1_fu_325_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln30_1_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln30_fu_348_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_2_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln30_1_fu_362_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln29_5_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln29_2_fu_394_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln29_1_fu_400_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_6_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln29_1_fu_406_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln29_3_fu_415_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_3_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln29_fu_431_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln29_fu_437_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_4_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln29_fu_443_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln29_1_fu_452_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_5_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln30_2_fu_468_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln30_1_fu_474_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_6_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln30_1_fu_480_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln30_3_fu_489_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_3_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln30_fu_505_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln30_fu_511_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_4_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln30_fu_517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln30_1_fu_526_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stencil3d_mux_21_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stencil3d_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_21_32_1_1_U15 : component stencil3d_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_s_fu_335_p1,
        din1 => tmp_s_fu_335_p2,
        din2 => tmp_reg_569,
        dout => tmp_s_fu_335_p4);

    mux_21_32_1_1_U16 : component stencil3d_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_2_fu_372_p1,
        din1 => tmp_2_fu_372_p2,
        din2 => tmp_reg_569,
        dout => tmp_2_fu_372_p4);

    flow_control_loop_pipe_sequential_init_U : component stencil3d_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln27_fu_192_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_70 <= select_ln27_1_fu_230_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_70 <= ap_const_lv5_1;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten6_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln27_fu_192_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten6_fu_74 <= add_ln27_fu_198_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten6_fu_74 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                j_fu_66 <= ap_const_lv5_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln27_reg_560 = ap_const_lv1_0))) then 
                j_fu_66 <= add_ln28_fu_381_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln27_reg_560 = ap_const_lv1_0))) then
                    and_ln2_reg_620(5) <= and_ln2_fu_300_p3(5);
                tmp_2_reg_634 <= tmp_2_fu_372_p4;
                tmp_s_reg_628 <= tmp_s_fu_335_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln27_reg_560 <= icmp_ln27_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_192_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln27_reg_564 <= select_ln27_fu_216_p3;
                tmp_1_reg_575 <= select_ln27_1_fu_230_p3(3 downto 3);
                tmp_reg_569 <= select_ln27_1_fu_230_p3(4 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_192_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_238_p3 = ap_const_lv1_0))) then
                    sol_0_addr_1_reg_610(11 downto 4) <= zext_ln30_fu_282_p1(12 - 1 downto 0)(11 downto 4);
                    sol_0_addr_reg_590(11 downto 4) <= zext_ln29_fu_268_p1(12 - 1 downto 0)(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_192_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_238_p3 = ap_const_lv1_1))) then
                    sol_1_addr_1_reg_615(11 downto 4) <= zext_ln30_fu_282_p1(12 - 1 downto 0)(11 downto 4);
                    sol_1_addr_reg_595(11 downto 4) <= zext_ln29_fu_268_p1(12 - 1 downto 0)(11 downto 4);
            end if;
        end if;
    end process;
    sol_0_addr_reg_590(3 downto 0) <= "0000";
    sol_1_addr_reg_595(3 downto 0) <= "0000";
    sol_0_addr_1_reg_610(3 downto 0) <= "1111";
    sol_1_addr_1_reg_615(3 downto 0) <= "1111";
    and_ln2_reg_620(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage1_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln27_1_fu_224_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv5_1));
    add_ln27_fu_198_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten6_load) + unsigned(ap_const_lv10_1));
    add_ln28_fu_381_p2 <= std_logic_vector(unsigned(select_ln27_reg_564) + unsigned(ap_const_lv5_1));
    and_ln29_1_fu_406_p2 <= (xor_ln29_1_fu_400_p2 and sol_0_q1);
    and_ln29_fu_443_p2 <= (xor_ln29_fu_437_p2 and sol_1_q1);
    and_ln2_fu_300_p3 <= (tmp_1_reg_575 & ap_const_lv5_0);
    and_ln30_1_fu_480_p2 <= (xor_ln30_1_fu_474_p2 and sol_0_q0);
    and_ln30_fu_517_p2 <= (xor_ln30_fu_511_p2 and sol_1_q0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln27_fu_192_p2)
    begin
        if (((icmp_ln27_fu_192_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv5_1;
        else 
            ap_sig_allocacmp_i_load <= i_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten6_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten6_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten6_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten6_load <= indvar_flatten6_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_66, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv5_1;
        else 
            ap_sig_allocacmp_j_load <= j_fu_66;
        end if; 
    end process;

    icmp_ln27_fu_192_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten6_load = ap_const_lv10_384) else "0";
    icmp_ln28_fu_210_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv5_1F) else "0";
    lshr_ln29_1_fu_325_p2 <= std_logic_vector(shift_right(unsigned(orig_1_q1),to_integer(unsigned('0' & zext_ln29_2_fu_321_p1(31-1 downto 0)))));
    lshr_ln29_fu_311_p2 <= std_logic_vector(shift_right(unsigned(orig_0_q1),to_integer(unsigned('0' & zext_ln29_1_fu_307_p1(31-1 downto 0)))));
    lshr_ln30_1_fu_362_p2 <= std_logic_vector(shift_right(unsigned(orig_1_q0),to_integer(unsigned('0' & zext_ln30_2_fu_358_p1(31-1 downto 0)))));
    lshr_ln30_fu_348_p2 <= std_logic_vector(shift_right(unsigned(orig_0_q0),to_integer(unsigned('0' & zext_ln30_1_fu_344_p1(31-1 downto 0)))));
    or_ln30_fu_276_p2 <= (shl_ln_fu_258_p4 or ap_const_lv12_F);
    orig_0_address0 <= zext_ln30_fu_282_p1(12 - 1 downto 0);
    orig_0_address1 <= zext_ln29_fu_268_p1(12 - 1 downto 0);

    orig_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            orig_0_ce0 <= ap_const_logic_1;
        else 
            orig_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    orig_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            orig_0_ce1 <= ap_const_logic_1;
        else 
            orig_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    orig_1_address0 <= zext_ln30_fu_282_p1(12 - 1 downto 0);
    orig_1_address1 <= zext_ln29_fu_268_p1(12 - 1 downto 0);

    orig_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            orig_1_ce0 <= ap_const_logic_1;
        else 
            orig_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    orig_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            orig_1_ce1 <= ap_const_logic_1;
        else 
            orig_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln27_1_fu_230_p3 <= 
        add_ln27_1_fu_224_p2 when (icmp_ln28_fu_210_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln27_fu_216_p3 <= 
        ap_const_lv5_1 when (icmp_ln28_fu_210_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    shl_ln29_1_fu_452_p2 <= std_logic_vector(shift_left(unsigned(zext_ln29_4_fu_449_p1),to_integer(unsigned('0' & zext_ln29_3_fu_428_p1(31-1 downto 0)))));
    shl_ln29_2_fu_394_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln29_5_fu_391_p1(31-1 downto 0)))));
    shl_ln29_3_fu_415_p2 <= std_logic_vector(shift_left(unsigned(zext_ln29_6_fu_412_p1),to_integer(unsigned('0' & zext_ln29_5_fu_391_p1(31-1 downto 0)))));
    shl_ln29_fu_431_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln29_3_fu_428_p1(31-1 downto 0)))));
    shl_ln30_1_fu_526_p2 <= std_logic_vector(shift_left(unsigned(zext_ln30_4_fu_523_p1),to_integer(unsigned('0' & zext_ln30_3_fu_502_p1(31-1 downto 0)))));
    shl_ln30_2_fu_468_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln30_5_fu_465_p1(31-1 downto 0)))));
    shl_ln30_3_fu_489_p2 <= std_logic_vector(shift_left(unsigned(zext_ln30_6_fu_486_p1),to_integer(unsigned('0' & zext_ln30_5_fu_465_p1(31-1 downto 0)))));
    shl_ln30_fu_505_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln30_3_fu_502_p1(31-1 downto 0)))));
    shl_ln_fu_258_p4 <= ((trunc_ln29_fu_254_p1 & select_ln27_fu_216_p3) & ap_const_lv4_0);
    sol_0_address0 <= sol_0_addr_1_reg_610;
    sol_0_address1 <= sol_0_addr_reg_590;

    sol_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sol_0_ce0 <= ap_const_logic_1;
        else 
            sol_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sol_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sol_0_ce1 <= ap_const_logic_1;
        else 
            sol_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sol_0_d0 <= (shl_ln30_3_fu_489_p2 or and_ln30_1_fu_480_p2);
    sol_0_d1 <= (shl_ln29_3_fu_415_p2 or and_ln29_1_fu_406_p2);

    sol_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, tmp_reg_569)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_569 = ap_const_lv1_0))) then 
            sol_0_we0 <= ap_const_logic_1;
        else 
            sol_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sol_0_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, tmp_reg_569)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_569 = ap_const_lv1_0))) then 
            sol_0_we1 <= ap_const_logic_1;
        else 
            sol_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sol_1_address0 <= sol_1_addr_1_reg_615;
    sol_1_address1 <= sol_1_addr_reg_595;

    sol_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sol_1_ce0 <= ap_const_logic_1;
        else 
            sol_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sol_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sol_1_ce1 <= ap_const_logic_1;
        else 
            sol_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sol_1_d0 <= (shl_ln30_1_fu_526_p2 or and_ln30_fu_517_p2);
    sol_1_d1 <= (shl_ln29_1_fu_452_p2 or and_ln29_fu_443_p2);

    sol_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, tmp_reg_569)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_569 = ap_const_lv1_1))) then 
            sol_1_we0 <= ap_const_logic_1;
        else 
            sol_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sol_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, tmp_reg_569)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_569 = ap_const_lv1_1))) then 
            sol_1_we1 <= ap_const_logic_1;
        else 
            sol_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_372_p1 <= lshr_ln30_fu_348_p2(32 - 1 downto 0);
    tmp_2_fu_372_p2 <= lshr_ln30_1_fu_362_p2(32 - 1 downto 0);
    tmp_fu_238_p3 <= select_ln27_1_fu_230_p3(4 downto 4);
    tmp_s_fu_335_p1 <= lshr_ln29_fu_311_p2(32 - 1 downto 0);
    tmp_s_fu_335_p2 <= lshr_ln29_1_fu_325_p2(32 - 1 downto 0);
    trunc_ln29_fu_254_p1 <= select_ln27_1_fu_230_p3(3 - 1 downto 0);
    xor_ln29_1_fu_400_p2 <= (shl_ln29_2_fu_394_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln29_fu_437_p2 <= (shl_ln29_fu_431_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln30_1_fu_474_p2 <= (shl_ln30_2_fu_468_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln30_fu_511_p2 <= (shl_ln30_fu_505_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    zext_ln29_1_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln2_fu_300_p3),64));
    zext_ln29_2_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln2_fu_300_p3),64));
    zext_ln29_3_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln2_reg_620),64));
    zext_ln29_4_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_628),64));
    zext_ln29_5_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln2_reg_620),64));
    zext_ln29_6_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_628),64));
    zext_ln29_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_258_p4),64));
    zext_ln30_1_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln2_fu_300_p3),64));
    zext_ln30_2_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln2_fu_300_p3),64));
    zext_ln30_3_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln2_reg_620),64));
    zext_ln30_4_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_634),64));
    zext_ln30_5_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln2_reg_620),64));
    zext_ln30_6_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_634),64));
    zext_ln30_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln30_fu_276_p2),64));
end behav;
