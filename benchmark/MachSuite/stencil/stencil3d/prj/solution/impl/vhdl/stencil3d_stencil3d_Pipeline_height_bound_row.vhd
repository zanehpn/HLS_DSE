-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stencil3d_stencil3d_Pipeline_height_bound_row is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tmp_52 : IN STD_LOGIC_VECTOR (8 downto 0);
    orig_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_0_ce0 : OUT STD_LOGIC;
    orig_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sol_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sol_0_ce0 : OUT STD_LOGIC;
    sol_0_we0 : OUT STD_LOGIC;
    sol_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sol_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln16 : IN STD_LOGIC_VECTOR (8 downto 0);
    orig_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    orig_1_ce0 : OUT STD_LOGIC;
    orig_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sol_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sol_1_ce0 : OUT STD_LOGIC;
    sol_1_we0 : OUT STD_LOGIC;
    sol_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sol_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sol_1_ce1 : OUT STD_LOGIC;
    sol_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of stencil3d_stencil3d_Pipeline_height_bound_row is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln16_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln16_cast_fu_140_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln16_cast_reg_355 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln16_reg_360 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal sol_0_addr_reg_369 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_reg_374 : STD_LOGIC_VECTOR (0 downto 0);
    signal sol_1_addr_reg_384 : STD_LOGIC_VECTOR (11 downto 0);
    signal addr_cmp_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_fu_319_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln18_reg_395 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln17_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln18_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg_fu_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_64 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_fu_68 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_fu_168_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_1_fu_174_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln17_fu_178_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln_fu_189_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln18_fu_197_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln18_fu_210_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln17_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln1_fu_256_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln18_1_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln18_fu_267_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_2_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln18_fu_291_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_select_fu_280_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln18_fu_297_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln18_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln18_3_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln18_fu_303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln18_1_fu_313_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stencil3d_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component stencil3d_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    k_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                k_fu_68 <= ap_const_lv5_0;
            elsif (((icmp_ln16_fu_162_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                k_fu_68 <= add_ln16_fu_168_p2;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                reuse_addr_reg_fu_60 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((icmp_ln16_fu_162_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reuse_addr_reg_fu_60 <= zext_ln18_fu_214_p1;
            end if; 
        end if;
    end process;

    reuse_reg_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                reuse_reg_fu_64 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reuse_reg_fu_64 <= or_ln18_reg_395;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_162_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                addr_cmp_reg_390 <= addr_cmp_fu_223_p2;
                    sol_0_addr_reg_369(8 downto 0) <= zext_ln17_fu_183_p1(12 - 1 downto 0)(8 downto 0);
                sol_1_addr_reg_384 <= zext_ln18_fu_214_p1(12 - 1 downto 0);
                tmp_reg_374 <= add_ln18_fu_197_p2(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln16_reg_360 <= icmp_ln16_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_360 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln18_reg_395 <= or_ln18_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln16_cast_reg_355(8 downto 0) <= zext_ln16_cast_fu_140_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln16_cast_reg_355(9) <= '0';
    sol_0_addr_reg_369(11 downto 9) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln16_fu_168_p2 <= std_logic_vector(unsigned(k_fu_68) + unsigned(ap_const_lv5_1));
    add_ln17_fu_178_p2 <= std_logic_vector(unsigned(zext_ln16_1_fu_174_p1) + unsigned(tmp_52));
    add_ln18_fu_197_p2 <= std_logic_vector(unsigned(or_ln_fu_189_p3) + unsigned(zext_ln16_cast_reg_355));
    addr_cmp_fu_223_p2 <= "1" when (reuse_addr_reg_fu_60 = zext_ln18_fu_214_p1) else "0";
    and_ln18_fu_303_p2 <= (xor_ln18_fu_297_p2 and reuse_select_fu_280_p3);
    and_ln1_fu_256_p3 <= (tmp_reg_374 & ap_const_lv5_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln16_fu_162_p2)
    begin
        if (((icmp_ln16_fu_162_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln16_fu_162_p2 <= "1" when (k_fu_68 = ap_const_lv5_10) else "0";
    lshr_ln18_fu_267_p2 <= std_logic_vector(shift_right(unsigned(orig_1_q0),to_integer(unsigned('0' & zext_ln18_1_fu_263_p1(31-1 downto 0)))));
    or_ln18_fu_319_p2 <= (shl_ln18_1_fu_313_p2 or and_ln18_fu_303_p2);
    or_ln_fu_189_p3 <= (ap_const_lv5_10 & k_fu_68);
    orig_0_address0 <= zext_ln17_fu_183_p1(12 - 1 downto 0);

    orig_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            orig_0_ce0 <= ap_const_logic_1;
        else 
            orig_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    orig_1_address0 <= zext_ln18_fu_214_p1(12 - 1 downto 0);

    orig_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            orig_1_ce0 <= ap_const_logic_1;
        else 
            orig_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    reuse_select_fu_280_p3 <= 
        reuse_reg_fu_64 when (addr_cmp_reg_390(0) = '1') else 
        sol_1_q1;
        sext_ln18_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_fu_197_p2),12));

    shl_ln18_1_fu_313_p2 <= std_logic_vector(shift_left(unsigned(zext_ln18_3_fu_309_p1),to_integer(unsigned('0' & zext_ln18_2_fu_287_p1(31-1 downto 0)))));
    shl_ln18_fu_291_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFF),to_integer(unsigned('0' & zext_ln18_2_fu_287_p1(31-1 downto 0)))));

    sol_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, sol_0_addr_reg_369, zext_ln17_fu_183_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sol_0_address0 <= sol_0_addr_reg_369;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sol_0_address0 <= zext_ln17_fu_183_p1(12 - 1 downto 0);
        else 
            sol_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sol_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sol_0_ce0 <= ap_const_logic_1;
        else 
            sol_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sol_0_d0 <= (sol_0_q0(63 downto 32) & trunc_ln17_fu_239_p1);

    sol_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln16_reg_360)
    begin
        if (((icmp_ln16_reg_360 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sol_0_we0 <= ap_const_logic_1;
        else 
            sol_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sol_1_address0 <= sol_1_addr_reg_384;
    sol_1_address1 <= zext_ln18_fu_214_p1(12 - 1 downto 0);

    sol_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sol_1_ce0 <= ap_const_logic_1;
        else 
            sol_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sol_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sol_1_ce1 <= ap_const_logic_1;
        else 
            sol_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sol_1_d0 <= or_ln18_reg_395;

    sol_1_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sol_1_we0 <= ap_const_logic_1;
        else 
            sol_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln17_fu_239_p1 <= orig_0_q0(32 - 1 downto 0);
    trunc_ln18_fu_273_p1 <= lshr_ln18_fu_267_p2(32 - 1 downto 0);
    xor_ln18_fu_297_p2 <= (shl_ln18_fu_291_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    zext_ln16_1_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_68),9));
    zext_ln16_cast_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln16),10));
    zext_ln17_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_fu_178_p2),64));
    zext_ln18_1_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln1_fu_256_p3),64));
    zext_ln18_2_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln1_fu_256_p3),64));
    zext_ln18_3_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln18_fu_273_p1),64));
    zext_ln18_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_fu_210_p1),64));
end behav;
