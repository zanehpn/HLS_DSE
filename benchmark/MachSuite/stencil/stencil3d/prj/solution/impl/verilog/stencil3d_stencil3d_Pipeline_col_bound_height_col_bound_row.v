// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stencil3d_stencil3d_Pipeline_col_bound_height_col_bound_row (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sol_0_address0,
        sol_0_ce0,
        sol_0_we0,
        sol_0_d0,
        sol_0_q0,
        orig_0_address0,
        orig_0_ce0,
        orig_0_q0,
        orig_0_address1,
        orig_0_ce1,
        orig_0_q1,
        orig_1_address0,
        orig_1_ce0,
        orig_1_q0,
        orig_1_address1,
        orig_1_ce1,
        orig_1_q1,
        sol_1_address0,
        sol_1_ce0,
        sol_1_we0,
        sol_1_d0,
        sol_1_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] sol_0_address0;
output   sol_0_ce0;
output   sol_0_we0;
output  [63:0] sol_0_d0;
input  [63:0] sol_0_q0;
output  [11:0] orig_0_address0;
output   orig_0_ce0;
input  [63:0] orig_0_q0;
output  [11:0] orig_0_address1;
output   orig_0_ce1;
input  [63:0] orig_0_q1;
output  [11:0] orig_1_address0;
output   orig_1_ce0;
input  [63:0] orig_1_q0;
output  [11:0] orig_1_address1;
output   orig_1_ce1;
input  [63:0] orig_1_q1;
output  [11:0] sol_1_address0;
output   sol_1_ce0;
output   sol_1_we0;
output  [63:0] sol_1_d0;
input  [63:0] sol_1_q0;

reg ap_idle;
reg[11:0] sol_0_address0;
reg sol_0_ce0;
reg sol_0_we0;
reg[63:0] sol_0_d0;
reg orig_0_ce0;
reg orig_0_ce1;
reg orig_1_ce0;
reg orig_1_ce1;
reg[11:0] sol_1_address0;
reg sol_1_ce0;
reg sol_1_we0;
reg[63:0] sol_1_d0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln21_fu_200_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln21_reg_648;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln21_fu_224_p3;
reg   [4:0] select_ln21_reg_652;
wire   [0:0] tmp_fu_268_p3;
reg   [0:0] tmp_reg_657;
reg   [0:0] tmp_9_reg_662;
reg   [11:0] sol_0_addr_1_reg_677;
reg   [11:0] sol_1_addr_1_reg_682;
reg   [1:0] lshr_ln_reg_687;
reg   [0:0] tmp_10_reg_692;
wire   [0:0] tmp_11_fu_366_p3;
reg   [0:0] tmp_11_reg_707;
reg   [11:0] sol_0_addr_reg_711;
reg   [11:0] sol_1_addr_reg_716;
wire   [5:0] and_ln_fu_384_p3;
reg   [5:0] and_ln_reg_721;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] tmp_8_fu_419_p4;
reg   [31:0] tmp_8_reg_727;
wire   [5:0] and_ln3_fu_428_p3;
reg   [5:0] and_ln3_reg_733;
wire   [31:0] trunc_ln24_2_fu_445_p1;
reg   [31:0] trunc_ln24_2_reg_740;
reg   [63:0] orig_1_load_3_reg_745;
wire   [31:0] tmp_15_fu_535_p4;
reg   [31:0] tmp_15_reg_750;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln23_fu_306_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln24_2_fu_358_p1;
reg   [4:0] k_1_fu_82;
wire   [4:0] add_ln22_fu_543_p2;
wire    ap_block_pp0_stage3_11001;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_k_1_load;
reg   [4:0] i_fu_86;
wire   [4:0] select_ln21_1_fu_238_p3;
reg   [4:0] ap_sig_allocacmp_i_load;
reg   [8:0] indvar_flatten_fu_90;
wire   [8:0] add_ln21_fu_206_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire    ap_block_pp0_stage1;
wire   [63:0] or_ln23_1_fu_479_p2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire   [63:0] or_ln24_1_fu_583_p2;
wire   [63:0] or_ln23_fu_516_p2;
wire   [63:0] or_ln24_fu_620_p2;
wire   [0:0] icmp_ln22_fu_218_p2;
wire   [4:0] add_ln21_1_fu_232_p2;
wire   [13:0] tmp_s_fu_250_p3;
wire   [13:0] empty_23_fu_258_p2;
wire   [2:0] trunc_ln23_fu_292_p1;
wire   [11:0] add_ln23_cast9_fu_296_p4;
wire   [14:0] zext_ln22_1_fu_246_p1;
wire   [14:0] zext_ln22_fu_264_p1;
wire   [11:0] zext_ln24_1_fu_318_p1;
wire   [11:0] trunc_ln24_1_fu_288_p1;
wire   [12:0] zext_ln24_fu_314_p1;
wire   [12:0] trunc_ln24_fu_284_p1;
wire   [14:0] add_ln24_fu_322_p2;
wire   [12:0] add_ln24_2_fu_334_p2;
wire   [11:0] add_ln24_1_fu_328_p2;
wire   [63:0] zext_ln23_1_fu_391_p1;
wire   [63:0] lshr_ln23_fu_395_p2;
wire   [63:0] zext_ln23_2_fu_405_p1;
wire   [63:0] lshr_ln23_1_fu_409_p2;
wire   [31:0] tmp_8_fu_419_p1;
wire   [31:0] tmp_8_fu_419_p2;
wire   [63:0] zext_ln24_3_fu_435_p1;
wire   [63:0] lshr_ln24_fu_439_p2;
wire   [63:0] zext_ln23_5_fu_449_p1;
wire   [63:0] shl_ln23_2_fu_452_p2;
wire   [63:0] xor_ln23_1_fu_458_p2;
wire   [63:0] zext_ln23_6_fu_470_p1;
wire   [63:0] and_ln23_1_fu_464_p2;
wire   [63:0] shl_ln23_3_fu_473_p2;
wire   [63:0] zext_ln23_3_fu_486_p1;
wire   [63:0] shl_ln23_fu_489_p2;
wire   [63:0] xor_ln23_fu_495_p2;
wire   [63:0] zext_ln23_4_fu_507_p1;
wire   [63:0] and_ln23_fu_501_p2;
wire   [63:0] shl_ln23_1_fu_510_p2;
wire   [63:0] zext_ln24_4_fu_523_p1;
wire   [63:0] lshr_ln24_1_fu_526_p2;
wire   [31:0] tmp_15_fu_535_p2;
wire   [63:0] zext_ln24_7_fu_553_p1;
wire   [63:0] shl_ln24_2_fu_556_p2;
wire   [63:0] xor_ln24_1_fu_562_p2;
wire   [63:0] zext_ln24_8_fu_574_p1;
wire   [63:0] and_ln24_1_fu_568_p2;
wire   [63:0] shl_ln24_3_fu_577_p2;
wire   [63:0] zext_ln24_5_fu_590_p1;
wire   [63:0] shl_ln24_fu_593_p2;
wire   [63:0] xor_ln24_fu_599_p2;
wire   [63:0] zext_ln24_6_fu_611_p1;
wire   [63:0] and_ln24_fu_605_p2;
wire   [63:0] shl_ln24_1_fu_614_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

stencil3d_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U7(
    .din0(tmp_8_fu_419_p1),
    .din1(tmp_8_fu_419_p2),
    .din2(tmp_reg_657),
    .dout(tmp_8_fu_419_p4)
);

stencil3d_mux_22_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_22_32_1_1_U8(
    .din0(trunc_ln24_2_reg_740),
    .din1(tmp_15_fu_535_p2),
    .din2(lshr_ln_reg_687),
    .dout(tmp_15_fu_535_p4)
);

stencil3d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln21_fu_200_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_86 <= select_ln21_1_fu_238_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_86 <= 5'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln21_fu_200_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_90 <= add_ln21_fu_206_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_90 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_1_fu_82 <= 5'd0;
    end else if (((icmp_ln21_reg_648 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        k_1_fu_82 <= add_ln22_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_648 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        and_ln3_reg_733[5] <= and_ln3_fu_428_p3[5];
        and_ln_reg_721[5] <= and_ln_fu_384_p3[5];
        tmp_8_reg_727 <= tmp_8_fu_419_p4;
        trunc_ln24_2_reg_740 <= trunc_ln24_2_fu_445_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln21_reg_648 <= icmp_ln21_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln_reg_687 <= {{add_ln24_fu_322_p2[14:13]}};
        select_ln21_reg_652 <= select_ln21_fu_224_p3;
        tmp_10_reg_692 <= add_ln24_2_fu_334_p2[32'd12];
        tmp_11_reg_707 <= add_ln24_fu_322_p2[32'd13];
        tmp_9_reg_662 <= select_ln21_1_fu_238_p3[32'd3];
        tmp_reg_657 <= select_ln21_1_fu_238_p3[32'd4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_648 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        orig_1_load_3_reg_745 <= orig_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_268_p3 == 1'd0))) begin
        sol_0_addr_1_reg_677[4 : 0] <= zext_ln23_fu_306_p1[4 : 0];
sol_0_addr_1_reg_677[11 : 9] <= zext_ln23_fu_306_p1[11 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_11_fu_366_p3 == 1'd0))) begin
        sol_0_addr_reg_711 <= zext_ln24_2_fu_358_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_268_p3 == 1'd1))) begin
        sol_1_addr_1_reg_682[4 : 0] <= zext_ln23_fu_306_p1[4 : 0];
sol_1_addr_1_reg_682[11 : 9] <= zext_ln23_fu_306_p1[11 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_11_fu_366_p3 == 1'd1))) begin
        sol_1_addr_reg_716 <= zext_ln24_2_fu_358_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_648 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_15_reg_750 <= tmp_15_fu_535_p4;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_200_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 5'd1;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_1_load = 5'd0;
    end else begin
        ap_sig_allocacmp_k_1_load = k_1_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_0_ce0 = 1'b1;
    end else begin
        orig_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_0_ce1 = 1'b1;
    end else begin
        orig_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_1_ce0 = 1'b1;
    end else begin
        orig_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_1_ce1 = 1'b1;
    end else begin
        orig_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sol_0_address0 = sol_0_addr_reg_711;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        sol_0_address0 = sol_0_addr_1_reg_677;
    end else begin
        sol_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        sol_0_ce0 = 1'b1;
    end else begin
        sol_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sol_0_d0 = or_ln24_1_fu_583_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sol_0_d0 = or_ln23_1_fu_479_p2;
    end else begin
        sol_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_11_reg_707 == 1'd0)) | ((icmp_ln21_reg_648 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_reg_657 == 1'd0)))) begin
        sol_0_we0 = 1'b1;
    end else begin
        sol_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sol_1_address0 = sol_1_addr_reg_716;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        sol_1_address0 = sol_1_addr_1_reg_682;
    end else begin
        sol_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        sol_1_ce0 = 1'b1;
    end else begin
        sol_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sol_1_d0 = or_ln24_fu_620_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sol_1_d0 = or_ln23_fu_516_p2;
    end else begin
        sol_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_11_reg_707 == 1'd1)) | ((icmp_ln21_reg_648 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_reg_657 == 1'd1)))) begin
        sol_1_we0 = 1'b1;
    end else begin
        sol_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_1_fu_232_p2 = (ap_sig_allocacmp_i_load + 5'd1);

assign add_ln21_fu_206_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln22_fu_543_p2 = (select_ln21_reg_652 + 5'd1);

assign add_ln23_cast9_fu_296_p4 = {{{trunc_ln23_fu_292_p1}, {4'd0}}, {select_ln21_fu_224_p3}};

assign add_ln24_1_fu_328_p2 = (zext_ln24_1_fu_318_p1 + trunc_ln24_1_fu_288_p1);

assign add_ln24_2_fu_334_p2 = (zext_ln24_fu_314_p1 + trunc_ln24_fu_284_p1);

assign add_ln24_fu_322_p2 = (zext_ln22_1_fu_246_p1 + zext_ln22_fu_264_p1);

assign and_ln23_1_fu_464_p2 = (xor_ln23_1_fu_458_p2 & sol_0_q0);

assign and_ln23_fu_501_p2 = (xor_ln23_fu_495_p2 & sol_1_q0);

assign and_ln24_1_fu_568_p2 = (xor_ln24_1_fu_562_p2 & sol_0_q0);

assign and_ln24_fu_605_p2 = (xor_ln24_fu_599_p2 & sol_1_q0);

assign and_ln3_fu_428_p3 = {{tmp_10_reg_692}, {5'd0}};

assign and_ln_fu_384_p3 = {{tmp_9_reg_662}, {5'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_23_fu_258_p2 = (tmp_s_fu_250_p3 | 14'd496);

assign icmp_ln21_fu_200_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd480) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_218_p2 = ((ap_sig_allocacmp_k_1_load == 5'd16) ? 1'b1 : 1'b0);

assign lshr_ln23_1_fu_409_p2 = orig_1_q1 >> zext_ln23_2_fu_405_p1;

assign lshr_ln23_fu_395_p2 = orig_0_q1 >> zext_ln23_1_fu_391_p1;

assign lshr_ln24_1_fu_526_p2 = orig_1_load_3_reg_745 >> zext_ln24_4_fu_523_p1;

assign lshr_ln24_fu_439_p2 = orig_0_q0 >> zext_ln24_3_fu_435_p1;

assign or_ln23_1_fu_479_p2 = (shl_ln23_3_fu_473_p2 | and_ln23_1_fu_464_p2);

assign or_ln23_fu_516_p2 = (shl_ln23_1_fu_510_p2 | and_ln23_fu_501_p2);

assign or_ln24_1_fu_583_p2 = (shl_ln24_3_fu_577_p2 | and_ln24_1_fu_568_p2);

assign or_ln24_fu_620_p2 = (shl_ln24_1_fu_614_p2 | and_ln24_fu_605_p2);

assign orig_0_address0 = zext_ln24_2_fu_358_p1;

assign orig_0_address1 = zext_ln23_fu_306_p1;

assign orig_1_address0 = zext_ln24_2_fu_358_p1;

assign orig_1_address1 = zext_ln23_fu_306_p1;

assign select_ln21_1_fu_238_p3 = ((icmp_ln22_fu_218_p2[0:0] == 1'b1) ? add_ln21_1_fu_232_p2 : ap_sig_allocacmp_i_load);

assign select_ln21_fu_224_p3 = ((icmp_ln22_fu_218_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_k_1_load);

assign shl_ln23_1_fu_510_p2 = zext_ln23_4_fu_507_p1 << zext_ln23_3_fu_486_p1;

assign shl_ln23_2_fu_452_p2 = 64'd4294967295 << zext_ln23_5_fu_449_p1;

assign shl_ln23_3_fu_473_p2 = zext_ln23_6_fu_470_p1 << zext_ln23_5_fu_449_p1;

assign shl_ln23_fu_489_p2 = 64'd4294967295 << zext_ln23_3_fu_486_p1;

assign shl_ln24_1_fu_614_p2 = zext_ln24_6_fu_611_p1 << zext_ln24_5_fu_590_p1;

assign shl_ln24_2_fu_556_p2 = 64'd4294967295 << zext_ln24_7_fu_553_p1;

assign shl_ln24_3_fu_577_p2 = zext_ln24_8_fu_574_p1 << zext_ln24_7_fu_553_p1;

assign shl_ln24_fu_593_p2 = 64'd4294967295 << zext_ln24_5_fu_590_p1;

assign tmp_11_fu_366_p3 = add_ln24_fu_322_p2[32'd13];

assign tmp_15_fu_535_p2 = lshr_ln24_1_fu_526_p2[31:0];

assign tmp_8_fu_419_p1 = lshr_ln23_fu_395_p2[31:0];

assign tmp_8_fu_419_p2 = lshr_ln23_1_fu_409_p2[31:0];

assign tmp_fu_268_p3 = select_ln21_1_fu_238_p3[32'd4];

assign tmp_s_fu_250_p3 = {{select_ln21_1_fu_238_p3}, {9'd0}};

assign trunc_ln23_fu_292_p1 = select_ln21_1_fu_238_p3[2:0];

assign trunc_ln24_1_fu_288_p1 = empty_23_fu_258_p2[11:0];

assign trunc_ln24_2_fu_445_p1 = lshr_ln24_fu_439_p2[31:0];

assign trunc_ln24_fu_284_p1 = empty_23_fu_258_p2[12:0];

assign xor_ln23_1_fu_458_p2 = (shl_ln23_2_fu_452_p2 ^ 64'd18446744073709551615);

assign xor_ln23_fu_495_p2 = (shl_ln23_fu_489_p2 ^ 64'd18446744073709551615);

assign xor_ln24_1_fu_562_p2 = (shl_ln24_2_fu_556_p2 ^ 64'd18446744073709551615);

assign xor_ln24_fu_599_p2 = (shl_ln24_fu_593_p2 ^ 64'd18446744073709551615);

assign zext_ln22_1_fu_246_p1 = select_ln21_fu_224_p3;

assign zext_ln22_fu_264_p1 = empty_23_fu_258_p2;

assign zext_ln23_1_fu_391_p1 = and_ln_fu_384_p3;

assign zext_ln23_2_fu_405_p1 = and_ln_fu_384_p3;

assign zext_ln23_3_fu_486_p1 = and_ln_reg_721;

assign zext_ln23_4_fu_507_p1 = tmp_8_reg_727;

assign zext_ln23_5_fu_449_p1 = and_ln_reg_721;

assign zext_ln23_6_fu_470_p1 = tmp_8_reg_727;

assign zext_ln23_fu_306_p1 = add_ln23_cast9_fu_296_p4;

assign zext_ln24_1_fu_318_p1 = select_ln21_fu_224_p3;

assign zext_ln24_2_fu_358_p1 = add_ln24_1_fu_328_p2;

assign zext_ln24_3_fu_435_p1 = and_ln3_fu_428_p3;

assign zext_ln24_4_fu_523_p1 = and_ln3_reg_733;

assign zext_ln24_5_fu_590_p1 = and_ln3_reg_733;

assign zext_ln24_6_fu_611_p1 = tmp_15_reg_750;

assign zext_ln24_7_fu_553_p1 = and_ln3_reg_733;

assign zext_ln24_8_fu_574_p1 = tmp_15_reg_750;

assign zext_ln24_fu_314_p1 = select_ln21_fu_224_p3;

always @ (posedge ap_clk) begin
    sol_0_addr_1_reg_677[8:5] <= 4'b0000;
    sol_1_addr_1_reg_682[8:5] <= 4'b0000;
    and_ln_reg_721[4:0] <= 5'b00000;
    and_ln3_reg_733[4:0] <= 5'b00000;
end

endmodule //stencil3d_stencil3d_Pipeline_col_bound_height_col_bound_row
